
Infusion_pump_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abe8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000067c  0800aca8  0800aca8  0001aca8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b324  0800b324  00020214  2**0
                  CONTENTS
  4 .ARM          00000008  0800b324  0800b324  0001b324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b32c  0800b32c  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b32c  0800b32c  0001b32c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b330  0800b330  0001b330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800b334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000848  20000214  0800b548  00020214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a5c  0800b548  00020a5c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144b6  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030b6  00000000  00000000  000346f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  000377a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  00038890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c80  00000000  00000000  00039810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015397  00000000  00000000  00051490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b2d1  00000000  00000000  00066827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f1af8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f38  00000000  00000000  000f1b4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000214 	.word	0x20000214
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800ac90 	.word	0x0800ac90

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000218 	.word	0x20000218
 8000104:	0800ac90 	.word	0x0800ac90

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fde7 	bl	8002010 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fd31 	bl	8001eb4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fdd9 	bl	8002010 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fdcf 	bl	8002010 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fd53 	bl	8001f2c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fd49 	bl	8001f2c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	1c08      	adds	r0, r1, #0
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fadf 	bl	8000a74 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fa63 	bl	800098c <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fad1 	bl	8000a74 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fac7 	bl	8000a74 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fa71 	bl	80009dc <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fa67 	bl	80009dc <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	1c08      	adds	r0, r1, #0
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	; (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f846 	bl	80005dc <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			; (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	0415      	lsls	r5, r2, #16
 8000560:	0c2d      	lsrs	r5, r5, #16
 8000562:	000f      	movs	r7, r1
 8000564:	0001      	movs	r1, r0
 8000566:	002e      	movs	r6, r5
 8000568:	46c6      	mov	lr, r8
 800056a:	4684      	mov	ip, r0
 800056c:	0400      	lsls	r0, r0, #16
 800056e:	0c14      	lsrs	r4, r2, #16
 8000570:	0c00      	lsrs	r0, r0, #16
 8000572:	0c09      	lsrs	r1, r1, #16
 8000574:	4346      	muls	r6, r0
 8000576:	434d      	muls	r5, r1
 8000578:	4360      	muls	r0, r4
 800057a:	4361      	muls	r1, r4
 800057c:	1940      	adds	r0, r0, r5
 800057e:	0c34      	lsrs	r4, r6, #16
 8000580:	1824      	adds	r4, r4, r0
 8000582:	b500      	push	{lr}
 8000584:	42a5      	cmp	r5, r4
 8000586:	d903      	bls.n	8000590 <__aeabi_lmul+0x34>
 8000588:	2080      	movs	r0, #128	; 0x80
 800058a:	0240      	lsls	r0, r0, #9
 800058c:	4680      	mov	r8, r0
 800058e:	4441      	add	r1, r8
 8000590:	0c25      	lsrs	r5, r4, #16
 8000592:	186d      	adds	r5, r5, r1
 8000594:	4661      	mov	r1, ip
 8000596:	4359      	muls	r1, r3
 8000598:	437a      	muls	r2, r7
 800059a:	0430      	lsls	r0, r6, #16
 800059c:	1949      	adds	r1, r1, r5
 800059e:	0424      	lsls	r4, r4, #16
 80005a0:	0c00      	lsrs	r0, r0, #16
 80005a2:	1820      	adds	r0, r4, r0
 80005a4:	1889      	adds	r1, r1, r2
 80005a6:	bc80      	pop	{r7}
 80005a8:	46b8      	mov	r8, r7
 80005aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005ac <__aeabi_f2uiz>:
 80005ac:	219e      	movs	r1, #158	; 0x9e
 80005ae:	b510      	push	{r4, lr}
 80005b0:	05c9      	lsls	r1, r1, #23
 80005b2:	1c04      	adds	r4, r0, #0
 80005b4:	f7ff ffa8 	bl	8000508 <__aeabi_fcmpge>
 80005b8:	2800      	cmp	r0, #0
 80005ba:	d103      	bne.n	80005c4 <__aeabi_f2uiz+0x18>
 80005bc:	1c20      	adds	r0, r4, #0
 80005be:	f000 fd85 	bl	80010cc <__aeabi_f2iz>
 80005c2:	bd10      	pop	{r4, pc}
 80005c4:	219e      	movs	r1, #158	; 0x9e
 80005c6:	1c20      	adds	r0, r4, #0
 80005c8:	05c9      	lsls	r1, r1, #23
 80005ca:	f000 fbb7 	bl	8000d3c <__aeabi_fsub>
 80005ce:	f000 fd7d 	bl	80010cc <__aeabi_f2iz>
 80005d2:	2380      	movs	r3, #128	; 0x80
 80005d4:	061b      	lsls	r3, r3, #24
 80005d6:	469c      	mov	ip, r3
 80005d8:	4460      	add	r0, ip
 80005da:	e7f2      	b.n	80005c2 <__aeabi_f2uiz+0x16>

080005dc <__udivmoddi4>:
 80005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005de:	4657      	mov	r7, sl
 80005e0:	464e      	mov	r6, r9
 80005e2:	4645      	mov	r5, r8
 80005e4:	46de      	mov	lr, fp
 80005e6:	b5e0      	push	{r5, r6, r7, lr}
 80005e8:	0004      	movs	r4, r0
 80005ea:	000d      	movs	r5, r1
 80005ec:	4692      	mov	sl, r2
 80005ee:	4699      	mov	r9, r3
 80005f0:	b083      	sub	sp, #12
 80005f2:	428b      	cmp	r3, r1
 80005f4:	d830      	bhi.n	8000658 <__udivmoddi4+0x7c>
 80005f6:	d02d      	beq.n	8000654 <__udivmoddi4+0x78>
 80005f8:	4649      	mov	r1, r9
 80005fa:	4650      	mov	r0, sl
 80005fc:	f002 fd0e 	bl	800301c <__clzdi2>
 8000600:	0029      	movs	r1, r5
 8000602:	0006      	movs	r6, r0
 8000604:	0020      	movs	r0, r4
 8000606:	f002 fd09 	bl	800301c <__clzdi2>
 800060a:	1a33      	subs	r3, r6, r0
 800060c:	4698      	mov	r8, r3
 800060e:	3b20      	subs	r3, #32
 8000610:	469b      	mov	fp, r3
 8000612:	d433      	bmi.n	800067c <__udivmoddi4+0xa0>
 8000614:	465a      	mov	r2, fp
 8000616:	4653      	mov	r3, sl
 8000618:	4093      	lsls	r3, r2
 800061a:	4642      	mov	r2, r8
 800061c:	001f      	movs	r7, r3
 800061e:	4653      	mov	r3, sl
 8000620:	4093      	lsls	r3, r2
 8000622:	001e      	movs	r6, r3
 8000624:	42af      	cmp	r7, r5
 8000626:	d83a      	bhi.n	800069e <__udivmoddi4+0xc2>
 8000628:	42af      	cmp	r7, r5
 800062a:	d100      	bne.n	800062e <__udivmoddi4+0x52>
 800062c:	e078      	b.n	8000720 <__udivmoddi4+0x144>
 800062e:	465b      	mov	r3, fp
 8000630:	1ba4      	subs	r4, r4, r6
 8000632:	41bd      	sbcs	r5, r7
 8000634:	2b00      	cmp	r3, #0
 8000636:	da00      	bge.n	800063a <__udivmoddi4+0x5e>
 8000638:	e075      	b.n	8000726 <__udivmoddi4+0x14a>
 800063a:	2200      	movs	r2, #0
 800063c:	2300      	movs	r3, #0
 800063e:	9200      	str	r2, [sp, #0]
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	2301      	movs	r3, #1
 8000644:	465a      	mov	r2, fp
 8000646:	4093      	lsls	r3, r2
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	2301      	movs	r3, #1
 800064c:	4642      	mov	r2, r8
 800064e:	4093      	lsls	r3, r2
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	e028      	b.n	80006a6 <__udivmoddi4+0xca>
 8000654:	4282      	cmp	r2, r0
 8000656:	d9cf      	bls.n	80005f8 <__udivmoddi4+0x1c>
 8000658:	2200      	movs	r2, #0
 800065a:	2300      	movs	r3, #0
 800065c:	9200      	str	r2, [sp, #0]
 800065e:	9301      	str	r3, [sp, #4]
 8000660:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <__udivmoddi4+0x8e>
 8000666:	601c      	str	r4, [r3, #0]
 8000668:	605d      	str	r5, [r3, #4]
 800066a:	9800      	ldr	r0, [sp, #0]
 800066c:	9901      	ldr	r1, [sp, #4]
 800066e:	b003      	add	sp, #12
 8000670:	bcf0      	pop	{r4, r5, r6, r7}
 8000672:	46bb      	mov	fp, r7
 8000674:	46b2      	mov	sl, r6
 8000676:	46a9      	mov	r9, r5
 8000678:	46a0      	mov	r8, r4
 800067a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800067c:	4642      	mov	r2, r8
 800067e:	2320      	movs	r3, #32
 8000680:	1a9b      	subs	r3, r3, r2
 8000682:	4652      	mov	r2, sl
 8000684:	40da      	lsrs	r2, r3
 8000686:	4641      	mov	r1, r8
 8000688:	0013      	movs	r3, r2
 800068a:	464a      	mov	r2, r9
 800068c:	408a      	lsls	r2, r1
 800068e:	0017      	movs	r7, r2
 8000690:	4642      	mov	r2, r8
 8000692:	431f      	orrs	r7, r3
 8000694:	4653      	mov	r3, sl
 8000696:	4093      	lsls	r3, r2
 8000698:	001e      	movs	r6, r3
 800069a:	42af      	cmp	r7, r5
 800069c:	d9c4      	bls.n	8000628 <__udivmoddi4+0x4c>
 800069e:	2200      	movs	r2, #0
 80006a0:	2300      	movs	r3, #0
 80006a2:	9200      	str	r2, [sp, #0]
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	4643      	mov	r3, r8
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d0d9      	beq.n	8000660 <__udivmoddi4+0x84>
 80006ac:	07fb      	lsls	r3, r7, #31
 80006ae:	0872      	lsrs	r2, r6, #1
 80006b0:	431a      	orrs	r2, r3
 80006b2:	4646      	mov	r6, r8
 80006b4:	087b      	lsrs	r3, r7, #1
 80006b6:	e00e      	b.n	80006d6 <__udivmoddi4+0xfa>
 80006b8:	42ab      	cmp	r3, r5
 80006ba:	d101      	bne.n	80006c0 <__udivmoddi4+0xe4>
 80006bc:	42a2      	cmp	r2, r4
 80006be:	d80c      	bhi.n	80006da <__udivmoddi4+0xfe>
 80006c0:	1aa4      	subs	r4, r4, r2
 80006c2:	419d      	sbcs	r5, r3
 80006c4:	2001      	movs	r0, #1
 80006c6:	1924      	adds	r4, r4, r4
 80006c8:	416d      	adcs	r5, r5
 80006ca:	2100      	movs	r1, #0
 80006cc:	3e01      	subs	r6, #1
 80006ce:	1824      	adds	r4, r4, r0
 80006d0:	414d      	adcs	r5, r1
 80006d2:	2e00      	cmp	r6, #0
 80006d4:	d006      	beq.n	80006e4 <__udivmoddi4+0x108>
 80006d6:	42ab      	cmp	r3, r5
 80006d8:	d9ee      	bls.n	80006b8 <__udivmoddi4+0xdc>
 80006da:	3e01      	subs	r6, #1
 80006dc:	1924      	adds	r4, r4, r4
 80006de:	416d      	adcs	r5, r5
 80006e0:	2e00      	cmp	r6, #0
 80006e2:	d1f8      	bne.n	80006d6 <__udivmoddi4+0xfa>
 80006e4:	9800      	ldr	r0, [sp, #0]
 80006e6:	9901      	ldr	r1, [sp, #4]
 80006e8:	465b      	mov	r3, fp
 80006ea:	1900      	adds	r0, r0, r4
 80006ec:	4169      	adcs	r1, r5
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	db24      	blt.n	800073c <__udivmoddi4+0x160>
 80006f2:	002b      	movs	r3, r5
 80006f4:	465a      	mov	r2, fp
 80006f6:	4644      	mov	r4, r8
 80006f8:	40d3      	lsrs	r3, r2
 80006fa:	002a      	movs	r2, r5
 80006fc:	40e2      	lsrs	r2, r4
 80006fe:	001c      	movs	r4, r3
 8000700:	465b      	mov	r3, fp
 8000702:	0015      	movs	r5, r2
 8000704:	2b00      	cmp	r3, #0
 8000706:	db2a      	blt.n	800075e <__udivmoddi4+0x182>
 8000708:	0026      	movs	r6, r4
 800070a:	409e      	lsls	r6, r3
 800070c:	0033      	movs	r3, r6
 800070e:	0026      	movs	r6, r4
 8000710:	4647      	mov	r7, r8
 8000712:	40be      	lsls	r6, r7
 8000714:	0032      	movs	r2, r6
 8000716:	1a80      	subs	r0, r0, r2
 8000718:	4199      	sbcs	r1, r3
 800071a:	9000      	str	r0, [sp, #0]
 800071c:	9101      	str	r1, [sp, #4]
 800071e:	e79f      	b.n	8000660 <__udivmoddi4+0x84>
 8000720:	42a3      	cmp	r3, r4
 8000722:	d8bc      	bhi.n	800069e <__udivmoddi4+0xc2>
 8000724:	e783      	b.n	800062e <__udivmoddi4+0x52>
 8000726:	4642      	mov	r2, r8
 8000728:	2320      	movs	r3, #32
 800072a:	2100      	movs	r1, #0
 800072c:	1a9b      	subs	r3, r3, r2
 800072e:	2200      	movs	r2, #0
 8000730:	9100      	str	r1, [sp, #0]
 8000732:	9201      	str	r2, [sp, #4]
 8000734:	2201      	movs	r2, #1
 8000736:	40da      	lsrs	r2, r3
 8000738:	9201      	str	r2, [sp, #4]
 800073a:	e786      	b.n	800064a <__udivmoddi4+0x6e>
 800073c:	4642      	mov	r2, r8
 800073e:	2320      	movs	r3, #32
 8000740:	1a9b      	subs	r3, r3, r2
 8000742:	002a      	movs	r2, r5
 8000744:	4646      	mov	r6, r8
 8000746:	409a      	lsls	r2, r3
 8000748:	0023      	movs	r3, r4
 800074a:	40f3      	lsrs	r3, r6
 800074c:	4644      	mov	r4, r8
 800074e:	4313      	orrs	r3, r2
 8000750:	002a      	movs	r2, r5
 8000752:	40e2      	lsrs	r2, r4
 8000754:	001c      	movs	r4, r3
 8000756:	465b      	mov	r3, fp
 8000758:	0015      	movs	r5, r2
 800075a:	2b00      	cmp	r3, #0
 800075c:	dad4      	bge.n	8000708 <__udivmoddi4+0x12c>
 800075e:	4642      	mov	r2, r8
 8000760:	002f      	movs	r7, r5
 8000762:	2320      	movs	r3, #32
 8000764:	0026      	movs	r6, r4
 8000766:	4097      	lsls	r7, r2
 8000768:	1a9b      	subs	r3, r3, r2
 800076a:	40de      	lsrs	r6, r3
 800076c:	003b      	movs	r3, r7
 800076e:	4333      	orrs	r3, r6
 8000770:	e7cd      	b.n	800070e <__udivmoddi4+0x132>
 8000772:	46c0      	nop			; (mov r8, r8)

08000774 <__aeabi_fdiv>:
 8000774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000776:	464f      	mov	r7, r9
 8000778:	4646      	mov	r6, r8
 800077a:	46d6      	mov	lr, sl
 800077c:	0245      	lsls	r5, r0, #9
 800077e:	b5c0      	push	{r6, r7, lr}
 8000780:	0047      	lsls	r7, r0, #1
 8000782:	1c0c      	adds	r4, r1, #0
 8000784:	0a6d      	lsrs	r5, r5, #9
 8000786:	0e3f      	lsrs	r7, r7, #24
 8000788:	0fc6      	lsrs	r6, r0, #31
 800078a:	2f00      	cmp	r7, #0
 800078c:	d066      	beq.n	800085c <__aeabi_fdiv+0xe8>
 800078e:	2fff      	cmp	r7, #255	; 0xff
 8000790:	d06c      	beq.n	800086c <__aeabi_fdiv+0xf8>
 8000792:	2300      	movs	r3, #0
 8000794:	00ea      	lsls	r2, r5, #3
 8000796:	2580      	movs	r5, #128	; 0x80
 8000798:	4699      	mov	r9, r3
 800079a:	469a      	mov	sl, r3
 800079c:	04ed      	lsls	r5, r5, #19
 800079e:	4315      	orrs	r5, r2
 80007a0:	3f7f      	subs	r7, #127	; 0x7f
 80007a2:	0260      	lsls	r0, r4, #9
 80007a4:	0061      	lsls	r1, r4, #1
 80007a6:	0a43      	lsrs	r3, r0, #9
 80007a8:	4698      	mov	r8, r3
 80007aa:	0e09      	lsrs	r1, r1, #24
 80007ac:	0fe4      	lsrs	r4, r4, #31
 80007ae:	2900      	cmp	r1, #0
 80007b0:	d048      	beq.n	8000844 <__aeabi_fdiv+0xd0>
 80007b2:	29ff      	cmp	r1, #255	; 0xff
 80007b4:	d010      	beq.n	80007d8 <__aeabi_fdiv+0x64>
 80007b6:	2280      	movs	r2, #128	; 0x80
 80007b8:	00d8      	lsls	r0, r3, #3
 80007ba:	04d2      	lsls	r2, r2, #19
 80007bc:	4302      	orrs	r2, r0
 80007be:	4690      	mov	r8, r2
 80007c0:	2000      	movs	r0, #0
 80007c2:	397f      	subs	r1, #127	; 0x7f
 80007c4:	464a      	mov	r2, r9
 80007c6:	0033      	movs	r3, r6
 80007c8:	1a7f      	subs	r7, r7, r1
 80007ca:	4302      	orrs	r2, r0
 80007cc:	496c      	ldr	r1, [pc, #432]	; (8000980 <__aeabi_fdiv+0x20c>)
 80007ce:	0092      	lsls	r2, r2, #2
 80007d0:	588a      	ldr	r2, [r1, r2]
 80007d2:	4063      	eors	r3, r4
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	4697      	mov	pc, r2
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d16d      	bne.n	80008b8 <__aeabi_fdiv+0x144>
 80007dc:	2002      	movs	r0, #2
 80007de:	3fff      	subs	r7, #255	; 0xff
 80007e0:	e033      	b.n	800084a <__aeabi_fdiv+0xd6>
 80007e2:	2300      	movs	r3, #0
 80007e4:	4698      	mov	r8, r3
 80007e6:	0026      	movs	r6, r4
 80007e8:	4645      	mov	r5, r8
 80007ea:	4682      	mov	sl, r0
 80007ec:	4653      	mov	r3, sl
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fdiv+0x80>
 80007f2:	e07f      	b.n	80008f4 <__aeabi_fdiv+0x180>
 80007f4:	2b03      	cmp	r3, #3
 80007f6:	d100      	bne.n	80007fa <__aeabi_fdiv+0x86>
 80007f8:	e094      	b.n	8000924 <__aeabi_fdiv+0x1b0>
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d017      	beq.n	800082e <__aeabi_fdiv+0xba>
 80007fe:	0038      	movs	r0, r7
 8000800:	307f      	adds	r0, #127	; 0x7f
 8000802:	2800      	cmp	r0, #0
 8000804:	dd5f      	ble.n	80008c6 <__aeabi_fdiv+0x152>
 8000806:	076b      	lsls	r3, r5, #29
 8000808:	d004      	beq.n	8000814 <__aeabi_fdiv+0xa0>
 800080a:	230f      	movs	r3, #15
 800080c:	402b      	ands	r3, r5
 800080e:	2b04      	cmp	r3, #4
 8000810:	d000      	beq.n	8000814 <__aeabi_fdiv+0xa0>
 8000812:	3504      	adds	r5, #4
 8000814:	012b      	lsls	r3, r5, #4
 8000816:	d503      	bpl.n	8000820 <__aeabi_fdiv+0xac>
 8000818:	0038      	movs	r0, r7
 800081a:	4b5a      	ldr	r3, [pc, #360]	; (8000984 <__aeabi_fdiv+0x210>)
 800081c:	3080      	adds	r0, #128	; 0x80
 800081e:	401d      	ands	r5, r3
 8000820:	28fe      	cmp	r0, #254	; 0xfe
 8000822:	dc67      	bgt.n	80008f4 <__aeabi_fdiv+0x180>
 8000824:	01ad      	lsls	r5, r5, #6
 8000826:	0a6d      	lsrs	r5, r5, #9
 8000828:	b2c0      	uxtb	r0, r0
 800082a:	e002      	b.n	8000832 <__aeabi_fdiv+0xbe>
 800082c:	001e      	movs	r6, r3
 800082e:	2000      	movs	r0, #0
 8000830:	2500      	movs	r5, #0
 8000832:	05c0      	lsls	r0, r0, #23
 8000834:	4328      	orrs	r0, r5
 8000836:	07f6      	lsls	r6, r6, #31
 8000838:	4330      	orrs	r0, r6
 800083a:	bce0      	pop	{r5, r6, r7}
 800083c:	46ba      	mov	sl, r7
 800083e:	46b1      	mov	r9, r6
 8000840:	46a8      	mov	r8, r5
 8000842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000844:	2b00      	cmp	r3, #0
 8000846:	d12b      	bne.n	80008a0 <__aeabi_fdiv+0x12c>
 8000848:	2001      	movs	r0, #1
 800084a:	464a      	mov	r2, r9
 800084c:	0033      	movs	r3, r6
 800084e:	494e      	ldr	r1, [pc, #312]	; (8000988 <__aeabi_fdiv+0x214>)
 8000850:	4302      	orrs	r2, r0
 8000852:	0092      	lsls	r2, r2, #2
 8000854:	588a      	ldr	r2, [r1, r2]
 8000856:	4063      	eors	r3, r4
 8000858:	b2db      	uxtb	r3, r3
 800085a:	4697      	mov	pc, r2
 800085c:	2d00      	cmp	r5, #0
 800085e:	d113      	bne.n	8000888 <__aeabi_fdiv+0x114>
 8000860:	2304      	movs	r3, #4
 8000862:	4699      	mov	r9, r3
 8000864:	3b03      	subs	r3, #3
 8000866:	2700      	movs	r7, #0
 8000868:	469a      	mov	sl, r3
 800086a:	e79a      	b.n	80007a2 <__aeabi_fdiv+0x2e>
 800086c:	2d00      	cmp	r5, #0
 800086e:	d105      	bne.n	800087c <__aeabi_fdiv+0x108>
 8000870:	2308      	movs	r3, #8
 8000872:	4699      	mov	r9, r3
 8000874:	3b06      	subs	r3, #6
 8000876:	27ff      	movs	r7, #255	; 0xff
 8000878:	469a      	mov	sl, r3
 800087a:	e792      	b.n	80007a2 <__aeabi_fdiv+0x2e>
 800087c:	230c      	movs	r3, #12
 800087e:	4699      	mov	r9, r3
 8000880:	3b09      	subs	r3, #9
 8000882:	27ff      	movs	r7, #255	; 0xff
 8000884:	469a      	mov	sl, r3
 8000886:	e78c      	b.n	80007a2 <__aeabi_fdiv+0x2e>
 8000888:	0028      	movs	r0, r5
 800088a:	f002 fba9 	bl	8002fe0 <__clzsi2>
 800088e:	2776      	movs	r7, #118	; 0x76
 8000890:	1f43      	subs	r3, r0, #5
 8000892:	409d      	lsls	r5, r3
 8000894:	2300      	movs	r3, #0
 8000896:	427f      	negs	r7, r7
 8000898:	4699      	mov	r9, r3
 800089a:	469a      	mov	sl, r3
 800089c:	1a3f      	subs	r7, r7, r0
 800089e:	e780      	b.n	80007a2 <__aeabi_fdiv+0x2e>
 80008a0:	0018      	movs	r0, r3
 80008a2:	f002 fb9d 	bl	8002fe0 <__clzsi2>
 80008a6:	4642      	mov	r2, r8
 80008a8:	1f43      	subs	r3, r0, #5
 80008aa:	2176      	movs	r1, #118	; 0x76
 80008ac:	409a      	lsls	r2, r3
 80008ae:	4249      	negs	r1, r1
 80008b0:	1a09      	subs	r1, r1, r0
 80008b2:	4690      	mov	r8, r2
 80008b4:	2000      	movs	r0, #0
 80008b6:	e785      	b.n	80007c4 <__aeabi_fdiv+0x50>
 80008b8:	21ff      	movs	r1, #255	; 0xff
 80008ba:	2003      	movs	r0, #3
 80008bc:	e782      	b.n	80007c4 <__aeabi_fdiv+0x50>
 80008be:	001e      	movs	r6, r3
 80008c0:	20ff      	movs	r0, #255	; 0xff
 80008c2:	2500      	movs	r5, #0
 80008c4:	e7b5      	b.n	8000832 <__aeabi_fdiv+0xbe>
 80008c6:	2301      	movs	r3, #1
 80008c8:	1a1b      	subs	r3, r3, r0
 80008ca:	2b1b      	cmp	r3, #27
 80008cc:	dcaf      	bgt.n	800082e <__aeabi_fdiv+0xba>
 80008ce:	379e      	adds	r7, #158	; 0x9e
 80008d0:	0029      	movs	r1, r5
 80008d2:	40bd      	lsls	r5, r7
 80008d4:	40d9      	lsrs	r1, r3
 80008d6:	1e6a      	subs	r2, r5, #1
 80008d8:	4195      	sbcs	r5, r2
 80008da:	430d      	orrs	r5, r1
 80008dc:	076b      	lsls	r3, r5, #29
 80008de:	d004      	beq.n	80008ea <__aeabi_fdiv+0x176>
 80008e0:	230f      	movs	r3, #15
 80008e2:	402b      	ands	r3, r5
 80008e4:	2b04      	cmp	r3, #4
 80008e6:	d000      	beq.n	80008ea <__aeabi_fdiv+0x176>
 80008e8:	3504      	adds	r5, #4
 80008ea:	016b      	lsls	r3, r5, #5
 80008ec:	d544      	bpl.n	8000978 <__aeabi_fdiv+0x204>
 80008ee:	2001      	movs	r0, #1
 80008f0:	2500      	movs	r5, #0
 80008f2:	e79e      	b.n	8000832 <__aeabi_fdiv+0xbe>
 80008f4:	20ff      	movs	r0, #255	; 0xff
 80008f6:	2500      	movs	r5, #0
 80008f8:	e79b      	b.n	8000832 <__aeabi_fdiv+0xbe>
 80008fa:	2580      	movs	r5, #128	; 0x80
 80008fc:	2600      	movs	r6, #0
 80008fe:	20ff      	movs	r0, #255	; 0xff
 8000900:	03ed      	lsls	r5, r5, #15
 8000902:	e796      	b.n	8000832 <__aeabi_fdiv+0xbe>
 8000904:	2300      	movs	r3, #0
 8000906:	4698      	mov	r8, r3
 8000908:	2080      	movs	r0, #128	; 0x80
 800090a:	03c0      	lsls	r0, r0, #15
 800090c:	4205      	tst	r5, r0
 800090e:	d009      	beq.n	8000924 <__aeabi_fdiv+0x1b0>
 8000910:	4643      	mov	r3, r8
 8000912:	4203      	tst	r3, r0
 8000914:	d106      	bne.n	8000924 <__aeabi_fdiv+0x1b0>
 8000916:	4645      	mov	r5, r8
 8000918:	4305      	orrs	r5, r0
 800091a:	026d      	lsls	r5, r5, #9
 800091c:	0026      	movs	r6, r4
 800091e:	20ff      	movs	r0, #255	; 0xff
 8000920:	0a6d      	lsrs	r5, r5, #9
 8000922:	e786      	b.n	8000832 <__aeabi_fdiv+0xbe>
 8000924:	2080      	movs	r0, #128	; 0x80
 8000926:	03c0      	lsls	r0, r0, #15
 8000928:	4305      	orrs	r5, r0
 800092a:	026d      	lsls	r5, r5, #9
 800092c:	20ff      	movs	r0, #255	; 0xff
 800092e:	0a6d      	lsrs	r5, r5, #9
 8000930:	e77f      	b.n	8000832 <__aeabi_fdiv+0xbe>
 8000932:	4641      	mov	r1, r8
 8000934:	016a      	lsls	r2, r5, #5
 8000936:	0148      	lsls	r0, r1, #5
 8000938:	4282      	cmp	r2, r0
 800093a:	d219      	bcs.n	8000970 <__aeabi_fdiv+0x1fc>
 800093c:	211b      	movs	r1, #27
 800093e:	2500      	movs	r5, #0
 8000940:	3f01      	subs	r7, #1
 8000942:	2601      	movs	r6, #1
 8000944:	0014      	movs	r4, r2
 8000946:	006d      	lsls	r5, r5, #1
 8000948:	0052      	lsls	r2, r2, #1
 800094a:	2c00      	cmp	r4, #0
 800094c:	db01      	blt.n	8000952 <__aeabi_fdiv+0x1de>
 800094e:	4290      	cmp	r0, r2
 8000950:	d801      	bhi.n	8000956 <__aeabi_fdiv+0x1e2>
 8000952:	1a12      	subs	r2, r2, r0
 8000954:	4335      	orrs	r5, r6
 8000956:	3901      	subs	r1, #1
 8000958:	2900      	cmp	r1, #0
 800095a:	d1f3      	bne.n	8000944 <__aeabi_fdiv+0x1d0>
 800095c:	1e50      	subs	r0, r2, #1
 800095e:	4182      	sbcs	r2, r0
 8000960:	0038      	movs	r0, r7
 8000962:	307f      	adds	r0, #127	; 0x7f
 8000964:	001e      	movs	r6, r3
 8000966:	4315      	orrs	r5, r2
 8000968:	2800      	cmp	r0, #0
 800096a:	dd00      	ble.n	800096e <__aeabi_fdiv+0x1fa>
 800096c:	e74b      	b.n	8000806 <__aeabi_fdiv+0x92>
 800096e:	e7aa      	b.n	80008c6 <__aeabi_fdiv+0x152>
 8000970:	211a      	movs	r1, #26
 8000972:	2501      	movs	r5, #1
 8000974:	1a12      	subs	r2, r2, r0
 8000976:	e7e4      	b.n	8000942 <__aeabi_fdiv+0x1ce>
 8000978:	01ad      	lsls	r5, r5, #6
 800097a:	2000      	movs	r0, #0
 800097c:	0a6d      	lsrs	r5, r5, #9
 800097e:	e758      	b.n	8000832 <__aeabi_fdiv+0xbe>
 8000980:	0800ad98 	.word	0x0800ad98
 8000984:	f7ffffff 	.word	0xf7ffffff
 8000988:	0800add8 	.word	0x0800add8

0800098c <__eqsf2>:
 800098c:	b570      	push	{r4, r5, r6, lr}
 800098e:	0042      	lsls	r2, r0, #1
 8000990:	024e      	lsls	r6, r1, #9
 8000992:	004c      	lsls	r4, r1, #1
 8000994:	0245      	lsls	r5, r0, #9
 8000996:	0a6d      	lsrs	r5, r5, #9
 8000998:	0e12      	lsrs	r2, r2, #24
 800099a:	0fc3      	lsrs	r3, r0, #31
 800099c:	0a76      	lsrs	r6, r6, #9
 800099e:	0e24      	lsrs	r4, r4, #24
 80009a0:	0fc9      	lsrs	r1, r1, #31
 80009a2:	2aff      	cmp	r2, #255	; 0xff
 80009a4:	d00f      	beq.n	80009c6 <__eqsf2+0x3a>
 80009a6:	2cff      	cmp	r4, #255	; 0xff
 80009a8:	d011      	beq.n	80009ce <__eqsf2+0x42>
 80009aa:	2001      	movs	r0, #1
 80009ac:	42a2      	cmp	r2, r4
 80009ae:	d000      	beq.n	80009b2 <__eqsf2+0x26>
 80009b0:	bd70      	pop	{r4, r5, r6, pc}
 80009b2:	42b5      	cmp	r5, r6
 80009b4:	d1fc      	bne.n	80009b0 <__eqsf2+0x24>
 80009b6:	428b      	cmp	r3, r1
 80009b8:	d00d      	beq.n	80009d6 <__eqsf2+0x4a>
 80009ba:	2a00      	cmp	r2, #0
 80009bc:	d1f8      	bne.n	80009b0 <__eqsf2+0x24>
 80009be:	0028      	movs	r0, r5
 80009c0:	1e45      	subs	r5, r0, #1
 80009c2:	41a8      	sbcs	r0, r5
 80009c4:	e7f4      	b.n	80009b0 <__eqsf2+0x24>
 80009c6:	2001      	movs	r0, #1
 80009c8:	2d00      	cmp	r5, #0
 80009ca:	d1f1      	bne.n	80009b0 <__eqsf2+0x24>
 80009cc:	e7eb      	b.n	80009a6 <__eqsf2+0x1a>
 80009ce:	2001      	movs	r0, #1
 80009d0:	2e00      	cmp	r6, #0
 80009d2:	d1ed      	bne.n	80009b0 <__eqsf2+0x24>
 80009d4:	e7e9      	b.n	80009aa <__eqsf2+0x1e>
 80009d6:	2000      	movs	r0, #0
 80009d8:	e7ea      	b.n	80009b0 <__eqsf2+0x24>
 80009da:	46c0      	nop			; (mov r8, r8)

080009dc <__gesf2>:
 80009dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009de:	0042      	lsls	r2, r0, #1
 80009e0:	0246      	lsls	r6, r0, #9
 80009e2:	024d      	lsls	r5, r1, #9
 80009e4:	004c      	lsls	r4, r1, #1
 80009e6:	0fc3      	lsrs	r3, r0, #31
 80009e8:	0a76      	lsrs	r6, r6, #9
 80009ea:	0e12      	lsrs	r2, r2, #24
 80009ec:	0a6d      	lsrs	r5, r5, #9
 80009ee:	0e24      	lsrs	r4, r4, #24
 80009f0:	0fc8      	lsrs	r0, r1, #31
 80009f2:	2aff      	cmp	r2, #255	; 0xff
 80009f4:	d01f      	beq.n	8000a36 <__gesf2+0x5a>
 80009f6:	2cff      	cmp	r4, #255	; 0xff
 80009f8:	d010      	beq.n	8000a1c <__gesf2+0x40>
 80009fa:	2a00      	cmp	r2, #0
 80009fc:	d11f      	bne.n	8000a3e <__gesf2+0x62>
 80009fe:	4271      	negs	r1, r6
 8000a00:	4171      	adcs	r1, r6
 8000a02:	2c00      	cmp	r4, #0
 8000a04:	d101      	bne.n	8000a0a <__gesf2+0x2e>
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	d01e      	beq.n	8000a48 <__gesf2+0x6c>
 8000a0a:	2900      	cmp	r1, #0
 8000a0c:	d10e      	bne.n	8000a2c <__gesf2+0x50>
 8000a0e:	4283      	cmp	r3, r0
 8000a10:	d01e      	beq.n	8000a50 <__gesf2+0x74>
 8000a12:	2102      	movs	r1, #2
 8000a14:	1e58      	subs	r0, r3, #1
 8000a16:	4008      	ands	r0, r1
 8000a18:	3801      	subs	r0, #1
 8000a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a1c:	2d00      	cmp	r5, #0
 8000a1e:	d126      	bne.n	8000a6e <__gesf2+0x92>
 8000a20:	2a00      	cmp	r2, #0
 8000a22:	d1f4      	bne.n	8000a0e <__gesf2+0x32>
 8000a24:	4271      	negs	r1, r6
 8000a26:	4171      	adcs	r1, r6
 8000a28:	2900      	cmp	r1, #0
 8000a2a:	d0f0      	beq.n	8000a0e <__gesf2+0x32>
 8000a2c:	2800      	cmp	r0, #0
 8000a2e:	d1f4      	bne.n	8000a1a <__gesf2+0x3e>
 8000a30:	2001      	movs	r0, #1
 8000a32:	4240      	negs	r0, r0
 8000a34:	e7f1      	b.n	8000a1a <__gesf2+0x3e>
 8000a36:	2e00      	cmp	r6, #0
 8000a38:	d119      	bne.n	8000a6e <__gesf2+0x92>
 8000a3a:	2cff      	cmp	r4, #255	; 0xff
 8000a3c:	d0ee      	beq.n	8000a1c <__gesf2+0x40>
 8000a3e:	2c00      	cmp	r4, #0
 8000a40:	d1e5      	bne.n	8000a0e <__gesf2+0x32>
 8000a42:	2d00      	cmp	r5, #0
 8000a44:	d1e3      	bne.n	8000a0e <__gesf2+0x32>
 8000a46:	e7e4      	b.n	8000a12 <__gesf2+0x36>
 8000a48:	2000      	movs	r0, #0
 8000a4a:	2e00      	cmp	r6, #0
 8000a4c:	d0e5      	beq.n	8000a1a <__gesf2+0x3e>
 8000a4e:	e7e0      	b.n	8000a12 <__gesf2+0x36>
 8000a50:	42a2      	cmp	r2, r4
 8000a52:	dc05      	bgt.n	8000a60 <__gesf2+0x84>
 8000a54:	dbea      	blt.n	8000a2c <__gesf2+0x50>
 8000a56:	42ae      	cmp	r6, r5
 8000a58:	d802      	bhi.n	8000a60 <__gesf2+0x84>
 8000a5a:	d3e7      	bcc.n	8000a2c <__gesf2+0x50>
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	e7dc      	b.n	8000a1a <__gesf2+0x3e>
 8000a60:	4241      	negs	r1, r0
 8000a62:	4141      	adcs	r1, r0
 8000a64:	4248      	negs	r0, r1
 8000a66:	2102      	movs	r1, #2
 8000a68:	4008      	ands	r0, r1
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	e7d5      	b.n	8000a1a <__gesf2+0x3e>
 8000a6e:	2002      	movs	r0, #2
 8000a70:	4240      	negs	r0, r0
 8000a72:	e7d2      	b.n	8000a1a <__gesf2+0x3e>

08000a74 <__lesf2>:
 8000a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a76:	0042      	lsls	r2, r0, #1
 8000a78:	0246      	lsls	r6, r0, #9
 8000a7a:	024d      	lsls	r5, r1, #9
 8000a7c:	004c      	lsls	r4, r1, #1
 8000a7e:	0fc3      	lsrs	r3, r0, #31
 8000a80:	0a76      	lsrs	r6, r6, #9
 8000a82:	0e12      	lsrs	r2, r2, #24
 8000a84:	0a6d      	lsrs	r5, r5, #9
 8000a86:	0e24      	lsrs	r4, r4, #24
 8000a88:	0fc8      	lsrs	r0, r1, #31
 8000a8a:	2aff      	cmp	r2, #255	; 0xff
 8000a8c:	d00d      	beq.n	8000aaa <__lesf2+0x36>
 8000a8e:	2cff      	cmp	r4, #255	; 0xff
 8000a90:	d00f      	beq.n	8000ab2 <__lesf2+0x3e>
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	d123      	bne.n	8000ade <__lesf2+0x6a>
 8000a96:	4271      	negs	r1, r6
 8000a98:	4171      	adcs	r1, r6
 8000a9a:	2c00      	cmp	r4, #0
 8000a9c:	d10f      	bne.n	8000abe <__lesf2+0x4a>
 8000a9e:	2d00      	cmp	r5, #0
 8000aa0:	d10d      	bne.n	8000abe <__lesf2+0x4a>
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	2e00      	cmp	r6, #0
 8000aa6:	d014      	beq.n	8000ad2 <__lesf2+0x5e>
 8000aa8:	e00d      	b.n	8000ac6 <__lesf2+0x52>
 8000aaa:	2e00      	cmp	r6, #0
 8000aac:	d110      	bne.n	8000ad0 <__lesf2+0x5c>
 8000aae:	2cff      	cmp	r4, #255	; 0xff
 8000ab0:	d115      	bne.n	8000ade <__lesf2+0x6a>
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	d10c      	bne.n	8000ad0 <__lesf2+0x5c>
 8000ab6:	2a00      	cmp	r2, #0
 8000ab8:	d103      	bne.n	8000ac2 <__lesf2+0x4e>
 8000aba:	4271      	negs	r1, r6
 8000abc:	4171      	adcs	r1, r6
 8000abe:	2900      	cmp	r1, #0
 8000ac0:	d108      	bne.n	8000ad4 <__lesf2+0x60>
 8000ac2:	4283      	cmp	r3, r0
 8000ac4:	d010      	beq.n	8000ae8 <__lesf2+0x74>
 8000ac6:	2102      	movs	r1, #2
 8000ac8:	1e58      	subs	r0, r3, #1
 8000aca:	4008      	ands	r0, r1
 8000acc:	3801      	subs	r0, #1
 8000ace:	e000      	b.n	8000ad2 <__lesf2+0x5e>
 8000ad0:	2002      	movs	r0, #2
 8000ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ad4:	2800      	cmp	r0, #0
 8000ad6:	d1fc      	bne.n	8000ad2 <__lesf2+0x5e>
 8000ad8:	2001      	movs	r0, #1
 8000ada:	4240      	negs	r0, r0
 8000adc:	e7f9      	b.n	8000ad2 <__lesf2+0x5e>
 8000ade:	2c00      	cmp	r4, #0
 8000ae0:	d1ef      	bne.n	8000ac2 <__lesf2+0x4e>
 8000ae2:	2d00      	cmp	r5, #0
 8000ae4:	d1ed      	bne.n	8000ac2 <__lesf2+0x4e>
 8000ae6:	e7ee      	b.n	8000ac6 <__lesf2+0x52>
 8000ae8:	42a2      	cmp	r2, r4
 8000aea:	dc05      	bgt.n	8000af8 <__lesf2+0x84>
 8000aec:	dbf2      	blt.n	8000ad4 <__lesf2+0x60>
 8000aee:	42ae      	cmp	r6, r5
 8000af0:	d802      	bhi.n	8000af8 <__lesf2+0x84>
 8000af2:	d3ef      	bcc.n	8000ad4 <__lesf2+0x60>
 8000af4:	2000      	movs	r0, #0
 8000af6:	e7ec      	b.n	8000ad2 <__lesf2+0x5e>
 8000af8:	4241      	negs	r1, r0
 8000afa:	4141      	adcs	r1, r0
 8000afc:	4248      	negs	r0, r1
 8000afe:	2102      	movs	r1, #2
 8000b00:	4008      	ands	r0, r1
 8000b02:	3801      	subs	r0, #1
 8000b04:	e7e5      	b.n	8000ad2 <__lesf2+0x5e>
 8000b06:	46c0      	nop			; (mov r8, r8)

08000b08 <__aeabi_fmul>:
 8000b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b0a:	4657      	mov	r7, sl
 8000b0c:	464e      	mov	r6, r9
 8000b0e:	4645      	mov	r5, r8
 8000b10:	46de      	mov	lr, fp
 8000b12:	0244      	lsls	r4, r0, #9
 8000b14:	b5e0      	push	{r5, r6, r7, lr}
 8000b16:	0045      	lsls	r5, r0, #1
 8000b18:	1c0f      	adds	r7, r1, #0
 8000b1a:	0a64      	lsrs	r4, r4, #9
 8000b1c:	0e2d      	lsrs	r5, r5, #24
 8000b1e:	0fc6      	lsrs	r6, r0, #31
 8000b20:	2d00      	cmp	r5, #0
 8000b22:	d047      	beq.n	8000bb4 <__aeabi_fmul+0xac>
 8000b24:	2dff      	cmp	r5, #255	; 0xff
 8000b26:	d04d      	beq.n	8000bc4 <__aeabi_fmul+0xbc>
 8000b28:	2300      	movs	r3, #0
 8000b2a:	2080      	movs	r0, #128	; 0x80
 8000b2c:	469a      	mov	sl, r3
 8000b2e:	469b      	mov	fp, r3
 8000b30:	00e4      	lsls	r4, r4, #3
 8000b32:	04c0      	lsls	r0, r0, #19
 8000b34:	4304      	orrs	r4, r0
 8000b36:	3d7f      	subs	r5, #127	; 0x7f
 8000b38:	0278      	lsls	r0, r7, #9
 8000b3a:	0a43      	lsrs	r3, r0, #9
 8000b3c:	4699      	mov	r9, r3
 8000b3e:	007a      	lsls	r2, r7, #1
 8000b40:	0ffb      	lsrs	r3, r7, #31
 8000b42:	4698      	mov	r8, r3
 8000b44:	0e12      	lsrs	r2, r2, #24
 8000b46:	464b      	mov	r3, r9
 8000b48:	d044      	beq.n	8000bd4 <__aeabi_fmul+0xcc>
 8000b4a:	2aff      	cmp	r2, #255	; 0xff
 8000b4c:	d011      	beq.n	8000b72 <__aeabi_fmul+0x6a>
 8000b4e:	00d8      	lsls	r0, r3, #3
 8000b50:	2380      	movs	r3, #128	; 0x80
 8000b52:	04db      	lsls	r3, r3, #19
 8000b54:	4303      	orrs	r3, r0
 8000b56:	4699      	mov	r9, r3
 8000b58:	2000      	movs	r0, #0
 8000b5a:	3a7f      	subs	r2, #127	; 0x7f
 8000b5c:	18ad      	adds	r5, r5, r2
 8000b5e:	4647      	mov	r7, r8
 8000b60:	4653      	mov	r3, sl
 8000b62:	4077      	eors	r7, r6
 8000b64:	1c69      	adds	r1, r5, #1
 8000b66:	2b0f      	cmp	r3, #15
 8000b68:	d83f      	bhi.n	8000bea <__aeabi_fmul+0xe2>
 8000b6a:	4a72      	ldr	r2, [pc, #456]	; (8000d34 <__aeabi_fmul+0x22c>)
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	58d3      	ldr	r3, [r2, r3]
 8000b70:	469f      	mov	pc, r3
 8000b72:	35ff      	adds	r5, #255	; 0xff
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d000      	beq.n	8000b7a <__aeabi_fmul+0x72>
 8000b78:	e079      	b.n	8000c6e <__aeabi_fmul+0x166>
 8000b7a:	4652      	mov	r2, sl
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	431a      	orrs	r2, r3
 8000b80:	4692      	mov	sl, r2
 8000b82:	2002      	movs	r0, #2
 8000b84:	e7eb      	b.n	8000b5e <__aeabi_fmul+0x56>
 8000b86:	4647      	mov	r7, r8
 8000b88:	464c      	mov	r4, r9
 8000b8a:	4683      	mov	fp, r0
 8000b8c:	465b      	mov	r3, fp
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d028      	beq.n	8000be4 <__aeabi_fmul+0xdc>
 8000b92:	2b03      	cmp	r3, #3
 8000b94:	d100      	bne.n	8000b98 <__aeabi_fmul+0x90>
 8000b96:	e0c6      	b.n	8000d26 <__aeabi_fmul+0x21e>
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d14f      	bne.n	8000c3c <__aeabi_fmul+0x134>
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	2400      	movs	r4, #0
 8000ba0:	05c0      	lsls	r0, r0, #23
 8000ba2:	07ff      	lsls	r7, r7, #31
 8000ba4:	4320      	orrs	r0, r4
 8000ba6:	4338      	orrs	r0, r7
 8000ba8:	bcf0      	pop	{r4, r5, r6, r7}
 8000baa:	46bb      	mov	fp, r7
 8000bac:	46b2      	mov	sl, r6
 8000bae:	46a9      	mov	r9, r5
 8000bb0:	46a0      	mov	r8, r4
 8000bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bb4:	2c00      	cmp	r4, #0
 8000bb6:	d171      	bne.n	8000c9c <__aeabi_fmul+0x194>
 8000bb8:	2304      	movs	r3, #4
 8000bba:	469a      	mov	sl, r3
 8000bbc:	3b03      	subs	r3, #3
 8000bbe:	2500      	movs	r5, #0
 8000bc0:	469b      	mov	fp, r3
 8000bc2:	e7b9      	b.n	8000b38 <__aeabi_fmul+0x30>
 8000bc4:	2c00      	cmp	r4, #0
 8000bc6:	d163      	bne.n	8000c90 <__aeabi_fmul+0x188>
 8000bc8:	2308      	movs	r3, #8
 8000bca:	469a      	mov	sl, r3
 8000bcc:	3b06      	subs	r3, #6
 8000bce:	25ff      	movs	r5, #255	; 0xff
 8000bd0:	469b      	mov	fp, r3
 8000bd2:	e7b1      	b.n	8000b38 <__aeabi_fmul+0x30>
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d150      	bne.n	8000c7a <__aeabi_fmul+0x172>
 8000bd8:	4652      	mov	r2, sl
 8000bda:	3301      	adds	r3, #1
 8000bdc:	431a      	orrs	r2, r3
 8000bde:	4692      	mov	sl, r2
 8000be0:	2001      	movs	r0, #1
 8000be2:	e7bc      	b.n	8000b5e <__aeabi_fmul+0x56>
 8000be4:	20ff      	movs	r0, #255	; 0xff
 8000be6:	2400      	movs	r4, #0
 8000be8:	e7da      	b.n	8000ba0 <__aeabi_fmul+0x98>
 8000bea:	4648      	mov	r0, r9
 8000bec:	0c26      	lsrs	r6, r4, #16
 8000bee:	0424      	lsls	r4, r4, #16
 8000bf0:	0c22      	lsrs	r2, r4, #16
 8000bf2:	0404      	lsls	r4, r0, #16
 8000bf4:	0c24      	lsrs	r4, r4, #16
 8000bf6:	464b      	mov	r3, r9
 8000bf8:	0020      	movs	r0, r4
 8000bfa:	0c1b      	lsrs	r3, r3, #16
 8000bfc:	4350      	muls	r0, r2
 8000bfe:	4374      	muls	r4, r6
 8000c00:	435a      	muls	r2, r3
 8000c02:	435e      	muls	r6, r3
 8000c04:	1912      	adds	r2, r2, r4
 8000c06:	0c03      	lsrs	r3, r0, #16
 8000c08:	189b      	adds	r3, r3, r2
 8000c0a:	429c      	cmp	r4, r3
 8000c0c:	d903      	bls.n	8000c16 <__aeabi_fmul+0x10e>
 8000c0e:	2280      	movs	r2, #128	; 0x80
 8000c10:	0252      	lsls	r2, r2, #9
 8000c12:	4694      	mov	ip, r2
 8000c14:	4466      	add	r6, ip
 8000c16:	0400      	lsls	r0, r0, #16
 8000c18:	041a      	lsls	r2, r3, #16
 8000c1a:	0c00      	lsrs	r0, r0, #16
 8000c1c:	1812      	adds	r2, r2, r0
 8000c1e:	0194      	lsls	r4, r2, #6
 8000c20:	1e60      	subs	r0, r4, #1
 8000c22:	4184      	sbcs	r4, r0
 8000c24:	0c1b      	lsrs	r3, r3, #16
 8000c26:	0e92      	lsrs	r2, r2, #26
 8000c28:	199b      	adds	r3, r3, r6
 8000c2a:	4314      	orrs	r4, r2
 8000c2c:	019b      	lsls	r3, r3, #6
 8000c2e:	431c      	orrs	r4, r3
 8000c30:	011b      	lsls	r3, r3, #4
 8000c32:	d572      	bpl.n	8000d1a <__aeabi_fmul+0x212>
 8000c34:	2001      	movs	r0, #1
 8000c36:	0863      	lsrs	r3, r4, #1
 8000c38:	4004      	ands	r4, r0
 8000c3a:	431c      	orrs	r4, r3
 8000c3c:	0008      	movs	r0, r1
 8000c3e:	307f      	adds	r0, #127	; 0x7f
 8000c40:	2800      	cmp	r0, #0
 8000c42:	dd3c      	ble.n	8000cbe <__aeabi_fmul+0x1b6>
 8000c44:	0763      	lsls	r3, r4, #29
 8000c46:	d004      	beq.n	8000c52 <__aeabi_fmul+0x14a>
 8000c48:	230f      	movs	r3, #15
 8000c4a:	4023      	ands	r3, r4
 8000c4c:	2b04      	cmp	r3, #4
 8000c4e:	d000      	beq.n	8000c52 <__aeabi_fmul+0x14a>
 8000c50:	3404      	adds	r4, #4
 8000c52:	0123      	lsls	r3, r4, #4
 8000c54:	d503      	bpl.n	8000c5e <__aeabi_fmul+0x156>
 8000c56:	3180      	adds	r1, #128	; 0x80
 8000c58:	0008      	movs	r0, r1
 8000c5a:	4b37      	ldr	r3, [pc, #220]	; (8000d38 <__aeabi_fmul+0x230>)
 8000c5c:	401c      	ands	r4, r3
 8000c5e:	28fe      	cmp	r0, #254	; 0xfe
 8000c60:	dcc0      	bgt.n	8000be4 <__aeabi_fmul+0xdc>
 8000c62:	01a4      	lsls	r4, r4, #6
 8000c64:	0a64      	lsrs	r4, r4, #9
 8000c66:	b2c0      	uxtb	r0, r0
 8000c68:	e79a      	b.n	8000ba0 <__aeabi_fmul+0x98>
 8000c6a:	0037      	movs	r7, r6
 8000c6c:	e78e      	b.n	8000b8c <__aeabi_fmul+0x84>
 8000c6e:	4652      	mov	r2, sl
 8000c70:	2303      	movs	r3, #3
 8000c72:	431a      	orrs	r2, r3
 8000c74:	4692      	mov	sl, r2
 8000c76:	2003      	movs	r0, #3
 8000c78:	e771      	b.n	8000b5e <__aeabi_fmul+0x56>
 8000c7a:	4648      	mov	r0, r9
 8000c7c:	f002 f9b0 	bl	8002fe0 <__clzsi2>
 8000c80:	464a      	mov	r2, r9
 8000c82:	1f43      	subs	r3, r0, #5
 8000c84:	409a      	lsls	r2, r3
 8000c86:	1a2d      	subs	r5, r5, r0
 8000c88:	4691      	mov	r9, r2
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	3d76      	subs	r5, #118	; 0x76
 8000c8e:	e766      	b.n	8000b5e <__aeabi_fmul+0x56>
 8000c90:	230c      	movs	r3, #12
 8000c92:	469a      	mov	sl, r3
 8000c94:	3b09      	subs	r3, #9
 8000c96:	25ff      	movs	r5, #255	; 0xff
 8000c98:	469b      	mov	fp, r3
 8000c9a:	e74d      	b.n	8000b38 <__aeabi_fmul+0x30>
 8000c9c:	0020      	movs	r0, r4
 8000c9e:	f002 f99f 	bl	8002fe0 <__clzsi2>
 8000ca2:	2576      	movs	r5, #118	; 0x76
 8000ca4:	1f43      	subs	r3, r0, #5
 8000ca6:	409c      	lsls	r4, r3
 8000ca8:	2300      	movs	r3, #0
 8000caa:	426d      	negs	r5, r5
 8000cac:	469a      	mov	sl, r3
 8000cae:	469b      	mov	fp, r3
 8000cb0:	1a2d      	subs	r5, r5, r0
 8000cb2:	e741      	b.n	8000b38 <__aeabi_fmul+0x30>
 8000cb4:	2480      	movs	r4, #128	; 0x80
 8000cb6:	2700      	movs	r7, #0
 8000cb8:	20ff      	movs	r0, #255	; 0xff
 8000cba:	03e4      	lsls	r4, r4, #15
 8000cbc:	e770      	b.n	8000ba0 <__aeabi_fmul+0x98>
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	1a1b      	subs	r3, r3, r0
 8000cc2:	2b1b      	cmp	r3, #27
 8000cc4:	dd00      	ble.n	8000cc8 <__aeabi_fmul+0x1c0>
 8000cc6:	e769      	b.n	8000b9c <__aeabi_fmul+0x94>
 8000cc8:	319e      	adds	r1, #158	; 0x9e
 8000cca:	0020      	movs	r0, r4
 8000ccc:	408c      	lsls	r4, r1
 8000cce:	40d8      	lsrs	r0, r3
 8000cd0:	1e63      	subs	r3, r4, #1
 8000cd2:	419c      	sbcs	r4, r3
 8000cd4:	4304      	orrs	r4, r0
 8000cd6:	0763      	lsls	r3, r4, #29
 8000cd8:	d004      	beq.n	8000ce4 <__aeabi_fmul+0x1dc>
 8000cda:	230f      	movs	r3, #15
 8000cdc:	4023      	ands	r3, r4
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	d000      	beq.n	8000ce4 <__aeabi_fmul+0x1dc>
 8000ce2:	3404      	adds	r4, #4
 8000ce4:	0163      	lsls	r3, r4, #5
 8000ce6:	d51a      	bpl.n	8000d1e <__aeabi_fmul+0x216>
 8000ce8:	2001      	movs	r0, #1
 8000cea:	2400      	movs	r4, #0
 8000cec:	e758      	b.n	8000ba0 <__aeabi_fmul+0x98>
 8000cee:	2080      	movs	r0, #128	; 0x80
 8000cf0:	03c0      	lsls	r0, r0, #15
 8000cf2:	4204      	tst	r4, r0
 8000cf4:	d009      	beq.n	8000d0a <__aeabi_fmul+0x202>
 8000cf6:	464b      	mov	r3, r9
 8000cf8:	4203      	tst	r3, r0
 8000cfa:	d106      	bne.n	8000d0a <__aeabi_fmul+0x202>
 8000cfc:	464c      	mov	r4, r9
 8000cfe:	4304      	orrs	r4, r0
 8000d00:	0264      	lsls	r4, r4, #9
 8000d02:	4647      	mov	r7, r8
 8000d04:	20ff      	movs	r0, #255	; 0xff
 8000d06:	0a64      	lsrs	r4, r4, #9
 8000d08:	e74a      	b.n	8000ba0 <__aeabi_fmul+0x98>
 8000d0a:	2080      	movs	r0, #128	; 0x80
 8000d0c:	03c0      	lsls	r0, r0, #15
 8000d0e:	4304      	orrs	r4, r0
 8000d10:	0264      	lsls	r4, r4, #9
 8000d12:	0037      	movs	r7, r6
 8000d14:	20ff      	movs	r0, #255	; 0xff
 8000d16:	0a64      	lsrs	r4, r4, #9
 8000d18:	e742      	b.n	8000ba0 <__aeabi_fmul+0x98>
 8000d1a:	0029      	movs	r1, r5
 8000d1c:	e78e      	b.n	8000c3c <__aeabi_fmul+0x134>
 8000d1e:	01a4      	lsls	r4, r4, #6
 8000d20:	2000      	movs	r0, #0
 8000d22:	0a64      	lsrs	r4, r4, #9
 8000d24:	e73c      	b.n	8000ba0 <__aeabi_fmul+0x98>
 8000d26:	2080      	movs	r0, #128	; 0x80
 8000d28:	03c0      	lsls	r0, r0, #15
 8000d2a:	4304      	orrs	r4, r0
 8000d2c:	0264      	lsls	r4, r4, #9
 8000d2e:	20ff      	movs	r0, #255	; 0xff
 8000d30:	0a64      	lsrs	r4, r4, #9
 8000d32:	e735      	b.n	8000ba0 <__aeabi_fmul+0x98>
 8000d34:	0800ae18 	.word	0x0800ae18
 8000d38:	f7ffffff 	.word	0xf7ffffff

08000d3c <__aeabi_fsub>:
 8000d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d3e:	4646      	mov	r6, r8
 8000d40:	46d6      	mov	lr, sl
 8000d42:	464f      	mov	r7, r9
 8000d44:	0243      	lsls	r3, r0, #9
 8000d46:	0a5b      	lsrs	r3, r3, #9
 8000d48:	00da      	lsls	r2, r3, #3
 8000d4a:	4694      	mov	ip, r2
 8000d4c:	024a      	lsls	r2, r1, #9
 8000d4e:	b5c0      	push	{r6, r7, lr}
 8000d50:	0044      	lsls	r4, r0, #1
 8000d52:	0a56      	lsrs	r6, r2, #9
 8000d54:	1c05      	adds	r5, r0, #0
 8000d56:	46b0      	mov	r8, r6
 8000d58:	0e24      	lsrs	r4, r4, #24
 8000d5a:	004e      	lsls	r6, r1, #1
 8000d5c:	0992      	lsrs	r2, r2, #6
 8000d5e:	001f      	movs	r7, r3
 8000d60:	0020      	movs	r0, r4
 8000d62:	4692      	mov	sl, r2
 8000d64:	0fed      	lsrs	r5, r5, #31
 8000d66:	0e36      	lsrs	r6, r6, #24
 8000d68:	0fc9      	lsrs	r1, r1, #31
 8000d6a:	2eff      	cmp	r6, #255	; 0xff
 8000d6c:	d100      	bne.n	8000d70 <__aeabi_fsub+0x34>
 8000d6e:	e07f      	b.n	8000e70 <__aeabi_fsub+0x134>
 8000d70:	2201      	movs	r2, #1
 8000d72:	4051      	eors	r1, r2
 8000d74:	428d      	cmp	r5, r1
 8000d76:	d051      	beq.n	8000e1c <__aeabi_fsub+0xe0>
 8000d78:	1ba2      	subs	r2, r4, r6
 8000d7a:	4691      	mov	r9, r2
 8000d7c:	2a00      	cmp	r2, #0
 8000d7e:	dc00      	bgt.n	8000d82 <__aeabi_fsub+0x46>
 8000d80:	e07e      	b.n	8000e80 <__aeabi_fsub+0x144>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d100      	bne.n	8000d88 <__aeabi_fsub+0x4c>
 8000d86:	e099      	b.n	8000ebc <__aeabi_fsub+0x180>
 8000d88:	2cff      	cmp	r4, #255	; 0xff
 8000d8a:	d100      	bne.n	8000d8e <__aeabi_fsub+0x52>
 8000d8c:	e08c      	b.n	8000ea8 <__aeabi_fsub+0x16c>
 8000d8e:	2380      	movs	r3, #128	; 0x80
 8000d90:	4652      	mov	r2, sl
 8000d92:	04db      	lsls	r3, r3, #19
 8000d94:	431a      	orrs	r2, r3
 8000d96:	4692      	mov	sl, r2
 8000d98:	464a      	mov	r2, r9
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	2a1b      	cmp	r2, #27
 8000d9e:	dc08      	bgt.n	8000db2 <__aeabi_fsub+0x76>
 8000da0:	4653      	mov	r3, sl
 8000da2:	2120      	movs	r1, #32
 8000da4:	40d3      	lsrs	r3, r2
 8000da6:	1a89      	subs	r1, r1, r2
 8000da8:	4652      	mov	r2, sl
 8000daa:	408a      	lsls	r2, r1
 8000dac:	1e51      	subs	r1, r2, #1
 8000dae:	418a      	sbcs	r2, r1
 8000db0:	4313      	orrs	r3, r2
 8000db2:	4662      	mov	r2, ip
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	015a      	lsls	r2, r3, #5
 8000db8:	d400      	bmi.n	8000dbc <__aeabi_fsub+0x80>
 8000dba:	e0f3      	b.n	8000fa4 <__aeabi_fsub+0x268>
 8000dbc:	019b      	lsls	r3, r3, #6
 8000dbe:	099e      	lsrs	r6, r3, #6
 8000dc0:	0030      	movs	r0, r6
 8000dc2:	f002 f90d 	bl	8002fe0 <__clzsi2>
 8000dc6:	3805      	subs	r0, #5
 8000dc8:	4086      	lsls	r6, r0
 8000dca:	4284      	cmp	r4, r0
 8000dcc:	dd00      	ble.n	8000dd0 <__aeabi_fsub+0x94>
 8000dce:	e0f7      	b.n	8000fc0 <__aeabi_fsub+0x284>
 8000dd0:	0032      	movs	r2, r6
 8000dd2:	1b04      	subs	r4, r0, r4
 8000dd4:	2020      	movs	r0, #32
 8000dd6:	3401      	adds	r4, #1
 8000dd8:	40e2      	lsrs	r2, r4
 8000dda:	1b04      	subs	r4, r0, r4
 8000ddc:	40a6      	lsls	r6, r4
 8000dde:	0033      	movs	r3, r6
 8000de0:	1e5e      	subs	r6, r3, #1
 8000de2:	41b3      	sbcs	r3, r6
 8000de4:	2400      	movs	r4, #0
 8000de6:	4313      	orrs	r3, r2
 8000de8:	075a      	lsls	r2, r3, #29
 8000dea:	d004      	beq.n	8000df6 <__aeabi_fsub+0xba>
 8000dec:	220f      	movs	r2, #15
 8000dee:	401a      	ands	r2, r3
 8000df0:	2a04      	cmp	r2, #4
 8000df2:	d000      	beq.n	8000df6 <__aeabi_fsub+0xba>
 8000df4:	3304      	adds	r3, #4
 8000df6:	015a      	lsls	r2, r3, #5
 8000df8:	d400      	bmi.n	8000dfc <__aeabi_fsub+0xc0>
 8000dfa:	e0d6      	b.n	8000faa <__aeabi_fsub+0x26e>
 8000dfc:	1c62      	adds	r2, r4, #1
 8000dfe:	2cfe      	cmp	r4, #254	; 0xfe
 8000e00:	d100      	bne.n	8000e04 <__aeabi_fsub+0xc8>
 8000e02:	e0da      	b.n	8000fba <__aeabi_fsub+0x27e>
 8000e04:	019b      	lsls	r3, r3, #6
 8000e06:	0a5f      	lsrs	r7, r3, #9
 8000e08:	b2d0      	uxtb	r0, r2
 8000e0a:	05c0      	lsls	r0, r0, #23
 8000e0c:	4338      	orrs	r0, r7
 8000e0e:	07ed      	lsls	r5, r5, #31
 8000e10:	4328      	orrs	r0, r5
 8000e12:	bce0      	pop	{r5, r6, r7}
 8000e14:	46ba      	mov	sl, r7
 8000e16:	46b1      	mov	r9, r6
 8000e18:	46a8      	mov	r8, r5
 8000e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e1c:	1ba2      	subs	r2, r4, r6
 8000e1e:	4691      	mov	r9, r2
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	dd63      	ble.n	8000eec <__aeabi_fsub+0x1b0>
 8000e24:	2e00      	cmp	r6, #0
 8000e26:	d100      	bne.n	8000e2a <__aeabi_fsub+0xee>
 8000e28:	e099      	b.n	8000f5e <__aeabi_fsub+0x222>
 8000e2a:	2cff      	cmp	r4, #255	; 0xff
 8000e2c:	d03c      	beq.n	8000ea8 <__aeabi_fsub+0x16c>
 8000e2e:	2380      	movs	r3, #128	; 0x80
 8000e30:	4652      	mov	r2, sl
 8000e32:	04db      	lsls	r3, r3, #19
 8000e34:	431a      	orrs	r2, r3
 8000e36:	4692      	mov	sl, r2
 8000e38:	464a      	mov	r2, r9
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	2a1b      	cmp	r2, #27
 8000e3e:	dc08      	bgt.n	8000e52 <__aeabi_fsub+0x116>
 8000e40:	4653      	mov	r3, sl
 8000e42:	2120      	movs	r1, #32
 8000e44:	40d3      	lsrs	r3, r2
 8000e46:	1a89      	subs	r1, r1, r2
 8000e48:	4652      	mov	r2, sl
 8000e4a:	408a      	lsls	r2, r1
 8000e4c:	1e51      	subs	r1, r2, #1
 8000e4e:	418a      	sbcs	r2, r1
 8000e50:	4313      	orrs	r3, r2
 8000e52:	4463      	add	r3, ip
 8000e54:	015a      	lsls	r2, r3, #5
 8000e56:	d400      	bmi.n	8000e5a <__aeabi_fsub+0x11e>
 8000e58:	e0a4      	b.n	8000fa4 <__aeabi_fsub+0x268>
 8000e5a:	3401      	adds	r4, #1
 8000e5c:	2cff      	cmp	r4, #255	; 0xff
 8000e5e:	d100      	bne.n	8000e62 <__aeabi_fsub+0x126>
 8000e60:	e0ab      	b.n	8000fba <__aeabi_fsub+0x27e>
 8000e62:	2201      	movs	r2, #1
 8000e64:	4997      	ldr	r1, [pc, #604]	; (80010c4 <__aeabi_fsub+0x388>)
 8000e66:	401a      	ands	r2, r3
 8000e68:	085b      	lsrs	r3, r3, #1
 8000e6a:	400b      	ands	r3, r1
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	e7bb      	b.n	8000de8 <__aeabi_fsub+0xac>
 8000e70:	2a00      	cmp	r2, #0
 8000e72:	d032      	beq.n	8000eda <__aeabi_fsub+0x19e>
 8000e74:	428d      	cmp	r5, r1
 8000e76:	d035      	beq.n	8000ee4 <__aeabi_fsub+0x1a8>
 8000e78:	22ff      	movs	r2, #255	; 0xff
 8000e7a:	4252      	negs	r2, r2
 8000e7c:	4691      	mov	r9, r2
 8000e7e:	44a1      	add	r9, r4
 8000e80:	464a      	mov	r2, r9
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d051      	beq.n	8000f2a <__aeabi_fsub+0x1ee>
 8000e86:	1b30      	subs	r0, r6, r4
 8000e88:	2c00      	cmp	r4, #0
 8000e8a:	d000      	beq.n	8000e8e <__aeabi_fsub+0x152>
 8000e8c:	e09c      	b.n	8000fc8 <__aeabi_fsub+0x28c>
 8000e8e:	4663      	mov	r3, ip
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d100      	bne.n	8000e96 <__aeabi_fsub+0x15a>
 8000e94:	e0df      	b.n	8001056 <__aeabi_fsub+0x31a>
 8000e96:	3801      	subs	r0, #1
 8000e98:	2800      	cmp	r0, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_fsub+0x162>
 8000e9c:	e0f7      	b.n	800108e <__aeabi_fsub+0x352>
 8000e9e:	2eff      	cmp	r6, #255	; 0xff
 8000ea0:	d000      	beq.n	8000ea4 <__aeabi_fsub+0x168>
 8000ea2:	e099      	b.n	8000fd8 <__aeabi_fsub+0x29c>
 8000ea4:	000d      	movs	r5, r1
 8000ea6:	4643      	mov	r3, r8
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d100      	bne.n	8000eae <__aeabi_fsub+0x172>
 8000eac:	e085      	b.n	8000fba <__aeabi_fsub+0x27e>
 8000eae:	2780      	movs	r7, #128	; 0x80
 8000eb0:	03ff      	lsls	r7, r7, #15
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	027f      	lsls	r7, r7, #9
 8000eb6:	20ff      	movs	r0, #255	; 0xff
 8000eb8:	0a7f      	lsrs	r7, r7, #9
 8000eba:	e7a6      	b.n	8000e0a <__aeabi_fsub+0xce>
 8000ebc:	4652      	mov	r2, sl
 8000ebe:	2a00      	cmp	r2, #0
 8000ec0:	d074      	beq.n	8000fac <__aeabi_fsub+0x270>
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	4252      	negs	r2, r2
 8000ec6:	4690      	mov	r8, r2
 8000ec8:	44c1      	add	r9, r8
 8000eca:	464a      	mov	r2, r9
 8000ecc:	2a00      	cmp	r2, #0
 8000ece:	d100      	bne.n	8000ed2 <__aeabi_fsub+0x196>
 8000ed0:	e0c8      	b.n	8001064 <__aeabi_fsub+0x328>
 8000ed2:	2cff      	cmp	r4, #255	; 0xff
 8000ed4:	d000      	beq.n	8000ed8 <__aeabi_fsub+0x19c>
 8000ed6:	e75f      	b.n	8000d98 <__aeabi_fsub+0x5c>
 8000ed8:	e7e6      	b.n	8000ea8 <__aeabi_fsub+0x16c>
 8000eda:	2201      	movs	r2, #1
 8000edc:	4051      	eors	r1, r2
 8000ede:	42a9      	cmp	r1, r5
 8000ee0:	d000      	beq.n	8000ee4 <__aeabi_fsub+0x1a8>
 8000ee2:	e749      	b.n	8000d78 <__aeabi_fsub+0x3c>
 8000ee4:	22ff      	movs	r2, #255	; 0xff
 8000ee6:	4252      	negs	r2, r2
 8000ee8:	4691      	mov	r9, r2
 8000eea:	44a1      	add	r9, r4
 8000eec:	464a      	mov	r2, r9
 8000eee:	2a00      	cmp	r2, #0
 8000ef0:	d043      	beq.n	8000f7a <__aeabi_fsub+0x23e>
 8000ef2:	1b31      	subs	r1, r6, r4
 8000ef4:	2c00      	cmp	r4, #0
 8000ef6:	d100      	bne.n	8000efa <__aeabi_fsub+0x1be>
 8000ef8:	e08c      	b.n	8001014 <__aeabi_fsub+0x2d8>
 8000efa:	2eff      	cmp	r6, #255	; 0xff
 8000efc:	d100      	bne.n	8000f00 <__aeabi_fsub+0x1c4>
 8000efe:	e092      	b.n	8001026 <__aeabi_fsub+0x2ea>
 8000f00:	2380      	movs	r3, #128	; 0x80
 8000f02:	4662      	mov	r2, ip
 8000f04:	04db      	lsls	r3, r3, #19
 8000f06:	431a      	orrs	r2, r3
 8000f08:	4694      	mov	ip, r2
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	291b      	cmp	r1, #27
 8000f0e:	dc09      	bgt.n	8000f24 <__aeabi_fsub+0x1e8>
 8000f10:	2020      	movs	r0, #32
 8000f12:	4663      	mov	r3, ip
 8000f14:	4662      	mov	r2, ip
 8000f16:	40cb      	lsrs	r3, r1
 8000f18:	1a41      	subs	r1, r0, r1
 8000f1a:	408a      	lsls	r2, r1
 8000f1c:	0011      	movs	r1, r2
 8000f1e:	1e48      	subs	r0, r1, #1
 8000f20:	4181      	sbcs	r1, r0
 8000f22:	430b      	orrs	r3, r1
 8000f24:	0034      	movs	r4, r6
 8000f26:	4453      	add	r3, sl
 8000f28:	e794      	b.n	8000e54 <__aeabi_fsub+0x118>
 8000f2a:	22fe      	movs	r2, #254	; 0xfe
 8000f2c:	1c66      	adds	r6, r4, #1
 8000f2e:	4232      	tst	r2, r6
 8000f30:	d164      	bne.n	8000ffc <__aeabi_fsub+0x2c0>
 8000f32:	2c00      	cmp	r4, #0
 8000f34:	d000      	beq.n	8000f38 <__aeabi_fsub+0x1fc>
 8000f36:	e082      	b.n	800103e <__aeabi_fsub+0x302>
 8000f38:	4663      	mov	r3, ip
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d100      	bne.n	8000f40 <__aeabi_fsub+0x204>
 8000f3e:	e0ab      	b.n	8001098 <__aeabi_fsub+0x35c>
 8000f40:	4653      	mov	r3, sl
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d100      	bne.n	8000f48 <__aeabi_fsub+0x20c>
 8000f46:	e760      	b.n	8000e0a <__aeabi_fsub+0xce>
 8000f48:	4663      	mov	r3, ip
 8000f4a:	4652      	mov	r2, sl
 8000f4c:	1a9b      	subs	r3, r3, r2
 8000f4e:	015a      	lsls	r2, r3, #5
 8000f50:	d400      	bmi.n	8000f54 <__aeabi_fsub+0x218>
 8000f52:	e0aa      	b.n	80010aa <__aeabi_fsub+0x36e>
 8000f54:	4663      	mov	r3, ip
 8000f56:	4652      	mov	r2, sl
 8000f58:	000d      	movs	r5, r1
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	e744      	b.n	8000de8 <__aeabi_fsub+0xac>
 8000f5e:	4652      	mov	r2, sl
 8000f60:	2a00      	cmp	r2, #0
 8000f62:	d023      	beq.n	8000fac <__aeabi_fsub+0x270>
 8000f64:	2201      	movs	r2, #1
 8000f66:	4252      	negs	r2, r2
 8000f68:	4690      	mov	r8, r2
 8000f6a:	44c1      	add	r9, r8
 8000f6c:	464a      	mov	r2, r9
 8000f6e:	2a00      	cmp	r2, #0
 8000f70:	d075      	beq.n	800105e <__aeabi_fsub+0x322>
 8000f72:	2cff      	cmp	r4, #255	; 0xff
 8000f74:	d000      	beq.n	8000f78 <__aeabi_fsub+0x23c>
 8000f76:	e75f      	b.n	8000e38 <__aeabi_fsub+0xfc>
 8000f78:	e796      	b.n	8000ea8 <__aeabi_fsub+0x16c>
 8000f7a:	26fe      	movs	r6, #254	; 0xfe
 8000f7c:	3401      	adds	r4, #1
 8000f7e:	4226      	tst	r6, r4
 8000f80:	d153      	bne.n	800102a <__aeabi_fsub+0x2ee>
 8000f82:	2800      	cmp	r0, #0
 8000f84:	d172      	bne.n	800106c <__aeabi_fsub+0x330>
 8000f86:	4663      	mov	r3, ip
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d100      	bne.n	8000f8e <__aeabi_fsub+0x252>
 8000f8c:	e093      	b.n	80010b6 <__aeabi_fsub+0x37a>
 8000f8e:	4653      	mov	r3, sl
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d100      	bne.n	8000f96 <__aeabi_fsub+0x25a>
 8000f94:	e739      	b.n	8000e0a <__aeabi_fsub+0xce>
 8000f96:	4463      	add	r3, ip
 8000f98:	2400      	movs	r4, #0
 8000f9a:	015a      	lsls	r2, r3, #5
 8000f9c:	d502      	bpl.n	8000fa4 <__aeabi_fsub+0x268>
 8000f9e:	4a4a      	ldr	r2, [pc, #296]	; (80010c8 <__aeabi_fsub+0x38c>)
 8000fa0:	3401      	adds	r4, #1
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	075a      	lsls	r2, r3, #29
 8000fa6:	d000      	beq.n	8000faa <__aeabi_fsub+0x26e>
 8000fa8:	e720      	b.n	8000dec <__aeabi_fsub+0xb0>
 8000faa:	08db      	lsrs	r3, r3, #3
 8000fac:	2cff      	cmp	r4, #255	; 0xff
 8000fae:	d100      	bne.n	8000fb2 <__aeabi_fsub+0x276>
 8000fb0:	e77a      	b.n	8000ea8 <__aeabi_fsub+0x16c>
 8000fb2:	025b      	lsls	r3, r3, #9
 8000fb4:	0a5f      	lsrs	r7, r3, #9
 8000fb6:	b2e0      	uxtb	r0, r4
 8000fb8:	e727      	b.n	8000e0a <__aeabi_fsub+0xce>
 8000fba:	20ff      	movs	r0, #255	; 0xff
 8000fbc:	2700      	movs	r7, #0
 8000fbe:	e724      	b.n	8000e0a <__aeabi_fsub+0xce>
 8000fc0:	4b41      	ldr	r3, [pc, #260]	; (80010c8 <__aeabi_fsub+0x38c>)
 8000fc2:	1a24      	subs	r4, r4, r0
 8000fc4:	4033      	ands	r3, r6
 8000fc6:	e70f      	b.n	8000de8 <__aeabi_fsub+0xac>
 8000fc8:	2eff      	cmp	r6, #255	; 0xff
 8000fca:	d100      	bne.n	8000fce <__aeabi_fsub+0x292>
 8000fcc:	e76a      	b.n	8000ea4 <__aeabi_fsub+0x168>
 8000fce:	2380      	movs	r3, #128	; 0x80
 8000fd0:	4662      	mov	r2, ip
 8000fd2:	04db      	lsls	r3, r3, #19
 8000fd4:	431a      	orrs	r2, r3
 8000fd6:	4694      	mov	ip, r2
 8000fd8:	2301      	movs	r3, #1
 8000fda:	281b      	cmp	r0, #27
 8000fdc:	dc09      	bgt.n	8000ff2 <__aeabi_fsub+0x2b6>
 8000fde:	2420      	movs	r4, #32
 8000fe0:	4663      	mov	r3, ip
 8000fe2:	4662      	mov	r2, ip
 8000fe4:	40c3      	lsrs	r3, r0
 8000fe6:	1a20      	subs	r0, r4, r0
 8000fe8:	4082      	lsls	r2, r0
 8000fea:	0010      	movs	r0, r2
 8000fec:	1e44      	subs	r4, r0, #1
 8000fee:	41a0      	sbcs	r0, r4
 8000ff0:	4303      	orrs	r3, r0
 8000ff2:	4652      	mov	r2, sl
 8000ff4:	000d      	movs	r5, r1
 8000ff6:	0034      	movs	r4, r6
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	e6dc      	b.n	8000db6 <__aeabi_fsub+0x7a>
 8000ffc:	4663      	mov	r3, ip
 8000ffe:	4652      	mov	r2, sl
 8001000:	1a9e      	subs	r6, r3, r2
 8001002:	0173      	lsls	r3, r6, #5
 8001004:	d417      	bmi.n	8001036 <__aeabi_fsub+0x2fa>
 8001006:	2e00      	cmp	r6, #0
 8001008:	d000      	beq.n	800100c <__aeabi_fsub+0x2d0>
 800100a:	e6d9      	b.n	8000dc0 <__aeabi_fsub+0x84>
 800100c:	2500      	movs	r5, #0
 800100e:	2000      	movs	r0, #0
 8001010:	2700      	movs	r7, #0
 8001012:	e6fa      	b.n	8000e0a <__aeabi_fsub+0xce>
 8001014:	4663      	mov	r3, ip
 8001016:	2b00      	cmp	r3, #0
 8001018:	d044      	beq.n	80010a4 <__aeabi_fsub+0x368>
 800101a:	3901      	subs	r1, #1
 800101c:	2900      	cmp	r1, #0
 800101e:	d04c      	beq.n	80010ba <__aeabi_fsub+0x37e>
 8001020:	2eff      	cmp	r6, #255	; 0xff
 8001022:	d000      	beq.n	8001026 <__aeabi_fsub+0x2ea>
 8001024:	e771      	b.n	8000f0a <__aeabi_fsub+0x1ce>
 8001026:	4643      	mov	r3, r8
 8001028:	e73e      	b.n	8000ea8 <__aeabi_fsub+0x16c>
 800102a:	2cff      	cmp	r4, #255	; 0xff
 800102c:	d0c5      	beq.n	8000fba <__aeabi_fsub+0x27e>
 800102e:	4652      	mov	r2, sl
 8001030:	4462      	add	r2, ip
 8001032:	0853      	lsrs	r3, r2, #1
 8001034:	e7b6      	b.n	8000fa4 <__aeabi_fsub+0x268>
 8001036:	4663      	mov	r3, ip
 8001038:	000d      	movs	r5, r1
 800103a:	1ad6      	subs	r6, r2, r3
 800103c:	e6c0      	b.n	8000dc0 <__aeabi_fsub+0x84>
 800103e:	4662      	mov	r2, ip
 8001040:	2a00      	cmp	r2, #0
 8001042:	d116      	bne.n	8001072 <__aeabi_fsub+0x336>
 8001044:	4653      	mov	r3, sl
 8001046:	2b00      	cmp	r3, #0
 8001048:	d000      	beq.n	800104c <__aeabi_fsub+0x310>
 800104a:	e72b      	b.n	8000ea4 <__aeabi_fsub+0x168>
 800104c:	2780      	movs	r7, #128	; 0x80
 800104e:	2500      	movs	r5, #0
 8001050:	20ff      	movs	r0, #255	; 0xff
 8001052:	03ff      	lsls	r7, r7, #15
 8001054:	e6d9      	b.n	8000e0a <__aeabi_fsub+0xce>
 8001056:	000d      	movs	r5, r1
 8001058:	4643      	mov	r3, r8
 800105a:	0034      	movs	r4, r6
 800105c:	e7a6      	b.n	8000fac <__aeabi_fsub+0x270>
 800105e:	4653      	mov	r3, sl
 8001060:	4463      	add	r3, ip
 8001062:	e6f7      	b.n	8000e54 <__aeabi_fsub+0x118>
 8001064:	4663      	mov	r3, ip
 8001066:	4652      	mov	r2, sl
 8001068:	1a9b      	subs	r3, r3, r2
 800106a:	e6a4      	b.n	8000db6 <__aeabi_fsub+0x7a>
 800106c:	4662      	mov	r2, ip
 800106e:	2a00      	cmp	r2, #0
 8001070:	d0d9      	beq.n	8001026 <__aeabi_fsub+0x2ea>
 8001072:	4652      	mov	r2, sl
 8001074:	2a00      	cmp	r2, #0
 8001076:	d100      	bne.n	800107a <__aeabi_fsub+0x33e>
 8001078:	e716      	b.n	8000ea8 <__aeabi_fsub+0x16c>
 800107a:	2280      	movs	r2, #128	; 0x80
 800107c:	03d2      	lsls	r2, r2, #15
 800107e:	4213      	tst	r3, r2
 8001080:	d100      	bne.n	8001084 <__aeabi_fsub+0x348>
 8001082:	e711      	b.n	8000ea8 <__aeabi_fsub+0x16c>
 8001084:	4640      	mov	r0, r8
 8001086:	4210      	tst	r0, r2
 8001088:	d000      	beq.n	800108c <__aeabi_fsub+0x350>
 800108a:	e70d      	b.n	8000ea8 <__aeabi_fsub+0x16c>
 800108c:	e70a      	b.n	8000ea4 <__aeabi_fsub+0x168>
 800108e:	4652      	mov	r2, sl
 8001090:	000d      	movs	r5, r1
 8001092:	0034      	movs	r4, r6
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	e68e      	b.n	8000db6 <__aeabi_fsub+0x7a>
 8001098:	4653      	mov	r3, sl
 800109a:	2b00      	cmp	r3, #0
 800109c:	d008      	beq.n	80010b0 <__aeabi_fsub+0x374>
 800109e:	000d      	movs	r5, r1
 80010a0:	4647      	mov	r7, r8
 80010a2:	e6b2      	b.n	8000e0a <__aeabi_fsub+0xce>
 80010a4:	4643      	mov	r3, r8
 80010a6:	0034      	movs	r4, r6
 80010a8:	e780      	b.n	8000fac <__aeabi_fsub+0x270>
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d000      	beq.n	80010b0 <__aeabi_fsub+0x374>
 80010ae:	e779      	b.n	8000fa4 <__aeabi_fsub+0x268>
 80010b0:	2500      	movs	r5, #0
 80010b2:	2700      	movs	r7, #0
 80010b4:	e6a9      	b.n	8000e0a <__aeabi_fsub+0xce>
 80010b6:	4647      	mov	r7, r8
 80010b8:	e6a7      	b.n	8000e0a <__aeabi_fsub+0xce>
 80010ba:	4653      	mov	r3, sl
 80010bc:	0034      	movs	r4, r6
 80010be:	4463      	add	r3, ip
 80010c0:	e6c8      	b.n	8000e54 <__aeabi_fsub+0x118>
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	7dffffff 	.word	0x7dffffff
 80010c8:	fbffffff 	.word	0xfbffffff

080010cc <__aeabi_f2iz>:
 80010cc:	0241      	lsls	r1, r0, #9
 80010ce:	0042      	lsls	r2, r0, #1
 80010d0:	0fc3      	lsrs	r3, r0, #31
 80010d2:	0a49      	lsrs	r1, r1, #9
 80010d4:	2000      	movs	r0, #0
 80010d6:	0e12      	lsrs	r2, r2, #24
 80010d8:	2a7e      	cmp	r2, #126	; 0x7e
 80010da:	d903      	bls.n	80010e4 <__aeabi_f2iz+0x18>
 80010dc:	2a9d      	cmp	r2, #157	; 0x9d
 80010de:	d902      	bls.n	80010e6 <__aeabi_f2iz+0x1a>
 80010e0:	4a09      	ldr	r2, [pc, #36]	; (8001108 <__aeabi_f2iz+0x3c>)
 80010e2:	1898      	adds	r0, r3, r2
 80010e4:	4770      	bx	lr
 80010e6:	2080      	movs	r0, #128	; 0x80
 80010e8:	0400      	lsls	r0, r0, #16
 80010ea:	4301      	orrs	r1, r0
 80010ec:	2a95      	cmp	r2, #149	; 0x95
 80010ee:	dc07      	bgt.n	8001100 <__aeabi_f2iz+0x34>
 80010f0:	2096      	movs	r0, #150	; 0x96
 80010f2:	1a82      	subs	r2, r0, r2
 80010f4:	40d1      	lsrs	r1, r2
 80010f6:	4248      	negs	r0, r1
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1f3      	bne.n	80010e4 <__aeabi_f2iz+0x18>
 80010fc:	0008      	movs	r0, r1
 80010fe:	e7f1      	b.n	80010e4 <__aeabi_f2iz+0x18>
 8001100:	3a96      	subs	r2, #150	; 0x96
 8001102:	4091      	lsls	r1, r2
 8001104:	e7f7      	b.n	80010f6 <__aeabi_f2iz+0x2a>
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	7fffffff 	.word	0x7fffffff

0800110c <__aeabi_i2f>:
 800110c:	b570      	push	{r4, r5, r6, lr}
 800110e:	2800      	cmp	r0, #0
 8001110:	d013      	beq.n	800113a <__aeabi_i2f+0x2e>
 8001112:	17c3      	asrs	r3, r0, #31
 8001114:	18c5      	adds	r5, r0, r3
 8001116:	405d      	eors	r5, r3
 8001118:	0fc4      	lsrs	r4, r0, #31
 800111a:	0028      	movs	r0, r5
 800111c:	f001 ff60 	bl	8002fe0 <__clzsi2>
 8001120:	239e      	movs	r3, #158	; 0x9e
 8001122:	0001      	movs	r1, r0
 8001124:	1a1b      	subs	r3, r3, r0
 8001126:	2b96      	cmp	r3, #150	; 0x96
 8001128:	dc0f      	bgt.n	800114a <__aeabi_i2f+0x3e>
 800112a:	2808      	cmp	r0, #8
 800112c:	dd01      	ble.n	8001132 <__aeabi_i2f+0x26>
 800112e:	3908      	subs	r1, #8
 8001130:	408d      	lsls	r5, r1
 8001132:	026d      	lsls	r5, r5, #9
 8001134:	0a6d      	lsrs	r5, r5, #9
 8001136:	b2d8      	uxtb	r0, r3
 8001138:	e002      	b.n	8001140 <__aeabi_i2f+0x34>
 800113a:	2400      	movs	r4, #0
 800113c:	2000      	movs	r0, #0
 800113e:	2500      	movs	r5, #0
 8001140:	05c0      	lsls	r0, r0, #23
 8001142:	4328      	orrs	r0, r5
 8001144:	07e4      	lsls	r4, r4, #31
 8001146:	4320      	orrs	r0, r4
 8001148:	bd70      	pop	{r4, r5, r6, pc}
 800114a:	2b99      	cmp	r3, #153	; 0x99
 800114c:	dd0b      	ble.n	8001166 <__aeabi_i2f+0x5a>
 800114e:	2205      	movs	r2, #5
 8001150:	002e      	movs	r6, r5
 8001152:	1a12      	subs	r2, r2, r0
 8001154:	40d6      	lsrs	r6, r2
 8001156:	0002      	movs	r2, r0
 8001158:	321b      	adds	r2, #27
 800115a:	4095      	lsls	r5, r2
 800115c:	0028      	movs	r0, r5
 800115e:	1e45      	subs	r5, r0, #1
 8001160:	41a8      	sbcs	r0, r5
 8001162:	0035      	movs	r5, r6
 8001164:	4305      	orrs	r5, r0
 8001166:	2905      	cmp	r1, #5
 8001168:	dd01      	ble.n	800116e <__aeabi_i2f+0x62>
 800116a:	1f4a      	subs	r2, r1, #5
 800116c:	4095      	lsls	r5, r2
 800116e:	002a      	movs	r2, r5
 8001170:	4e08      	ldr	r6, [pc, #32]	; (8001194 <__aeabi_i2f+0x88>)
 8001172:	4032      	ands	r2, r6
 8001174:	0768      	lsls	r0, r5, #29
 8001176:	d009      	beq.n	800118c <__aeabi_i2f+0x80>
 8001178:	200f      	movs	r0, #15
 800117a:	4028      	ands	r0, r5
 800117c:	2804      	cmp	r0, #4
 800117e:	d005      	beq.n	800118c <__aeabi_i2f+0x80>
 8001180:	3204      	adds	r2, #4
 8001182:	0150      	lsls	r0, r2, #5
 8001184:	d502      	bpl.n	800118c <__aeabi_i2f+0x80>
 8001186:	239f      	movs	r3, #159	; 0x9f
 8001188:	4032      	ands	r2, r6
 800118a:	1a5b      	subs	r3, r3, r1
 800118c:	0192      	lsls	r2, r2, #6
 800118e:	0a55      	lsrs	r5, r2, #9
 8001190:	b2d8      	uxtb	r0, r3
 8001192:	e7d5      	b.n	8001140 <__aeabi_i2f+0x34>
 8001194:	fbffffff 	.word	0xfbffffff

08001198 <__aeabi_ui2f>:
 8001198:	b570      	push	{r4, r5, r6, lr}
 800119a:	1e05      	subs	r5, r0, #0
 800119c:	d00e      	beq.n	80011bc <__aeabi_ui2f+0x24>
 800119e:	f001 ff1f 	bl	8002fe0 <__clzsi2>
 80011a2:	239e      	movs	r3, #158	; 0x9e
 80011a4:	0004      	movs	r4, r0
 80011a6:	1a1b      	subs	r3, r3, r0
 80011a8:	2b96      	cmp	r3, #150	; 0x96
 80011aa:	dc0c      	bgt.n	80011c6 <__aeabi_ui2f+0x2e>
 80011ac:	2808      	cmp	r0, #8
 80011ae:	dd01      	ble.n	80011b4 <__aeabi_ui2f+0x1c>
 80011b0:	3c08      	subs	r4, #8
 80011b2:	40a5      	lsls	r5, r4
 80011b4:	026d      	lsls	r5, r5, #9
 80011b6:	0a6d      	lsrs	r5, r5, #9
 80011b8:	b2d8      	uxtb	r0, r3
 80011ba:	e001      	b.n	80011c0 <__aeabi_ui2f+0x28>
 80011bc:	2000      	movs	r0, #0
 80011be:	2500      	movs	r5, #0
 80011c0:	05c0      	lsls	r0, r0, #23
 80011c2:	4328      	orrs	r0, r5
 80011c4:	bd70      	pop	{r4, r5, r6, pc}
 80011c6:	2b99      	cmp	r3, #153	; 0x99
 80011c8:	dd09      	ble.n	80011de <__aeabi_ui2f+0x46>
 80011ca:	0002      	movs	r2, r0
 80011cc:	0029      	movs	r1, r5
 80011ce:	321b      	adds	r2, #27
 80011d0:	4091      	lsls	r1, r2
 80011d2:	1e4a      	subs	r2, r1, #1
 80011d4:	4191      	sbcs	r1, r2
 80011d6:	2205      	movs	r2, #5
 80011d8:	1a12      	subs	r2, r2, r0
 80011da:	40d5      	lsrs	r5, r2
 80011dc:	430d      	orrs	r5, r1
 80011de:	2c05      	cmp	r4, #5
 80011e0:	dd01      	ble.n	80011e6 <__aeabi_ui2f+0x4e>
 80011e2:	1f62      	subs	r2, r4, #5
 80011e4:	4095      	lsls	r5, r2
 80011e6:	0029      	movs	r1, r5
 80011e8:	4e08      	ldr	r6, [pc, #32]	; (800120c <__aeabi_ui2f+0x74>)
 80011ea:	4031      	ands	r1, r6
 80011ec:	076a      	lsls	r2, r5, #29
 80011ee:	d009      	beq.n	8001204 <__aeabi_ui2f+0x6c>
 80011f0:	200f      	movs	r0, #15
 80011f2:	4028      	ands	r0, r5
 80011f4:	2804      	cmp	r0, #4
 80011f6:	d005      	beq.n	8001204 <__aeabi_ui2f+0x6c>
 80011f8:	3104      	adds	r1, #4
 80011fa:	014a      	lsls	r2, r1, #5
 80011fc:	d502      	bpl.n	8001204 <__aeabi_ui2f+0x6c>
 80011fe:	239f      	movs	r3, #159	; 0x9f
 8001200:	4031      	ands	r1, r6
 8001202:	1b1b      	subs	r3, r3, r4
 8001204:	0189      	lsls	r1, r1, #6
 8001206:	0a4d      	lsrs	r5, r1, #9
 8001208:	b2d8      	uxtb	r0, r3
 800120a:	e7d9      	b.n	80011c0 <__aeabi_ui2f+0x28>
 800120c:	fbffffff 	.word	0xfbffffff

08001210 <__aeabi_dadd>:
 8001210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001212:	464f      	mov	r7, r9
 8001214:	46d6      	mov	lr, sl
 8001216:	4646      	mov	r6, r8
 8001218:	000d      	movs	r5, r1
 800121a:	0001      	movs	r1, r0
 800121c:	0018      	movs	r0, r3
 800121e:	b5c0      	push	{r6, r7, lr}
 8001220:	0017      	movs	r7, r2
 8001222:	032b      	lsls	r3, r5, #12
 8001224:	0a5a      	lsrs	r2, r3, #9
 8001226:	0f4b      	lsrs	r3, r1, #29
 8001228:	4313      	orrs	r3, r2
 800122a:	00ca      	lsls	r2, r1, #3
 800122c:	4691      	mov	r9, r2
 800122e:	0302      	lsls	r2, r0, #12
 8001230:	006e      	lsls	r6, r5, #1
 8001232:	0041      	lsls	r1, r0, #1
 8001234:	0a52      	lsrs	r2, r2, #9
 8001236:	0fec      	lsrs	r4, r5, #31
 8001238:	0f7d      	lsrs	r5, r7, #29
 800123a:	4315      	orrs	r5, r2
 800123c:	0d76      	lsrs	r6, r6, #21
 800123e:	0d49      	lsrs	r1, r1, #21
 8001240:	0fc0      	lsrs	r0, r0, #31
 8001242:	4682      	mov	sl, r0
 8001244:	46ac      	mov	ip, r5
 8001246:	00ff      	lsls	r7, r7, #3
 8001248:	1a72      	subs	r2, r6, r1
 800124a:	4284      	cmp	r4, r0
 800124c:	d100      	bne.n	8001250 <__aeabi_dadd+0x40>
 800124e:	e098      	b.n	8001382 <__aeabi_dadd+0x172>
 8001250:	2a00      	cmp	r2, #0
 8001252:	dc00      	bgt.n	8001256 <__aeabi_dadd+0x46>
 8001254:	e081      	b.n	800135a <__aeabi_dadd+0x14a>
 8001256:	2900      	cmp	r1, #0
 8001258:	d100      	bne.n	800125c <__aeabi_dadd+0x4c>
 800125a:	e0b6      	b.n	80013ca <__aeabi_dadd+0x1ba>
 800125c:	49c9      	ldr	r1, [pc, #804]	; (8001584 <__aeabi_dadd+0x374>)
 800125e:	428e      	cmp	r6, r1
 8001260:	d100      	bne.n	8001264 <__aeabi_dadd+0x54>
 8001262:	e172      	b.n	800154a <__aeabi_dadd+0x33a>
 8001264:	2180      	movs	r1, #128	; 0x80
 8001266:	0028      	movs	r0, r5
 8001268:	0409      	lsls	r1, r1, #16
 800126a:	4308      	orrs	r0, r1
 800126c:	4684      	mov	ip, r0
 800126e:	2a38      	cmp	r2, #56	; 0x38
 8001270:	dd00      	ble.n	8001274 <__aeabi_dadd+0x64>
 8001272:	e15e      	b.n	8001532 <__aeabi_dadd+0x322>
 8001274:	2a1f      	cmp	r2, #31
 8001276:	dd00      	ble.n	800127a <__aeabi_dadd+0x6a>
 8001278:	e1ee      	b.n	8001658 <__aeabi_dadd+0x448>
 800127a:	2020      	movs	r0, #32
 800127c:	0039      	movs	r1, r7
 800127e:	4665      	mov	r5, ip
 8001280:	1a80      	subs	r0, r0, r2
 8001282:	4087      	lsls	r7, r0
 8001284:	40d1      	lsrs	r1, r2
 8001286:	4085      	lsls	r5, r0
 8001288:	430d      	orrs	r5, r1
 800128a:	0039      	movs	r1, r7
 800128c:	1e4f      	subs	r7, r1, #1
 800128e:	41b9      	sbcs	r1, r7
 8001290:	4667      	mov	r7, ip
 8001292:	40d7      	lsrs	r7, r2
 8001294:	4329      	orrs	r1, r5
 8001296:	1bdb      	subs	r3, r3, r7
 8001298:	464a      	mov	r2, r9
 800129a:	1a55      	subs	r5, r2, r1
 800129c:	45a9      	cmp	r9, r5
 800129e:	4189      	sbcs	r1, r1
 80012a0:	4249      	negs	r1, r1
 80012a2:	1a5b      	subs	r3, r3, r1
 80012a4:	4698      	mov	r8, r3
 80012a6:	4643      	mov	r3, r8
 80012a8:	021b      	lsls	r3, r3, #8
 80012aa:	d400      	bmi.n	80012ae <__aeabi_dadd+0x9e>
 80012ac:	e0cc      	b.n	8001448 <__aeabi_dadd+0x238>
 80012ae:	4643      	mov	r3, r8
 80012b0:	025b      	lsls	r3, r3, #9
 80012b2:	0a5b      	lsrs	r3, r3, #9
 80012b4:	4698      	mov	r8, r3
 80012b6:	4643      	mov	r3, r8
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d100      	bne.n	80012be <__aeabi_dadd+0xae>
 80012bc:	e12c      	b.n	8001518 <__aeabi_dadd+0x308>
 80012be:	4640      	mov	r0, r8
 80012c0:	f001 fe8e 	bl	8002fe0 <__clzsi2>
 80012c4:	0001      	movs	r1, r0
 80012c6:	3908      	subs	r1, #8
 80012c8:	2220      	movs	r2, #32
 80012ca:	0028      	movs	r0, r5
 80012cc:	4643      	mov	r3, r8
 80012ce:	1a52      	subs	r2, r2, r1
 80012d0:	408b      	lsls	r3, r1
 80012d2:	40d0      	lsrs	r0, r2
 80012d4:	408d      	lsls	r5, r1
 80012d6:	4303      	orrs	r3, r0
 80012d8:	428e      	cmp	r6, r1
 80012da:	dd00      	ble.n	80012de <__aeabi_dadd+0xce>
 80012dc:	e117      	b.n	800150e <__aeabi_dadd+0x2fe>
 80012de:	1b8e      	subs	r6, r1, r6
 80012e0:	1c72      	adds	r2, r6, #1
 80012e2:	2a1f      	cmp	r2, #31
 80012e4:	dd00      	ble.n	80012e8 <__aeabi_dadd+0xd8>
 80012e6:	e1a7      	b.n	8001638 <__aeabi_dadd+0x428>
 80012e8:	2120      	movs	r1, #32
 80012ea:	0018      	movs	r0, r3
 80012ec:	002e      	movs	r6, r5
 80012ee:	1a89      	subs	r1, r1, r2
 80012f0:	408d      	lsls	r5, r1
 80012f2:	4088      	lsls	r0, r1
 80012f4:	40d6      	lsrs	r6, r2
 80012f6:	40d3      	lsrs	r3, r2
 80012f8:	1e69      	subs	r1, r5, #1
 80012fa:	418d      	sbcs	r5, r1
 80012fc:	4330      	orrs	r0, r6
 80012fe:	4698      	mov	r8, r3
 8001300:	2600      	movs	r6, #0
 8001302:	4305      	orrs	r5, r0
 8001304:	076b      	lsls	r3, r5, #29
 8001306:	d009      	beq.n	800131c <__aeabi_dadd+0x10c>
 8001308:	230f      	movs	r3, #15
 800130a:	402b      	ands	r3, r5
 800130c:	2b04      	cmp	r3, #4
 800130e:	d005      	beq.n	800131c <__aeabi_dadd+0x10c>
 8001310:	1d2b      	adds	r3, r5, #4
 8001312:	42ab      	cmp	r3, r5
 8001314:	41ad      	sbcs	r5, r5
 8001316:	426d      	negs	r5, r5
 8001318:	44a8      	add	r8, r5
 800131a:	001d      	movs	r5, r3
 800131c:	4643      	mov	r3, r8
 800131e:	021b      	lsls	r3, r3, #8
 8001320:	d400      	bmi.n	8001324 <__aeabi_dadd+0x114>
 8001322:	e094      	b.n	800144e <__aeabi_dadd+0x23e>
 8001324:	4b97      	ldr	r3, [pc, #604]	; (8001584 <__aeabi_dadd+0x374>)
 8001326:	1c72      	adds	r2, r6, #1
 8001328:	429a      	cmp	r2, r3
 800132a:	d100      	bne.n	800132e <__aeabi_dadd+0x11e>
 800132c:	e09d      	b.n	800146a <__aeabi_dadd+0x25a>
 800132e:	4641      	mov	r1, r8
 8001330:	4b95      	ldr	r3, [pc, #596]	; (8001588 <__aeabi_dadd+0x378>)
 8001332:	08ed      	lsrs	r5, r5, #3
 8001334:	4019      	ands	r1, r3
 8001336:	000b      	movs	r3, r1
 8001338:	0552      	lsls	r2, r2, #21
 800133a:	0749      	lsls	r1, r1, #29
 800133c:	025b      	lsls	r3, r3, #9
 800133e:	4329      	orrs	r1, r5
 8001340:	0b1b      	lsrs	r3, r3, #12
 8001342:	0d52      	lsrs	r2, r2, #21
 8001344:	0512      	lsls	r2, r2, #20
 8001346:	4313      	orrs	r3, r2
 8001348:	07e4      	lsls	r4, r4, #31
 800134a:	4323      	orrs	r3, r4
 800134c:	0008      	movs	r0, r1
 800134e:	0019      	movs	r1, r3
 8001350:	bce0      	pop	{r5, r6, r7}
 8001352:	46ba      	mov	sl, r7
 8001354:	46b1      	mov	r9, r6
 8001356:	46a8      	mov	r8, r5
 8001358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800135a:	2a00      	cmp	r2, #0
 800135c:	d043      	beq.n	80013e6 <__aeabi_dadd+0x1d6>
 800135e:	1b8a      	subs	r2, r1, r6
 8001360:	2e00      	cmp	r6, #0
 8001362:	d000      	beq.n	8001366 <__aeabi_dadd+0x156>
 8001364:	e12a      	b.n	80015bc <__aeabi_dadd+0x3ac>
 8001366:	464c      	mov	r4, r9
 8001368:	431c      	orrs	r4, r3
 800136a:	d100      	bne.n	800136e <__aeabi_dadd+0x15e>
 800136c:	e1d1      	b.n	8001712 <__aeabi_dadd+0x502>
 800136e:	1e54      	subs	r4, r2, #1
 8001370:	2a01      	cmp	r2, #1
 8001372:	d100      	bne.n	8001376 <__aeabi_dadd+0x166>
 8001374:	e21f      	b.n	80017b6 <__aeabi_dadd+0x5a6>
 8001376:	4d83      	ldr	r5, [pc, #524]	; (8001584 <__aeabi_dadd+0x374>)
 8001378:	42aa      	cmp	r2, r5
 800137a:	d100      	bne.n	800137e <__aeabi_dadd+0x16e>
 800137c:	e272      	b.n	8001864 <__aeabi_dadd+0x654>
 800137e:	0022      	movs	r2, r4
 8001380:	e123      	b.n	80015ca <__aeabi_dadd+0x3ba>
 8001382:	2a00      	cmp	r2, #0
 8001384:	dc00      	bgt.n	8001388 <__aeabi_dadd+0x178>
 8001386:	e098      	b.n	80014ba <__aeabi_dadd+0x2aa>
 8001388:	2900      	cmp	r1, #0
 800138a:	d042      	beq.n	8001412 <__aeabi_dadd+0x202>
 800138c:	497d      	ldr	r1, [pc, #500]	; (8001584 <__aeabi_dadd+0x374>)
 800138e:	428e      	cmp	r6, r1
 8001390:	d100      	bne.n	8001394 <__aeabi_dadd+0x184>
 8001392:	e0da      	b.n	800154a <__aeabi_dadd+0x33a>
 8001394:	2180      	movs	r1, #128	; 0x80
 8001396:	0028      	movs	r0, r5
 8001398:	0409      	lsls	r1, r1, #16
 800139a:	4308      	orrs	r0, r1
 800139c:	4684      	mov	ip, r0
 800139e:	2a38      	cmp	r2, #56	; 0x38
 80013a0:	dd00      	ble.n	80013a4 <__aeabi_dadd+0x194>
 80013a2:	e129      	b.n	80015f8 <__aeabi_dadd+0x3e8>
 80013a4:	2a1f      	cmp	r2, #31
 80013a6:	dc00      	bgt.n	80013aa <__aeabi_dadd+0x19a>
 80013a8:	e187      	b.n	80016ba <__aeabi_dadd+0x4aa>
 80013aa:	0011      	movs	r1, r2
 80013ac:	4665      	mov	r5, ip
 80013ae:	3920      	subs	r1, #32
 80013b0:	40cd      	lsrs	r5, r1
 80013b2:	2a20      	cmp	r2, #32
 80013b4:	d004      	beq.n	80013c0 <__aeabi_dadd+0x1b0>
 80013b6:	2040      	movs	r0, #64	; 0x40
 80013b8:	4661      	mov	r1, ip
 80013ba:	1a82      	subs	r2, r0, r2
 80013bc:	4091      	lsls	r1, r2
 80013be:	430f      	orrs	r7, r1
 80013c0:	0039      	movs	r1, r7
 80013c2:	1e4f      	subs	r7, r1, #1
 80013c4:	41b9      	sbcs	r1, r7
 80013c6:	430d      	orrs	r5, r1
 80013c8:	e11b      	b.n	8001602 <__aeabi_dadd+0x3f2>
 80013ca:	0029      	movs	r1, r5
 80013cc:	4339      	orrs	r1, r7
 80013ce:	d100      	bne.n	80013d2 <__aeabi_dadd+0x1c2>
 80013d0:	e0b5      	b.n	800153e <__aeabi_dadd+0x32e>
 80013d2:	1e51      	subs	r1, r2, #1
 80013d4:	2a01      	cmp	r2, #1
 80013d6:	d100      	bne.n	80013da <__aeabi_dadd+0x1ca>
 80013d8:	e1ab      	b.n	8001732 <__aeabi_dadd+0x522>
 80013da:	486a      	ldr	r0, [pc, #424]	; (8001584 <__aeabi_dadd+0x374>)
 80013dc:	4282      	cmp	r2, r0
 80013de:	d100      	bne.n	80013e2 <__aeabi_dadd+0x1d2>
 80013e0:	e1b2      	b.n	8001748 <__aeabi_dadd+0x538>
 80013e2:	000a      	movs	r2, r1
 80013e4:	e743      	b.n	800126e <__aeabi_dadd+0x5e>
 80013e6:	4969      	ldr	r1, [pc, #420]	; (800158c <__aeabi_dadd+0x37c>)
 80013e8:	1c75      	adds	r5, r6, #1
 80013ea:	420d      	tst	r5, r1
 80013ec:	d000      	beq.n	80013f0 <__aeabi_dadd+0x1e0>
 80013ee:	e0cf      	b.n	8001590 <__aeabi_dadd+0x380>
 80013f0:	2e00      	cmp	r6, #0
 80013f2:	d000      	beq.n	80013f6 <__aeabi_dadd+0x1e6>
 80013f4:	e193      	b.n	800171e <__aeabi_dadd+0x50e>
 80013f6:	4649      	mov	r1, r9
 80013f8:	4319      	orrs	r1, r3
 80013fa:	d100      	bne.n	80013fe <__aeabi_dadd+0x1ee>
 80013fc:	e1d1      	b.n	80017a2 <__aeabi_dadd+0x592>
 80013fe:	4661      	mov	r1, ip
 8001400:	4339      	orrs	r1, r7
 8001402:	d000      	beq.n	8001406 <__aeabi_dadd+0x1f6>
 8001404:	e1e3      	b.n	80017ce <__aeabi_dadd+0x5be>
 8001406:	4649      	mov	r1, r9
 8001408:	0758      	lsls	r0, r3, #29
 800140a:	08c9      	lsrs	r1, r1, #3
 800140c:	4301      	orrs	r1, r0
 800140e:	08db      	lsrs	r3, r3, #3
 8001410:	e026      	b.n	8001460 <__aeabi_dadd+0x250>
 8001412:	0029      	movs	r1, r5
 8001414:	4339      	orrs	r1, r7
 8001416:	d100      	bne.n	800141a <__aeabi_dadd+0x20a>
 8001418:	e091      	b.n	800153e <__aeabi_dadd+0x32e>
 800141a:	1e51      	subs	r1, r2, #1
 800141c:	2a01      	cmp	r2, #1
 800141e:	d005      	beq.n	800142c <__aeabi_dadd+0x21c>
 8001420:	4858      	ldr	r0, [pc, #352]	; (8001584 <__aeabi_dadd+0x374>)
 8001422:	4282      	cmp	r2, r0
 8001424:	d100      	bne.n	8001428 <__aeabi_dadd+0x218>
 8001426:	e18f      	b.n	8001748 <__aeabi_dadd+0x538>
 8001428:	000a      	movs	r2, r1
 800142a:	e7b8      	b.n	800139e <__aeabi_dadd+0x18e>
 800142c:	003d      	movs	r5, r7
 800142e:	444d      	add	r5, r9
 8001430:	454d      	cmp	r5, r9
 8001432:	4189      	sbcs	r1, r1
 8001434:	4463      	add	r3, ip
 8001436:	4698      	mov	r8, r3
 8001438:	4249      	negs	r1, r1
 800143a:	4488      	add	r8, r1
 800143c:	4643      	mov	r3, r8
 800143e:	2602      	movs	r6, #2
 8001440:	021b      	lsls	r3, r3, #8
 8001442:	d500      	bpl.n	8001446 <__aeabi_dadd+0x236>
 8001444:	e0eb      	b.n	800161e <__aeabi_dadd+0x40e>
 8001446:	3e01      	subs	r6, #1
 8001448:	076b      	lsls	r3, r5, #29
 800144a:	d000      	beq.n	800144e <__aeabi_dadd+0x23e>
 800144c:	e75c      	b.n	8001308 <__aeabi_dadd+0xf8>
 800144e:	4643      	mov	r3, r8
 8001450:	08e9      	lsrs	r1, r5, #3
 8001452:	075a      	lsls	r2, r3, #29
 8001454:	4311      	orrs	r1, r2
 8001456:	0032      	movs	r2, r6
 8001458:	08db      	lsrs	r3, r3, #3
 800145a:	484a      	ldr	r0, [pc, #296]	; (8001584 <__aeabi_dadd+0x374>)
 800145c:	4282      	cmp	r2, r0
 800145e:	d021      	beq.n	80014a4 <__aeabi_dadd+0x294>
 8001460:	031b      	lsls	r3, r3, #12
 8001462:	0552      	lsls	r2, r2, #21
 8001464:	0b1b      	lsrs	r3, r3, #12
 8001466:	0d52      	lsrs	r2, r2, #21
 8001468:	e76c      	b.n	8001344 <__aeabi_dadd+0x134>
 800146a:	2300      	movs	r3, #0
 800146c:	2100      	movs	r1, #0
 800146e:	e769      	b.n	8001344 <__aeabi_dadd+0x134>
 8001470:	002a      	movs	r2, r5
 8001472:	433a      	orrs	r2, r7
 8001474:	d069      	beq.n	800154a <__aeabi_dadd+0x33a>
 8001476:	464a      	mov	r2, r9
 8001478:	0758      	lsls	r0, r3, #29
 800147a:	08d1      	lsrs	r1, r2, #3
 800147c:	08da      	lsrs	r2, r3, #3
 800147e:	2380      	movs	r3, #128	; 0x80
 8001480:	031b      	lsls	r3, r3, #12
 8001482:	4308      	orrs	r0, r1
 8001484:	421a      	tst	r2, r3
 8001486:	d007      	beq.n	8001498 <__aeabi_dadd+0x288>
 8001488:	0029      	movs	r1, r5
 800148a:	08ed      	lsrs	r5, r5, #3
 800148c:	421d      	tst	r5, r3
 800148e:	d103      	bne.n	8001498 <__aeabi_dadd+0x288>
 8001490:	002a      	movs	r2, r5
 8001492:	08ff      	lsrs	r7, r7, #3
 8001494:	0748      	lsls	r0, r1, #29
 8001496:	4338      	orrs	r0, r7
 8001498:	0f43      	lsrs	r3, r0, #29
 800149a:	00c1      	lsls	r1, r0, #3
 800149c:	075b      	lsls	r3, r3, #29
 800149e:	08c9      	lsrs	r1, r1, #3
 80014a0:	4319      	orrs	r1, r3
 80014a2:	0013      	movs	r3, r2
 80014a4:	000a      	movs	r2, r1
 80014a6:	431a      	orrs	r2, r3
 80014a8:	d100      	bne.n	80014ac <__aeabi_dadd+0x29c>
 80014aa:	e213      	b.n	80018d4 <__aeabi_dadd+0x6c4>
 80014ac:	2280      	movs	r2, #128	; 0x80
 80014ae:	0312      	lsls	r2, r2, #12
 80014b0:	4313      	orrs	r3, r2
 80014b2:	031b      	lsls	r3, r3, #12
 80014b4:	4a33      	ldr	r2, [pc, #204]	; (8001584 <__aeabi_dadd+0x374>)
 80014b6:	0b1b      	lsrs	r3, r3, #12
 80014b8:	e744      	b.n	8001344 <__aeabi_dadd+0x134>
 80014ba:	2a00      	cmp	r2, #0
 80014bc:	d04b      	beq.n	8001556 <__aeabi_dadd+0x346>
 80014be:	1b8a      	subs	r2, r1, r6
 80014c0:	2e00      	cmp	r6, #0
 80014c2:	d100      	bne.n	80014c6 <__aeabi_dadd+0x2b6>
 80014c4:	e0e7      	b.n	8001696 <__aeabi_dadd+0x486>
 80014c6:	482f      	ldr	r0, [pc, #188]	; (8001584 <__aeabi_dadd+0x374>)
 80014c8:	4281      	cmp	r1, r0
 80014ca:	d100      	bne.n	80014ce <__aeabi_dadd+0x2be>
 80014cc:	e195      	b.n	80017fa <__aeabi_dadd+0x5ea>
 80014ce:	2080      	movs	r0, #128	; 0x80
 80014d0:	0400      	lsls	r0, r0, #16
 80014d2:	4303      	orrs	r3, r0
 80014d4:	2a38      	cmp	r2, #56	; 0x38
 80014d6:	dd00      	ble.n	80014da <__aeabi_dadd+0x2ca>
 80014d8:	e143      	b.n	8001762 <__aeabi_dadd+0x552>
 80014da:	2a1f      	cmp	r2, #31
 80014dc:	dd00      	ble.n	80014e0 <__aeabi_dadd+0x2d0>
 80014de:	e1db      	b.n	8001898 <__aeabi_dadd+0x688>
 80014e0:	2020      	movs	r0, #32
 80014e2:	001d      	movs	r5, r3
 80014e4:	464e      	mov	r6, r9
 80014e6:	1a80      	subs	r0, r0, r2
 80014e8:	4085      	lsls	r5, r0
 80014ea:	40d6      	lsrs	r6, r2
 80014ec:	4335      	orrs	r5, r6
 80014ee:	464e      	mov	r6, r9
 80014f0:	4086      	lsls	r6, r0
 80014f2:	0030      	movs	r0, r6
 80014f4:	40d3      	lsrs	r3, r2
 80014f6:	1e46      	subs	r6, r0, #1
 80014f8:	41b0      	sbcs	r0, r6
 80014fa:	449c      	add	ip, r3
 80014fc:	4305      	orrs	r5, r0
 80014fe:	19ed      	adds	r5, r5, r7
 8001500:	42bd      	cmp	r5, r7
 8001502:	419b      	sbcs	r3, r3
 8001504:	425b      	negs	r3, r3
 8001506:	4463      	add	r3, ip
 8001508:	4698      	mov	r8, r3
 800150a:	000e      	movs	r6, r1
 800150c:	e07f      	b.n	800160e <__aeabi_dadd+0x3fe>
 800150e:	4a1e      	ldr	r2, [pc, #120]	; (8001588 <__aeabi_dadd+0x378>)
 8001510:	1a76      	subs	r6, r6, r1
 8001512:	4013      	ands	r3, r2
 8001514:	4698      	mov	r8, r3
 8001516:	e6f5      	b.n	8001304 <__aeabi_dadd+0xf4>
 8001518:	0028      	movs	r0, r5
 800151a:	f001 fd61 	bl	8002fe0 <__clzsi2>
 800151e:	0001      	movs	r1, r0
 8001520:	3118      	adds	r1, #24
 8001522:	291f      	cmp	r1, #31
 8001524:	dc00      	bgt.n	8001528 <__aeabi_dadd+0x318>
 8001526:	e6cf      	b.n	80012c8 <__aeabi_dadd+0xb8>
 8001528:	002b      	movs	r3, r5
 800152a:	3808      	subs	r0, #8
 800152c:	4083      	lsls	r3, r0
 800152e:	2500      	movs	r5, #0
 8001530:	e6d2      	b.n	80012d8 <__aeabi_dadd+0xc8>
 8001532:	4662      	mov	r2, ip
 8001534:	433a      	orrs	r2, r7
 8001536:	0011      	movs	r1, r2
 8001538:	1e4f      	subs	r7, r1, #1
 800153a:	41b9      	sbcs	r1, r7
 800153c:	e6ac      	b.n	8001298 <__aeabi_dadd+0x88>
 800153e:	4649      	mov	r1, r9
 8001540:	0758      	lsls	r0, r3, #29
 8001542:	08c9      	lsrs	r1, r1, #3
 8001544:	4301      	orrs	r1, r0
 8001546:	08db      	lsrs	r3, r3, #3
 8001548:	e787      	b.n	800145a <__aeabi_dadd+0x24a>
 800154a:	4649      	mov	r1, r9
 800154c:	075a      	lsls	r2, r3, #29
 800154e:	08c9      	lsrs	r1, r1, #3
 8001550:	4311      	orrs	r1, r2
 8001552:	08db      	lsrs	r3, r3, #3
 8001554:	e7a6      	b.n	80014a4 <__aeabi_dadd+0x294>
 8001556:	490d      	ldr	r1, [pc, #52]	; (800158c <__aeabi_dadd+0x37c>)
 8001558:	1c70      	adds	r0, r6, #1
 800155a:	4208      	tst	r0, r1
 800155c:	d000      	beq.n	8001560 <__aeabi_dadd+0x350>
 800155e:	e0bb      	b.n	80016d8 <__aeabi_dadd+0x4c8>
 8001560:	2e00      	cmp	r6, #0
 8001562:	d000      	beq.n	8001566 <__aeabi_dadd+0x356>
 8001564:	e114      	b.n	8001790 <__aeabi_dadd+0x580>
 8001566:	4649      	mov	r1, r9
 8001568:	4319      	orrs	r1, r3
 800156a:	d100      	bne.n	800156e <__aeabi_dadd+0x35e>
 800156c:	e175      	b.n	800185a <__aeabi_dadd+0x64a>
 800156e:	0029      	movs	r1, r5
 8001570:	4339      	orrs	r1, r7
 8001572:	d000      	beq.n	8001576 <__aeabi_dadd+0x366>
 8001574:	e17e      	b.n	8001874 <__aeabi_dadd+0x664>
 8001576:	4649      	mov	r1, r9
 8001578:	0758      	lsls	r0, r3, #29
 800157a:	08c9      	lsrs	r1, r1, #3
 800157c:	4301      	orrs	r1, r0
 800157e:	08db      	lsrs	r3, r3, #3
 8001580:	e76e      	b.n	8001460 <__aeabi_dadd+0x250>
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	000007ff 	.word	0x000007ff
 8001588:	ff7fffff 	.word	0xff7fffff
 800158c:	000007fe 	.word	0x000007fe
 8001590:	4649      	mov	r1, r9
 8001592:	1bcd      	subs	r5, r1, r7
 8001594:	4661      	mov	r1, ip
 8001596:	1a58      	subs	r0, r3, r1
 8001598:	45a9      	cmp	r9, r5
 800159a:	4189      	sbcs	r1, r1
 800159c:	4249      	negs	r1, r1
 800159e:	4688      	mov	r8, r1
 80015a0:	0001      	movs	r1, r0
 80015a2:	4640      	mov	r0, r8
 80015a4:	1a09      	subs	r1, r1, r0
 80015a6:	4688      	mov	r8, r1
 80015a8:	0209      	lsls	r1, r1, #8
 80015aa:	d500      	bpl.n	80015ae <__aeabi_dadd+0x39e>
 80015ac:	e0a6      	b.n	80016fc <__aeabi_dadd+0x4ec>
 80015ae:	4641      	mov	r1, r8
 80015b0:	4329      	orrs	r1, r5
 80015b2:	d000      	beq.n	80015b6 <__aeabi_dadd+0x3a6>
 80015b4:	e67f      	b.n	80012b6 <__aeabi_dadd+0xa6>
 80015b6:	2300      	movs	r3, #0
 80015b8:	2400      	movs	r4, #0
 80015ba:	e751      	b.n	8001460 <__aeabi_dadd+0x250>
 80015bc:	4cc7      	ldr	r4, [pc, #796]	; (80018dc <__aeabi_dadd+0x6cc>)
 80015be:	42a1      	cmp	r1, r4
 80015c0:	d100      	bne.n	80015c4 <__aeabi_dadd+0x3b4>
 80015c2:	e0c7      	b.n	8001754 <__aeabi_dadd+0x544>
 80015c4:	2480      	movs	r4, #128	; 0x80
 80015c6:	0424      	lsls	r4, r4, #16
 80015c8:	4323      	orrs	r3, r4
 80015ca:	2a38      	cmp	r2, #56	; 0x38
 80015cc:	dc54      	bgt.n	8001678 <__aeabi_dadd+0x468>
 80015ce:	2a1f      	cmp	r2, #31
 80015d0:	dd00      	ble.n	80015d4 <__aeabi_dadd+0x3c4>
 80015d2:	e0cc      	b.n	800176e <__aeabi_dadd+0x55e>
 80015d4:	2420      	movs	r4, #32
 80015d6:	4648      	mov	r0, r9
 80015d8:	1aa4      	subs	r4, r4, r2
 80015da:	001d      	movs	r5, r3
 80015dc:	464e      	mov	r6, r9
 80015de:	40a0      	lsls	r0, r4
 80015e0:	40d6      	lsrs	r6, r2
 80015e2:	40a5      	lsls	r5, r4
 80015e4:	0004      	movs	r4, r0
 80015e6:	40d3      	lsrs	r3, r2
 80015e8:	4662      	mov	r2, ip
 80015ea:	4335      	orrs	r5, r6
 80015ec:	1e66      	subs	r6, r4, #1
 80015ee:	41b4      	sbcs	r4, r6
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	469c      	mov	ip, r3
 80015f4:	4325      	orrs	r5, r4
 80015f6:	e044      	b.n	8001682 <__aeabi_dadd+0x472>
 80015f8:	4662      	mov	r2, ip
 80015fa:	433a      	orrs	r2, r7
 80015fc:	0015      	movs	r5, r2
 80015fe:	1e6f      	subs	r7, r5, #1
 8001600:	41bd      	sbcs	r5, r7
 8001602:	444d      	add	r5, r9
 8001604:	454d      	cmp	r5, r9
 8001606:	4189      	sbcs	r1, r1
 8001608:	4249      	negs	r1, r1
 800160a:	4688      	mov	r8, r1
 800160c:	4498      	add	r8, r3
 800160e:	4643      	mov	r3, r8
 8001610:	021b      	lsls	r3, r3, #8
 8001612:	d400      	bmi.n	8001616 <__aeabi_dadd+0x406>
 8001614:	e718      	b.n	8001448 <__aeabi_dadd+0x238>
 8001616:	4bb1      	ldr	r3, [pc, #708]	; (80018dc <__aeabi_dadd+0x6cc>)
 8001618:	3601      	adds	r6, #1
 800161a:	429e      	cmp	r6, r3
 800161c:	d049      	beq.n	80016b2 <__aeabi_dadd+0x4a2>
 800161e:	4642      	mov	r2, r8
 8001620:	4baf      	ldr	r3, [pc, #700]	; (80018e0 <__aeabi_dadd+0x6d0>)
 8001622:	2101      	movs	r1, #1
 8001624:	401a      	ands	r2, r3
 8001626:	0013      	movs	r3, r2
 8001628:	086a      	lsrs	r2, r5, #1
 800162a:	400d      	ands	r5, r1
 800162c:	4315      	orrs	r5, r2
 800162e:	07d9      	lsls	r1, r3, #31
 8001630:	085b      	lsrs	r3, r3, #1
 8001632:	4698      	mov	r8, r3
 8001634:	430d      	orrs	r5, r1
 8001636:	e665      	b.n	8001304 <__aeabi_dadd+0xf4>
 8001638:	0018      	movs	r0, r3
 800163a:	3e1f      	subs	r6, #31
 800163c:	40f0      	lsrs	r0, r6
 800163e:	2a20      	cmp	r2, #32
 8001640:	d003      	beq.n	800164a <__aeabi_dadd+0x43a>
 8001642:	2140      	movs	r1, #64	; 0x40
 8001644:	1a8a      	subs	r2, r1, r2
 8001646:	4093      	lsls	r3, r2
 8001648:	431d      	orrs	r5, r3
 800164a:	1e69      	subs	r1, r5, #1
 800164c:	418d      	sbcs	r5, r1
 800164e:	2300      	movs	r3, #0
 8001650:	2600      	movs	r6, #0
 8001652:	4698      	mov	r8, r3
 8001654:	4305      	orrs	r5, r0
 8001656:	e6f7      	b.n	8001448 <__aeabi_dadd+0x238>
 8001658:	0011      	movs	r1, r2
 800165a:	4665      	mov	r5, ip
 800165c:	3920      	subs	r1, #32
 800165e:	40cd      	lsrs	r5, r1
 8001660:	2a20      	cmp	r2, #32
 8001662:	d004      	beq.n	800166e <__aeabi_dadd+0x45e>
 8001664:	2040      	movs	r0, #64	; 0x40
 8001666:	4661      	mov	r1, ip
 8001668:	1a82      	subs	r2, r0, r2
 800166a:	4091      	lsls	r1, r2
 800166c:	430f      	orrs	r7, r1
 800166e:	0039      	movs	r1, r7
 8001670:	1e4f      	subs	r7, r1, #1
 8001672:	41b9      	sbcs	r1, r7
 8001674:	4329      	orrs	r1, r5
 8001676:	e60f      	b.n	8001298 <__aeabi_dadd+0x88>
 8001678:	464a      	mov	r2, r9
 800167a:	4313      	orrs	r3, r2
 800167c:	001d      	movs	r5, r3
 800167e:	1e6b      	subs	r3, r5, #1
 8001680:	419d      	sbcs	r5, r3
 8001682:	1b7d      	subs	r5, r7, r5
 8001684:	42af      	cmp	r7, r5
 8001686:	419b      	sbcs	r3, r3
 8001688:	4662      	mov	r2, ip
 800168a:	425b      	negs	r3, r3
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	4698      	mov	r8, r3
 8001690:	4654      	mov	r4, sl
 8001692:	000e      	movs	r6, r1
 8001694:	e607      	b.n	80012a6 <__aeabi_dadd+0x96>
 8001696:	4648      	mov	r0, r9
 8001698:	4318      	orrs	r0, r3
 800169a:	d100      	bne.n	800169e <__aeabi_dadd+0x48e>
 800169c:	e0b3      	b.n	8001806 <__aeabi_dadd+0x5f6>
 800169e:	1e50      	subs	r0, r2, #1
 80016a0:	2a01      	cmp	r2, #1
 80016a2:	d100      	bne.n	80016a6 <__aeabi_dadd+0x496>
 80016a4:	e10d      	b.n	80018c2 <__aeabi_dadd+0x6b2>
 80016a6:	4d8d      	ldr	r5, [pc, #564]	; (80018dc <__aeabi_dadd+0x6cc>)
 80016a8:	42aa      	cmp	r2, r5
 80016aa:	d100      	bne.n	80016ae <__aeabi_dadd+0x49e>
 80016ac:	e0a5      	b.n	80017fa <__aeabi_dadd+0x5ea>
 80016ae:	0002      	movs	r2, r0
 80016b0:	e710      	b.n	80014d4 <__aeabi_dadd+0x2c4>
 80016b2:	0032      	movs	r2, r6
 80016b4:	2300      	movs	r3, #0
 80016b6:	2100      	movs	r1, #0
 80016b8:	e644      	b.n	8001344 <__aeabi_dadd+0x134>
 80016ba:	2120      	movs	r1, #32
 80016bc:	0038      	movs	r0, r7
 80016be:	1a89      	subs	r1, r1, r2
 80016c0:	4665      	mov	r5, ip
 80016c2:	408f      	lsls	r7, r1
 80016c4:	408d      	lsls	r5, r1
 80016c6:	40d0      	lsrs	r0, r2
 80016c8:	1e79      	subs	r1, r7, #1
 80016ca:	418f      	sbcs	r7, r1
 80016cc:	4305      	orrs	r5, r0
 80016ce:	433d      	orrs	r5, r7
 80016d0:	4667      	mov	r7, ip
 80016d2:	40d7      	lsrs	r7, r2
 80016d4:	19db      	adds	r3, r3, r7
 80016d6:	e794      	b.n	8001602 <__aeabi_dadd+0x3f2>
 80016d8:	4a80      	ldr	r2, [pc, #512]	; (80018dc <__aeabi_dadd+0x6cc>)
 80016da:	4290      	cmp	r0, r2
 80016dc:	d100      	bne.n	80016e0 <__aeabi_dadd+0x4d0>
 80016de:	e0ec      	b.n	80018ba <__aeabi_dadd+0x6aa>
 80016e0:	0039      	movs	r1, r7
 80016e2:	4449      	add	r1, r9
 80016e4:	4549      	cmp	r1, r9
 80016e6:	4192      	sbcs	r2, r2
 80016e8:	4463      	add	r3, ip
 80016ea:	4252      	negs	r2, r2
 80016ec:	189b      	adds	r3, r3, r2
 80016ee:	07dd      	lsls	r5, r3, #31
 80016f0:	0849      	lsrs	r1, r1, #1
 80016f2:	085b      	lsrs	r3, r3, #1
 80016f4:	4698      	mov	r8, r3
 80016f6:	0006      	movs	r6, r0
 80016f8:	430d      	orrs	r5, r1
 80016fa:	e6a5      	b.n	8001448 <__aeabi_dadd+0x238>
 80016fc:	464a      	mov	r2, r9
 80016fe:	1abd      	subs	r5, r7, r2
 8001700:	42af      	cmp	r7, r5
 8001702:	4189      	sbcs	r1, r1
 8001704:	4662      	mov	r2, ip
 8001706:	4249      	negs	r1, r1
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	1a5b      	subs	r3, r3, r1
 800170c:	4698      	mov	r8, r3
 800170e:	4654      	mov	r4, sl
 8001710:	e5d1      	b.n	80012b6 <__aeabi_dadd+0xa6>
 8001712:	076c      	lsls	r4, r5, #29
 8001714:	08f9      	lsrs	r1, r7, #3
 8001716:	4321      	orrs	r1, r4
 8001718:	08eb      	lsrs	r3, r5, #3
 800171a:	0004      	movs	r4, r0
 800171c:	e69d      	b.n	800145a <__aeabi_dadd+0x24a>
 800171e:	464a      	mov	r2, r9
 8001720:	431a      	orrs	r2, r3
 8001722:	d175      	bne.n	8001810 <__aeabi_dadd+0x600>
 8001724:	4661      	mov	r1, ip
 8001726:	4339      	orrs	r1, r7
 8001728:	d114      	bne.n	8001754 <__aeabi_dadd+0x544>
 800172a:	2380      	movs	r3, #128	; 0x80
 800172c:	2400      	movs	r4, #0
 800172e:	031b      	lsls	r3, r3, #12
 8001730:	e6bc      	b.n	80014ac <__aeabi_dadd+0x29c>
 8001732:	464a      	mov	r2, r9
 8001734:	1bd5      	subs	r5, r2, r7
 8001736:	45a9      	cmp	r9, r5
 8001738:	4189      	sbcs	r1, r1
 800173a:	4662      	mov	r2, ip
 800173c:	4249      	negs	r1, r1
 800173e:	1a9b      	subs	r3, r3, r2
 8001740:	1a5b      	subs	r3, r3, r1
 8001742:	4698      	mov	r8, r3
 8001744:	2601      	movs	r6, #1
 8001746:	e5ae      	b.n	80012a6 <__aeabi_dadd+0x96>
 8001748:	464a      	mov	r2, r9
 800174a:	08d1      	lsrs	r1, r2, #3
 800174c:	075a      	lsls	r2, r3, #29
 800174e:	4311      	orrs	r1, r2
 8001750:	08db      	lsrs	r3, r3, #3
 8001752:	e6a7      	b.n	80014a4 <__aeabi_dadd+0x294>
 8001754:	4663      	mov	r3, ip
 8001756:	08f9      	lsrs	r1, r7, #3
 8001758:	075a      	lsls	r2, r3, #29
 800175a:	4654      	mov	r4, sl
 800175c:	4311      	orrs	r1, r2
 800175e:	08db      	lsrs	r3, r3, #3
 8001760:	e6a0      	b.n	80014a4 <__aeabi_dadd+0x294>
 8001762:	464a      	mov	r2, r9
 8001764:	4313      	orrs	r3, r2
 8001766:	001d      	movs	r5, r3
 8001768:	1e6b      	subs	r3, r5, #1
 800176a:	419d      	sbcs	r5, r3
 800176c:	e6c7      	b.n	80014fe <__aeabi_dadd+0x2ee>
 800176e:	0014      	movs	r4, r2
 8001770:	001e      	movs	r6, r3
 8001772:	3c20      	subs	r4, #32
 8001774:	40e6      	lsrs	r6, r4
 8001776:	2a20      	cmp	r2, #32
 8001778:	d005      	beq.n	8001786 <__aeabi_dadd+0x576>
 800177a:	2440      	movs	r4, #64	; 0x40
 800177c:	1aa2      	subs	r2, r4, r2
 800177e:	4093      	lsls	r3, r2
 8001780:	464a      	mov	r2, r9
 8001782:	431a      	orrs	r2, r3
 8001784:	4691      	mov	r9, r2
 8001786:	464d      	mov	r5, r9
 8001788:	1e6b      	subs	r3, r5, #1
 800178a:	419d      	sbcs	r5, r3
 800178c:	4335      	orrs	r5, r6
 800178e:	e778      	b.n	8001682 <__aeabi_dadd+0x472>
 8001790:	464a      	mov	r2, r9
 8001792:	431a      	orrs	r2, r3
 8001794:	d000      	beq.n	8001798 <__aeabi_dadd+0x588>
 8001796:	e66b      	b.n	8001470 <__aeabi_dadd+0x260>
 8001798:	076b      	lsls	r3, r5, #29
 800179a:	08f9      	lsrs	r1, r7, #3
 800179c:	4319      	orrs	r1, r3
 800179e:	08eb      	lsrs	r3, r5, #3
 80017a0:	e680      	b.n	80014a4 <__aeabi_dadd+0x294>
 80017a2:	4661      	mov	r1, ip
 80017a4:	4339      	orrs	r1, r7
 80017a6:	d054      	beq.n	8001852 <__aeabi_dadd+0x642>
 80017a8:	4663      	mov	r3, ip
 80017aa:	08f9      	lsrs	r1, r7, #3
 80017ac:	075c      	lsls	r4, r3, #29
 80017ae:	4321      	orrs	r1, r4
 80017b0:	08db      	lsrs	r3, r3, #3
 80017b2:	0004      	movs	r4, r0
 80017b4:	e654      	b.n	8001460 <__aeabi_dadd+0x250>
 80017b6:	464a      	mov	r2, r9
 80017b8:	1abd      	subs	r5, r7, r2
 80017ba:	42af      	cmp	r7, r5
 80017bc:	4189      	sbcs	r1, r1
 80017be:	4662      	mov	r2, ip
 80017c0:	4249      	negs	r1, r1
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	1a5b      	subs	r3, r3, r1
 80017c6:	4698      	mov	r8, r3
 80017c8:	0004      	movs	r4, r0
 80017ca:	2601      	movs	r6, #1
 80017cc:	e56b      	b.n	80012a6 <__aeabi_dadd+0x96>
 80017ce:	464a      	mov	r2, r9
 80017d0:	1bd5      	subs	r5, r2, r7
 80017d2:	45a9      	cmp	r9, r5
 80017d4:	4189      	sbcs	r1, r1
 80017d6:	4662      	mov	r2, ip
 80017d8:	4249      	negs	r1, r1
 80017da:	1a9a      	subs	r2, r3, r2
 80017dc:	1a52      	subs	r2, r2, r1
 80017de:	4690      	mov	r8, r2
 80017e0:	0212      	lsls	r2, r2, #8
 80017e2:	d532      	bpl.n	800184a <__aeabi_dadd+0x63a>
 80017e4:	464a      	mov	r2, r9
 80017e6:	1abd      	subs	r5, r7, r2
 80017e8:	42af      	cmp	r7, r5
 80017ea:	4189      	sbcs	r1, r1
 80017ec:	4662      	mov	r2, ip
 80017ee:	4249      	negs	r1, r1
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	1a5b      	subs	r3, r3, r1
 80017f4:	4698      	mov	r8, r3
 80017f6:	0004      	movs	r4, r0
 80017f8:	e584      	b.n	8001304 <__aeabi_dadd+0xf4>
 80017fa:	4663      	mov	r3, ip
 80017fc:	08f9      	lsrs	r1, r7, #3
 80017fe:	075a      	lsls	r2, r3, #29
 8001800:	4311      	orrs	r1, r2
 8001802:	08db      	lsrs	r3, r3, #3
 8001804:	e64e      	b.n	80014a4 <__aeabi_dadd+0x294>
 8001806:	08f9      	lsrs	r1, r7, #3
 8001808:	0768      	lsls	r0, r5, #29
 800180a:	4301      	orrs	r1, r0
 800180c:	08eb      	lsrs	r3, r5, #3
 800180e:	e624      	b.n	800145a <__aeabi_dadd+0x24a>
 8001810:	4662      	mov	r2, ip
 8001812:	433a      	orrs	r2, r7
 8001814:	d100      	bne.n	8001818 <__aeabi_dadd+0x608>
 8001816:	e698      	b.n	800154a <__aeabi_dadd+0x33a>
 8001818:	464a      	mov	r2, r9
 800181a:	08d1      	lsrs	r1, r2, #3
 800181c:	075a      	lsls	r2, r3, #29
 800181e:	4311      	orrs	r1, r2
 8001820:	08da      	lsrs	r2, r3, #3
 8001822:	2380      	movs	r3, #128	; 0x80
 8001824:	031b      	lsls	r3, r3, #12
 8001826:	421a      	tst	r2, r3
 8001828:	d008      	beq.n	800183c <__aeabi_dadd+0x62c>
 800182a:	4660      	mov	r0, ip
 800182c:	08c5      	lsrs	r5, r0, #3
 800182e:	421d      	tst	r5, r3
 8001830:	d104      	bne.n	800183c <__aeabi_dadd+0x62c>
 8001832:	4654      	mov	r4, sl
 8001834:	002a      	movs	r2, r5
 8001836:	08f9      	lsrs	r1, r7, #3
 8001838:	0743      	lsls	r3, r0, #29
 800183a:	4319      	orrs	r1, r3
 800183c:	0f4b      	lsrs	r3, r1, #29
 800183e:	00c9      	lsls	r1, r1, #3
 8001840:	075b      	lsls	r3, r3, #29
 8001842:	08c9      	lsrs	r1, r1, #3
 8001844:	4319      	orrs	r1, r3
 8001846:	0013      	movs	r3, r2
 8001848:	e62c      	b.n	80014a4 <__aeabi_dadd+0x294>
 800184a:	4641      	mov	r1, r8
 800184c:	4329      	orrs	r1, r5
 800184e:	d000      	beq.n	8001852 <__aeabi_dadd+0x642>
 8001850:	e5fa      	b.n	8001448 <__aeabi_dadd+0x238>
 8001852:	2300      	movs	r3, #0
 8001854:	000a      	movs	r2, r1
 8001856:	2400      	movs	r4, #0
 8001858:	e602      	b.n	8001460 <__aeabi_dadd+0x250>
 800185a:	076b      	lsls	r3, r5, #29
 800185c:	08f9      	lsrs	r1, r7, #3
 800185e:	4319      	orrs	r1, r3
 8001860:	08eb      	lsrs	r3, r5, #3
 8001862:	e5fd      	b.n	8001460 <__aeabi_dadd+0x250>
 8001864:	4663      	mov	r3, ip
 8001866:	08f9      	lsrs	r1, r7, #3
 8001868:	075b      	lsls	r3, r3, #29
 800186a:	4319      	orrs	r1, r3
 800186c:	4663      	mov	r3, ip
 800186e:	0004      	movs	r4, r0
 8001870:	08db      	lsrs	r3, r3, #3
 8001872:	e617      	b.n	80014a4 <__aeabi_dadd+0x294>
 8001874:	003d      	movs	r5, r7
 8001876:	444d      	add	r5, r9
 8001878:	4463      	add	r3, ip
 800187a:	454d      	cmp	r5, r9
 800187c:	4189      	sbcs	r1, r1
 800187e:	4698      	mov	r8, r3
 8001880:	4249      	negs	r1, r1
 8001882:	4488      	add	r8, r1
 8001884:	4643      	mov	r3, r8
 8001886:	021b      	lsls	r3, r3, #8
 8001888:	d400      	bmi.n	800188c <__aeabi_dadd+0x67c>
 800188a:	e5dd      	b.n	8001448 <__aeabi_dadd+0x238>
 800188c:	4642      	mov	r2, r8
 800188e:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <__aeabi_dadd+0x6d0>)
 8001890:	2601      	movs	r6, #1
 8001892:	401a      	ands	r2, r3
 8001894:	4690      	mov	r8, r2
 8001896:	e5d7      	b.n	8001448 <__aeabi_dadd+0x238>
 8001898:	0010      	movs	r0, r2
 800189a:	001e      	movs	r6, r3
 800189c:	3820      	subs	r0, #32
 800189e:	40c6      	lsrs	r6, r0
 80018a0:	2a20      	cmp	r2, #32
 80018a2:	d005      	beq.n	80018b0 <__aeabi_dadd+0x6a0>
 80018a4:	2040      	movs	r0, #64	; 0x40
 80018a6:	1a82      	subs	r2, r0, r2
 80018a8:	4093      	lsls	r3, r2
 80018aa:	464a      	mov	r2, r9
 80018ac:	431a      	orrs	r2, r3
 80018ae:	4691      	mov	r9, r2
 80018b0:	464d      	mov	r5, r9
 80018b2:	1e6b      	subs	r3, r5, #1
 80018b4:	419d      	sbcs	r5, r3
 80018b6:	4335      	orrs	r5, r6
 80018b8:	e621      	b.n	80014fe <__aeabi_dadd+0x2ee>
 80018ba:	0002      	movs	r2, r0
 80018bc:	2300      	movs	r3, #0
 80018be:	2100      	movs	r1, #0
 80018c0:	e540      	b.n	8001344 <__aeabi_dadd+0x134>
 80018c2:	464a      	mov	r2, r9
 80018c4:	19d5      	adds	r5, r2, r7
 80018c6:	42bd      	cmp	r5, r7
 80018c8:	4189      	sbcs	r1, r1
 80018ca:	4463      	add	r3, ip
 80018cc:	4698      	mov	r8, r3
 80018ce:	4249      	negs	r1, r1
 80018d0:	4488      	add	r8, r1
 80018d2:	e5b3      	b.n	800143c <__aeabi_dadd+0x22c>
 80018d4:	2100      	movs	r1, #0
 80018d6:	4a01      	ldr	r2, [pc, #4]	; (80018dc <__aeabi_dadd+0x6cc>)
 80018d8:	000b      	movs	r3, r1
 80018da:	e533      	b.n	8001344 <__aeabi_dadd+0x134>
 80018dc:	000007ff 	.word	0x000007ff
 80018e0:	ff7fffff 	.word	0xff7fffff

080018e4 <__aeabi_ddiv>:
 80018e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e6:	4657      	mov	r7, sl
 80018e8:	464e      	mov	r6, r9
 80018ea:	4645      	mov	r5, r8
 80018ec:	46de      	mov	lr, fp
 80018ee:	b5e0      	push	{r5, r6, r7, lr}
 80018f0:	4681      	mov	r9, r0
 80018f2:	0005      	movs	r5, r0
 80018f4:	030c      	lsls	r4, r1, #12
 80018f6:	0048      	lsls	r0, r1, #1
 80018f8:	4692      	mov	sl, r2
 80018fa:	001f      	movs	r7, r3
 80018fc:	b085      	sub	sp, #20
 80018fe:	0b24      	lsrs	r4, r4, #12
 8001900:	0d40      	lsrs	r0, r0, #21
 8001902:	0fce      	lsrs	r6, r1, #31
 8001904:	2800      	cmp	r0, #0
 8001906:	d059      	beq.n	80019bc <__aeabi_ddiv+0xd8>
 8001908:	4b87      	ldr	r3, [pc, #540]	; (8001b28 <__aeabi_ddiv+0x244>)
 800190a:	4298      	cmp	r0, r3
 800190c:	d100      	bne.n	8001910 <__aeabi_ddiv+0x2c>
 800190e:	e098      	b.n	8001a42 <__aeabi_ddiv+0x15e>
 8001910:	0f6b      	lsrs	r3, r5, #29
 8001912:	00e4      	lsls	r4, r4, #3
 8001914:	431c      	orrs	r4, r3
 8001916:	2380      	movs	r3, #128	; 0x80
 8001918:	041b      	lsls	r3, r3, #16
 800191a:	4323      	orrs	r3, r4
 800191c:	4698      	mov	r8, r3
 800191e:	4b83      	ldr	r3, [pc, #524]	; (8001b2c <__aeabi_ddiv+0x248>)
 8001920:	00ed      	lsls	r5, r5, #3
 8001922:	469b      	mov	fp, r3
 8001924:	2300      	movs	r3, #0
 8001926:	4699      	mov	r9, r3
 8001928:	4483      	add	fp, r0
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	033c      	lsls	r4, r7, #12
 800192e:	007b      	lsls	r3, r7, #1
 8001930:	4650      	mov	r0, sl
 8001932:	0b24      	lsrs	r4, r4, #12
 8001934:	0d5b      	lsrs	r3, r3, #21
 8001936:	0fff      	lsrs	r7, r7, #31
 8001938:	2b00      	cmp	r3, #0
 800193a:	d067      	beq.n	8001a0c <__aeabi_ddiv+0x128>
 800193c:	4a7a      	ldr	r2, [pc, #488]	; (8001b28 <__aeabi_ddiv+0x244>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d018      	beq.n	8001974 <__aeabi_ddiv+0x90>
 8001942:	497a      	ldr	r1, [pc, #488]	; (8001b2c <__aeabi_ddiv+0x248>)
 8001944:	0f42      	lsrs	r2, r0, #29
 8001946:	468c      	mov	ip, r1
 8001948:	00e4      	lsls	r4, r4, #3
 800194a:	4659      	mov	r1, fp
 800194c:	4314      	orrs	r4, r2
 800194e:	2280      	movs	r2, #128	; 0x80
 8001950:	4463      	add	r3, ip
 8001952:	0412      	lsls	r2, r2, #16
 8001954:	1acb      	subs	r3, r1, r3
 8001956:	4314      	orrs	r4, r2
 8001958:	469b      	mov	fp, r3
 800195a:	00c2      	lsls	r2, r0, #3
 800195c:	2000      	movs	r0, #0
 800195e:	0033      	movs	r3, r6
 8001960:	407b      	eors	r3, r7
 8001962:	469a      	mov	sl, r3
 8001964:	464b      	mov	r3, r9
 8001966:	2b0f      	cmp	r3, #15
 8001968:	d900      	bls.n	800196c <__aeabi_ddiv+0x88>
 800196a:	e0ef      	b.n	8001b4c <__aeabi_ddiv+0x268>
 800196c:	4970      	ldr	r1, [pc, #448]	; (8001b30 <__aeabi_ddiv+0x24c>)
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	58cb      	ldr	r3, [r1, r3]
 8001972:	469f      	mov	pc, r3
 8001974:	4b6f      	ldr	r3, [pc, #444]	; (8001b34 <__aeabi_ddiv+0x250>)
 8001976:	4652      	mov	r2, sl
 8001978:	469c      	mov	ip, r3
 800197a:	4322      	orrs	r2, r4
 800197c:	44e3      	add	fp, ip
 800197e:	2a00      	cmp	r2, #0
 8001980:	d000      	beq.n	8001984 <__aeabi_ddiv+0xa0>
 8001982:	e095      	b.n	8001ab0 <__aeabi_ddiv+0x1cc>
 8001984:	4649      	mov	r1, r9
 8001986:	2302      	movs	r3, #2
 8001988:	4319      	orrs	r1, r3
 800198a:	4689      	mov	r9, r1
 800198c:	2400      	movs	r4, #0
 800198e:	2002      	movs	r0, #2
 8001990:	e7e5      	b.n	800195e <__aeabi_ddiv+0x7a>
 8001992:	2300      	movs	r3, #0
 8001994:	2400      	movs	r4, #0
 8001996:	2500      	movs	r5, #0
 8001998:	4652      	mov	r2, sl
 800199a:	051b      	lsls	r3, r3, #20
 800199c:	4323      	orrs	r3, r4
 800199e:	07d2      	lsls	r2, r2, #31
 80019a0:	4313      	orrs	r3, r2
 80019a2:	0028      	movs	r0, r5
 80019a4:	0019      	movs	r1, r3
 80019a6:	b005      	add	sp, #20
 80019a8:	bcf0      	pop	{r4, r5, r6, r7}
 80019aa:	46bb      	mov	fp, r7
 80019ac:	46b2      	mov	sl, r6
 80019ae:	46a9      	mov	r9, r5
 80019b0:	46a0      	mov	r8, r4
 80019b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019b4:	2400      	movs	r4, #0
 80019b6:	2500      	movs	r5, #0
 80019b8:	4b5b      	ldr	r3, [pc, #364]	; (8001b28 <__aeabi_ddiv+0x244>)
 80019ba:	e7ed      	b.n	8001998 <__aeabi_ddiv+0xb4>
 80019bc:	464b      	mov	r3, r9
 80019be:	4323      	orrs	r3, r4
 80019c0:	4698      	mov	r8, r3
 80019c2:	d100      	bne.n	80019c6 <__aeabi_ddiv+0xe2>
 80019c4:	e089      	b.n	8001ada <__aeabi_ddiv+0x1f6>
 80019c6:	2c00      	cmp	r4, #0
 80019c8:	d100      	bne.n	80019cc <__aeabi_ddiv+0xe8>
 80019ca:	e1e0      	b.n	8001d8e <__aeabi_ddiv+0x4aa>
 80019cc:	0020      	movs	r0, r4
 80019ce:	f001 fb07 	bl	8002fe0 <__clzsi2>
 80019d2:	0001      	movs	r1, r0
 80019d4:	0002      	movs	r2, r0
 80019d6:	390b      	subs	r1, #11
 80019d8:	231d      	movs	r3, #29
 80019da:	1a5b      	subs	r3, r3, r1
 80019dc:	4649      	mov	r1, r9
 80019de:	0010      	movs	r0, r2
 80019e0:	40d9      	lsrs	r1, r3
 80019e2:	3808      	subs	r0, #8
 80019e4:	4084      	lsls	r4, r0
 80019e6:	000b      	movs	r3, r1
 80019e8:	464d      	mov	r5, r9
 80019ea:	4323      	orrs	r3, r4
 80019ec:	4698      	mov	r8, r3
 80019ee:	4085      	lsls	r5, r0
 80019f0:	4851      	ldr	r0, [pc, #324]	; (8001b38 <__aeabi_ddiv+0x254>)
 80019f2:	033c      	lsls	r4, r7, #12
 80019f4:	1a83      	subs	r3, r0, r2
 80019f6:	469b      	mov	fp, r3
 80019f8:	2300      	movs	r3, #0
 80019fa:	4699      	mov	r9, r3
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	007b      	lsls	r3, r7, #1
 8001a00:	4650      	mov	r0, sl
 8001a02:	0b24      	lsrs	r4, r4, #12
 8001a04:	0d5b      	lsrs	r3, r3, #21
 8001a06:	0fff      	lsrs	r7, r7, #31
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d197      	bne.n	800193c <__aeabi_ddiv+0x58>
 8001a0c:	4652      	mov	r2, sl
 8001a0e:	4322      	orrs	r2, r4
 8001a10:	d055      	beq.n	8001abe <__aeabi_ddiv+0x1da>
 8001a12:	2c00      	cmp	r4, #0
 8001a14:	d100      	bne.n	8001a18 <__aeabi_ddiv+0x134>
 8001a16:	e1ca      	b.n	8001dae <__aeabi_ddiv+0x4ca>
 8001a18:	0020      	movs	r0, r4
 8001a1a:	f001 fae1 	bl	8002fe0 <__clzsi2>
 8001a1e:	0002      	movs	r2, r0
 8001a20:	3a0b      	subs	r2, #11
 8001a22:	231d      	movs	r3, #29
 8001a24:	0001      	movs	r1, r0
 8001a26:	1a9b      	subs	r3, r3, r2
 8001a28:	4652      	mov	r2, sl
 8001a2a:	3908      	subs	r1, #8
 8001a2c:	40da      	lsrs	r2, r3
 8001a2e:	408c      	lsls	r4, r1
 8001a30:	4314      	orrs	r4, r2
 8001a32:	4652      	mov	r2, sl
 8001a34:	408a      	lsls	r2, r1
 8001a36:	4b41      	ldr	r3, [pc, #260]	; (8001b3c <__aeabi_ddiv+0x258>)
 8001a38:	4458      	add	r0, fp
 8001a3a:	469b      	mov	fp, r3
 8001a3c:	4483      	add	fp, r0
 8001a3e:	2000      	movs	r0, #0
 8001a40:	e78d      	b.n	800195e <__aeabi_ddiv+0x7a>
 8001a42:	464b      	mov	r3, r9
 8001a44:	4323      	orrs	r3, r4
 8001a46:	4698      	mov	r8, r3
 8001a48:	d140      	bne.n	8001acc <__aeabi_ddiv+0x1e8>
 8001a4a:	2308      	movs	r3, #8
 8001a4c:	4699      	mov	r9, r3
 8001a4e:	3b06      	subs	r3, #6
 8001a50:	2500      	movs	r5, #0
 8001a52:	4683      	mov	fp, r0
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	e769      	b.n	800192c <__aeabi_ddiv+0x48>
 8001a58:	46b2      	mov	sl, r6
 8001a5a:	9b00      	ldr	r3, [sp, #0]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d0a9      	beq.n	80019b4 <__aeabi_ddiv+0xd0>
 8001a60:	2b03      	cmp	r3, #3
 8001a62:	d100      	bne.n	8001a66 <__aeabi_ddiv+0x182>
 8001a64:	e211      	b.n	8001e8a <__aeabi_ddiv+0x5a6>
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d093      	beq.n	8001992 <__aeabi_ddiv+0xae>
 8001a6a:	4a35      	ldr	r2, [pc, #212]	; (8001b40 <__aeabi_ddiv+0x25c>)
 8001a6c:	445a      	add	r2, fp
 8001a6e:	2a00      	cmp	r2, #0
 8001a70:	dc00      	bgt.n	8001a74 <__aeabi_ddiv+0x190>
 8001a72:	e13c      	b.n	8001cee <__aeabi_ddiv+0x40a>
 8001a74:	076b      	lsls	r3, r5, #29
 8001a76:	d000      	beq.n	8001a7a <__aeabi_ddiv+0x196>
 8001a78:	e1a7      	b.n	8001dca <__aeabi_ddiv+0x4e6>
 8001a7a:	08ed      	lsrs	r5, r5, #3
 8001a7c:	4643      	mov	r3, r8
 8001a7e:	01db      	lsls	r3, r3, #7
 8001a80:	d506      	bpl.n	8001a90 <__aeabi_ddiv+0x1ac>
 8001a82:	4642      	mov	r2, r8
 8001a84:	4b2f      	ldr	r3, [pc, #188]	; (8001b44 <__aeabi_ddiv+0x260>)
 8001a86:	401a      	ands	r2, r3
 8001a88:	4690      	mov	r8, r2
 8001a8a:	2280      	movs	r2, #128	; 0x80
 8001a8c:	00d2      	lsls	r2, r2, #3
 8001a8e:	445a      	add	r2, fp
 8001a90:	4b2d      	ldr	r3, [pc, #180]	; (8001b48 <__aeabi_ddiv+0x264>)
 8001a92:	429a      	cmp	r2, r3
 8001a94:	dc8e      	bgt.n	80019b4 <__aeabi_ddiv+0xd0>
 8001a96:	4643      	mov	r3, r8
 8001a98:	0552      	lsls	r2, r2, #21
 8001a9a:	0758      	lsls	r0, r3, #29
 8001a9c:	025c      	lsls	r4, r3, #9
 8001a9e:	4305      	orrs	r5, r0
 8001aa0:	0b24      	lsrs	r4, r4, #12
 8001aa2:	0d53      	lsrs	r3, r2, #21
 8001aa4:	e778      	b.n	8001998 <__aeabi_ddiv+0xb4>
 8001aa6:	46ba      	mov	sl, r7
 8001aa8:	46a0      	mov	r8, r4
 8001aaa:	0015      	movs	r5, r2
 8001aac:	9000      	str	r0, [sp, #0]
 8001aae:	e7d4      	b.n	8001a5a <__aeabi_ddiv+0x176>
 8001ab0:	464a      	mov	r2, r9
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	4691      	mov	r9, r2
 8001ab8:	2003      	movs	r0, #3
 8001aba:	4652      	mov	r2, sl
 8001abc:	e74f      	b.n	800195e <__aeabi_ddiv+0x7a>
 8001abe:	4649      	mov	r1, r9
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	4319      	orrs	r1, r3
 8001ac4:	4689      	mov	r9, r1
 8001ac6:	2400      	movs	r4, #0
 8001ac8:	2001      	movs	r0, #1
 8001aca:	e748      	b.n	800195e <__aeabi_ddiv+0x7a>
 8001acc:	230c      	movs	r3, #12
 8001ace:	4699      	mov	r9, r3
 8001ad0:	3b09      	subs	r3, #9
 8001ad2:	46a0      	mov	r8, r4
 8001ad4:	4683      	mov	fp, r0
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	e728      	b.n	800192c <__aeabi_ddiv+0x48>
 8001ada:	2304      	movs	r3, #4
 8001adc:	4699      	mov	r9, r3
 8001ade:	2300      	movs	r3, #0
 8001ae0:	469b      	mov	fp, r3
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	2500      	movs	r5, #0
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	e720      	b.n	800192c <__aeabi_ddiv+0x48>
 8001aea:	2300      	movs	r3, #0
 8001aec:	2480      	movs	r4, #128	; 0x80
 8001aee:	469a      	mov	sl, r3
 8001af0:	2500      	movs	r5, #0
 8001af2:	4b0d      	ldr	r3, [pc, #52]	; (8001b28 <__aeabi_ddiv+0x244>)
 8001af4:	0324      	lsls	r4, r4, #12
 8001af6:	e74f      	b.n	8001998 <__aeabi_ddiv+0xb4>
 8001af8:	2380      	movs	r3, #128	; 0x80
 8001afa:	4641      	mov	r1, r8
 8001afc:	031b      	lsls	r3, r3, #12
 8001afe:	4219      	tst	r1, r3
 8001b00:	d008      	beq.n	8001b14 <__aeabi_ddiv+0x230>
 8001b02:	421c      	tst	r4, r3
 8001b04:	d106      	bne.n	8001b14 <__aeabi_ddiv+0x230>
 8001b06:	431c      	orrs	r4, r3
 8001b08:	0324      	lsls	r4, r4, #12
 8001b0a:	46ba      	mov	sl, r7
 8001b0c:	0015      	movs	r5, r2
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <__aeabi_ddiv+0x244>)
 8001b10:	0b24      	lsrs	r4, r4, #12
 8001b12:	e741      	b.n	8001998 <__aeabi_ddiv+0xb4>
 8001b14:	2480      	movs	r4, #128	; 0x80
 8001b16:	4643      	mov	r3, r8
 8001b18:	0324      	lsls	r4, r4, #12
 8001b1a:	431c      	orrs	r4, r3
 8001b1c:	0324      	lsls	r4, r4, #12
 8001b1e:	46b2      	mov	sl, r6
 8001b20:	4b01      	ldr	r3, [pc, #4]	; (8001b28 <__aeabi_ddiv+0x244>)
 8001b22:	0b24      	lsrs	r4, r4, #12
 8001b24:	e738      	b.n	8001998 <__aeabi_ddiv+0xb4>
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	000007ff 	.word	0x000007ff
 8001b2c:	fffffc01 	.word	0xfffffc01
 8001b30:	0800ae58 	.word	0x0800ae58
 8001b34:	fffff801 	.word	0xfffff801
 8001b38:	fffffc0d 	.word	0xfffffc0d
 8001b3c:	000003f3 	.word	0x000003f3
 8001b40:	000003ff 	.word	0x000003ff
 8001b44:	feffffff 	.word	0xfeffffff
 8001b48:	000007fe 	.word	0x000007fe
 8001b4c:	4544      	cmp	r4, r8
 8001b4e:	d200      	bcs.n	8001b52 <__aeabi_ddiv+0x26e>
 8001b50:	e116      	b.n	8001d80 <__aeabi_ddiv+0x49c>
 8001b52:	d100      	bne.n	8001b56 <__aeabi_ddiv+0x272>
 8001b54:	e111      	b.n	8001d7a <__aeabi_ddiv+0x496>
 8001b56:	2301      	movs	r3, #1
 8001b58:	425b      	negs	r3, r3
 8001b5a:	469c      	mov	ip, r3
 8001b5c:	002e      	movs	r6, r5
 8001b5e:	4640      	mov	r0, r8
 8001b60:	2500      	movs	r5, #0
 8001b62:	44e3      	add	fp, ip
 8001b64:	0223      	lsls	r3, r4, #8
 8001b66:	0e14      	lsrs	r4, r2, #24
 8001b68:	431c      	orrs	r4, r3
 8001b6a:	0c1b      	lsrs	r3, r3, #16
 8001b6c:	4699      	mov	r9, r3
 8001b6e:	0423      	lsls	r3, r4, #16
 8001b70:	0c1f      	lsrs	r7, r3, #16
 8001b72:	0212      	lsls	r2, r2, #8
 8001b74:	4649      	mov	r1, r9
 8001b76:	9200      	str	r2, [sp, #0]
 8001b78:	9701      	str	r7, [sp, #4]
 8001b7a:	f7fe fb67 	bl	800024c <__aeabi_uidivmod>
 8001b7e:	0002      	movs	r2, r0
 8001b80:	437a      	muls	r2, r7
 8001b82:	040b      	lsls	r3, r1, #16
 8001b84:	0c31      	lsrs	r1, r6, #16
 8001b86:	4680      	mov	r8, r0
 8001b88:	4319      	orrs	r1, r3
 8001b8a:	428a      	cmp	r2, r1
 8001b8c:	d90b      	bls.n	8001ba6 <__aeabi_ddiv+0x2c2>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	425b      	negs	r3, r3
 8001b92:	469c      	mov	ip, r3
 8001b94:	1909      	adds	r1, r1, r4
 8001b96:	44e0      	add	r8, ip
 8001b98:	428c      	cmp	r4, r1
 8001b9a:	d804      	bhi.n	8001ba6 <__aeabi_ddiv+0x2c2>
 8001b9c:	428a      	cmp	r2, r1
 8001b9e:	d902      	bls.n	8001ba6 <__aeabi_ddiv+0x2c2>
 8001ba0:	1e83      	subs	r3, r0, #2
 8001ba2:	4698      	mov	r8, r3
 8001ba4:	1909      	adds	r1, r1, r4
 8001ba6:	1a88      	subs	r0, r1, r2
 8001ba8:	4649      	mov	r1, r9
 8001baa:	f7fe fb4f 	bl	800024c <__aeabi_uidivmod>
 8001bae:	0409      	lsls	r1, r1, #16
 8001bb0:	468c      	mov	ip, r1
 8001bb2:	0431      	lsls	r1, r6, #16
 8001bb4:	4666      	mov	r6, ip
 8001bb6:	9a01      	ldr	r2, [sp, #4]
 8001bb8:	0c09      	lsrs	r1, r1, #16
 8001bba:	4342      	muls	r2, r0
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	4331      	orrs	r1, r6
 8001bc0:	428a      	cmp	r2, r1
 8001bc2:	d904      	bls.n	8001bce <__aeabi_ddiv+0x2ea>
 8001bc4:	1909      	adds	r1, r1, r4
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	428c      	cmp	r4, r1
 8001bca:	d800      	bhi.n	8001bce <__aeabi_ddiv+0x2ea>
 8001bcc:	e111      	b.n	8001df2 <__aeabi_ddiv+0x50e>
 8001bce:	1a89      	subs	r1, r1, r2
 8001bd0:	4642      	mov	r2, r8
 8001bd2:	9e00      	ldr	r6, [sp, #0]
 8001bd4:	0412      	lsls	r2, r2, #16
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	0c33      	lsrs	r3, r6, #16
 8001bda:	001f      	movs	r7, r3
 8001bdc:	0c10      	lsrs	r0, r2, #16
 8001bde:	4690      	mov	r8, r2
 8001be0:	9302      	str	r3, [sp, #8]
 8001be2:	0413      	lsls	r3, r2, #16
 8001be4:	0432      	lsls	r2, r6, #16
 8001be6:	0c16      	lsrs	r6, r2, #16
 8001be8:	0032      	movs	r2, r6
 8001bea:	0c1b      	lsrs	r3, r3, #16
 8001bec:	435a      	muls	r2, r3
 8001bee:	9603      	str	r6, [sp, #12]
 8001bf0:	437b      	muls	r3, r7
 8001bf2:	4346      	muls	r6, r0
 8001bf4:	4378      	muls	r0, r7
 8001bf6:	0c17      	lsrs	r7, r2, #16
 8001bf8:	46bc      	mov	ip, r7
 8001bfa:	199b      	adds	r3, r3, r6
 8001bfc:	4463      	add	r3, ip
 8001bfe:	429e      	cmp	r6, r3
 8001c00:	d903      	bls.n	8001c0a <__aeabi_ddiv+0x326>
 8001c02:	2680      	movs	r6, #128	; 0x80
 8001c04:	0276      	lsls	r6, r6, #9
 8001c06:	46b4      	mov	ip, r6
 8001c08:	4460      	add	r0, ip
 8001c0a:	0c1e      	lsrs	r6, r3, #16
 8001c0c:	1830      	adds	r0, r6, r0
 8001c0e:	0416      	lsls	r6, r2, #16
 8001c10:	041b      	lsls	r3, r3, #16
 8001c12:	0c36      	lsrs	r6, r6, #16
 8001c14:	199e      	adds	r6, r3, r6
 8001c16:	4281      	cmp	r1, r0
 8001c18:	d200      	bcs.n	8001c1c <__aeabi_ddiv+0x338>
 8001c1a:	e09c      	b.n	8001d56 <__aeabi_ddiv+0x472>
 8001c1c:	d100      	bne.n	8001c20 <__aeabi_ddiv+0x33c>
 8001c1e:	e097      	b.n	8001d50 <__aeabi_ddiv+0x46c>
 8001c20:	1bae      	subs	r6, r5, r6
 8001c22:	1a09      	subs	r1, r1, r0
 8001c24:	42b5      	cmp	r5, r6
 8001c26:	4180      	sbcs	r0, r0
 8001c28:	4240      	negs	r0, r0
 8001c2a:	1a08      	subs	r0, r1, r0
 8001c2c:	4284      	cmp	r4, r0
 8001c2e:	d100      	bne.n	8001c32 <__aeabi_ddiv+0x34e>
 8001c30:	e111      	b.n	8001e56 <__aeabi_ddiv+0x572>
 8001c32:	4649      	mov	r1, r9
 8001c34:	f7fe fb0a 	bl	800024c <__aeabi_uidivmod>
 8001c38:	9a01      	ldr	r2, [sp, #4]
 8001c3a:	040b      	lsls	r3, r1, #16
 8001c3c:	4342      	muls	r2, r0
 8001c3e:	0c31      	lsrs	r1, r6, #16
 8001c40:	0005      	movs	r5, r0
 8001c42:	4319      	orrs	r1, r3
 8001c44:	428a      	cmp	r2, r1
 8001c46:	d907      	bls.n	8001c58 <__aeabi_ddiv+0x374>
 8001c48:	1909      	adds	r1, r1, r4
 8001c4a:	3d01      	subs	r5, #1
 8001c4c:	428c      	cmp	r4, r1
 8001c4e:	d803      	bhi.n	8001c58 <__aeabi_ddiv+0x374>
 8001c50:	428a      	cmp	r2, r1
 8001c52:	d901      	bls.n	8001c58 <__aeabi_ddiv+0x374>
 8001c54:	1e85      	subs	r5, r0, #2
 8001c56:	1909      	adds	r1, r1, r4
 8001c58:	1a88      	subs	r0, r1, r2
 8001c5a:	4649      	mov	r1, r9
 8001c5c:	f7fe faf6 	bl	800024c <__aeabi_uidivmod>
 8001c60:	0409      	lsls	r1, r1, #16
 8001c62:	468c      	mov	ip, r1
 8001c64:	0431      	lsls	r1, r6, #16
 8001c66:	4666      	mov	r6, ip
 8001c68:	9a01      	ldr	r2, [sp, #4]
 8001c6a:	0c09      	lsrs	r1, r1, #16
 8001c6c:	4342      	muls	r2, r0
 8001c6e:	0003      	movs	r3, r0
 8001c70:	4331      	orrs	r1, r6
 8001c72:	428a      	cmp	r2, r1
 8001c74:	d907      	bls.n	8001c86 <__aeabi_ddiv+0x3a2>
 8001c76:	1909      	adds	r1, r1, r4
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	428c      	cmp	r4, r1
 8001c7c:	d803      	bhi.n	8001c86 <__aeabi_ddiv+0x3a2>
 8001c7e:	428a      	cmp	r2, r1
 8001c80:	d901      	bls.n	8001c86 <__aeabi_ddiv+0x3a2>
 8001c82:	1e83      	subs	r3, r0, #2
 8001c84:	1909      	adds	r1, r1, r4
 8001c86:	9e03      	ldr	r6, [sp, #12]
 8001c88:	1a89      	subs	r1, r1, r2
 8001c8a:	0032      	movs	r2, r6
 8001c8c:	042d      	lsls	r5, r5, #16
 8001c8e:	431d      	orrs	r5, r3
 8001c90:	9f02      	ldr	r7, [sp, #8]
 8001c92:	042b      	lsls	r3, r5, #16
 8001c94:	0c1b      	lsrs	r3, r3, #16
 8001c96:	435a      	muls	r2, r3
 8001c98:	437b      	muls	r3, r7
 8001c9a:	469c      	mov	ip, r3
 8001c9c:	0c28      	lsrs	r0, r5, #16
 8001c9e:	4346      	muls	r6, r0
 8001ca0:	0c13      	lsrs	r3, r2, #16
 8001ca2:	44b4      	add	ip, r6
 8001ca4:	4463      	add	r3, ip
 8001ca6:	4378      	muls	r0, r7
 8001ca8:	429e      	cmp	r6, r3
 8001caa:	d903      	bls.n	8001cb4 <__aeabi_ddiv+0x3d0>
 8001cac:	2680      	movs	r6, #128	; 0x80
 8001cae:	0276      	lsls	r6, r6, #9
 8001cb0:	46b4      	mov	ip, r6
 8001cb2:	4460      	add	r0, ip
 8001cb4:	0c1e      	lsrs	r6, r3, #16
 8001cb6:	0412      	lsls	r2, r2, #16
 8001cb8:	041b      	lsls	r3, r3, #16
 8001cba:	0c12      	lsrs	r2, r2, #16
 8001cbc:	1830      	adds	r0, r6, r0
 8001cbe:	189b      	adds	r3, r3, r2
 8001cc0:	4281      	cmp	r1, r0
 8001cc2:	d306      	bcc.n	8001cd2 <__aeabi_ddiv+0x3ee>
 8001cc4:	d002      	beq.n	8001ccc <__aeabi_ddiv+0x3e8>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	431d      	orrs	r5, r3
 8001cca:	e6ce      	b.n	8001a6a <__aeabi_ddiv+0x186>
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d100      	bne.n	8001cd2 <__aeabi_ddiv+0x3ee>
 8001cd0:	e6cb      	b.n	8001a6a <__aeabi_ddiv+0x186>
 8001cd2:	1861      	adds	r1, r4, r1
 8001cd4:	1e6e      	subs	r6, r5, #1
 8001cd6:	42a1      	cmp	r1, r4
 8001cd8:	d200      	bcs.n	8001cdc <__aeabi_ddiv+0x3f8>
 8001cda:	e0a4      	b.n	8001e26 <__aeabi_ddiv+0x542>
 8001cdc:	4281      	cmp	r1, r0
 8001cde:	d200      	bcs.n	8001ce2 <__aeabi_ddiv+0x3fe>
 8001ce0:	e0c9      	b.n	8001e76 <__aeabi_ddiv+0x592>
 8001ce2:	d100      	bne.n	8001ce6 <__aeabi_ddiv+0x402>
 8001ce4:	e0d9      	b.n	8001e9a <__aeabi_ddiv+0x5b6>
 8001ce6:	0035      	movs	r5, r6
 8001ce8:	e7ed      	b.n	8001cc6 <__aeabi_ddiv+0x3e2>
 8001cea:	2501      	movs	r5, #1
 8001cec:	426d      	negs	r5, r5
 8001cee:	2101      	movs	r1, #1
 8001cf0:	1a89      	subs	r1, r1, r2
 8001cf2:	2938      	cmp	r1, #56	; 0x38
 8001cf4:	dd00      	ble.n	8001cf8 <__aeabi_ddiv+0x414>
 8001cf6:	e64c      	b.n	8001992 <__aeabi_ddiv+0xae>
 8001cf8:	291f      	cmp	r1, #31
 8001cfa:	dc00      	bgt.n	8001cfe <__aeabi_ddiv+0x41a>
 8001cfc:	e07f      	b.n	8001dfe <__aeabi_ddiv+0x51a>
 8001cfe:	231f      	movs	r3, #31
 8001d00:	425b      	negs	r3, r3
 8001d02:	1a9a      	subs	r2, r3, r2
 8001d04:	4643      	mov	r3, r8
 8001d06:	40d3      	lsrs	r3, r2
 8001d08:	2920      	cmp	r1, #32
 8001d0a:	d004      	beq.n	8001d16 <__aeabi_ddiv+0x432>
 8001d0c:	4644      	mov	r4, r8
 8001d0e:	4a65      	ldr	r2, [pc, #404]	; (8001ea4 <__aeabi_ddiv+0x5c0>)
 8001d10:	445a      	add	r2, fp
 8001d12:	4094      	lsls	r4, r2
 8001d14:	4325      	orrs	r5, r4
 8001d16:	1e6a      	subs	r2, r5, #1
 8001d18:	4195      	sbcs	r5, r2
 8001d1a:	2207      	movs	r2, #7
 8001d1c:	432b      	orrs	r3, r5
 8001d1e:	0015      	movs	r5, r2
 8001d20:	2400      	movs	r4, #0
 8001d22:	401d      	ands	r5, r3
 8001d24:	421a      	tst	r2, r3
 8001d26:	d100      	bne.n	8001d2a <__aeabi_ddiv+0x446>
 8001d28:	e0a1      	b.n	8001e6e <__aeabi_ddiv+0x58a>
 8001d2a:	220f      	movs	r2, #15
 8001d2c:	2400      	movs	r4, #0
 8001d2e:	401a      	ands	r2, r3
 8001d30:	2a04      	cmp	r2, #4
 8001d32:	d100      	bne.n	8001d36 <__aeabi_ddiv+0x452>
 8001d34:	e098      	b.n	8001e68 <__aeabi_ddiv+0x584>
 8001d36:	1d1a      	adds	r2, r3, #4
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	419b      	sbcs	r3, r3
 8001d3c:	425b      	negs	r3, r3
 8001d3e:	18e4      	adds	r4, r4, r3
 8001d40:	0013      	movs	r3, r2
 8001d42:	0222      	lsls	r2, r4, #8
 8001d44:	d400      	bmi.n	8001d48 <__aeabi_ddiv+0x464>
 8001d46:	e08f      	b.n	8001e68 <__aeabi_ddiv+0x584>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	2400      	movs	r4, #0
 8001d4c:	2500      	movs	r5, #0
 8001d4e:	e623      	b.n	8001998 <__aeabi_ddiv+0xb4>
 8001d50:	42b5      	cmp	r5, r6
 8001d52:	d300      	bcc.n	8001d56 <__aeabi_ddiv+0x472>
 8001d54:	e764      	b.n	8001c20 <__aeabi_ddiv+0x33c>
 8001d56:	4643      	mov	r3, r8
 8001d58:	1e5a      	subs	r2, r3, #1
 8001d5a:	9b00      	ldr	r3, [sp, #0]
 8001d5c:	469c      	mov	ip, r3
 8001d5e:	4465      	add	r5, ip
 8001d60:	001f      	movs	r7, r3
 8001d62:	429d      	cmp	r5, r3
 8001d64:	419b      	sbcs	r3, r3
 8001d66:	425b      	negs	r3, r3
 8001d68:	191b      	adds	r3, r3, r4
 8001d6a:	18c9      	adds	r1, r1, r3
 8001d6c:	428c      	cmp	r4, r1
 8001d6e:	d23a      	bcs.n	8001de6 <__aeabi_ddiv+0x502>
 8001d70:	4288      	cmp	r0, r1
 8001d72:	d863      	bhi.n	8001e3c <__aeabi_ddiv+0x558>
 8001d74:	d060      	beq.n	8001e38 <__aeabi_ddiv+0x554>
 8001d76:	4690      	mov	r8, r2
 8001d78:	e752      	b.n	8001c20 <__aeabi_ddiv+0x33c>
 8001d7a:	42aa      	cmp	r2, r5
 8001d7c:	d900      	bls.n	8001d80 <__aeabi_ddiv+0x49c>
 8001d7e:	e6ea      	b.n	8001b56 <__aeabi_ddiv+0x272>
 8001d80:	4643      	mov	r3, r8
 8001d82:	07de      	lsls	r6, r3, #31
 8001d84:	0858      	lsrs	r0, r3, #1
 8001d86:	086b      	lsrs	r3, r5, #1
 8001d88:	431e      	orrs	r6, r3
 8001d8a:	07ed      	lsls	r5, r5, #31
 8001d8c:	e6ea      	b.n	8001b64 <__aeabi_ddiv+0x280>
 8001d8e:	4648      	mov	r0, r9
 8001d90:	f001 f926 	bl	8002fe0 <__clzsi2>
 8001d94:	0001      	movs	r1, r0
 8001d96:	0002      	movs	r2, r0
 8001d98:	3115      	adds	r1, #21
 8001d9a:	3220      	adds	r2, #32
 8001d9c:	291c      	cmp	r1, #28
 8001d9e:	dc00      	bgt.n	8001da2 <__aeabi_ddiv+0x4be>
 8001da0:	e61a      	b.n	80019d8 <__aeabi_ddiv+0xf4>
 8001da2:	464b      	mov	r3, r9
 8001da4:	3808      	subs	r0, #8
 8001da6:	4083      	lsls	r3, r0
 8001da8:	2500      	movs	r5, #0
 8001daa:	4698      	mov	r8, r3
 8001dac:	e620      	b.n	80019f0 <__aeabi_ddiv+0x10c>
 8001dae:	f001 f917 	bl	8002fe0 <__clzsi2>
 8001db2:	0003      	movs	r3, r0
 8001db4:	001a      	movs	r2, r3
 8001db6:	3215      	adds	r2, #21
 8001db8:	3020      	adds	r0, #32
 8001dba:	2a1c      	cmp	r2, #28
 8001dbc:	dc00      	bgt.n	8001dc0 <__aeabi_ddiv+0x4dc>
 8001dbe:	e630      	b.n	8001a22 <__aeabi_ddiv+0x13e>
 8001dc0:	4654      	mov	r4, sl
 8001dc2:	3b08      	subs	r3, #8
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	409c      	lsls	r4, r3
 8001dc8:	e635      	b.n	8001a36 <__aeabi_ddiv+0x152>
 8001dca:	230f      	movs	r3, #15
 8001dcc:	402b      	ands	r3, r5
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_ddiv+0x4f0>
 8001dd2:	e652      	b.n	8001a7a <__aeabi_ddiv+0x196>
 8001dd4:	2305      	movs	r3, #5
 8001dd6:	425b      	negs	r3, r3
 8001dd8:	42ab      	cmp	r3, r5
 8001dda:	419b      	sbcs	r3, r3
 8001ddc:	3504      	adds	r5, #4
 8001dde:	425b      	negs	r3, r3
 8001de0:	08ed      	lsrs	r5, r5, #3
 8001de2:	4498      	add	r8, r3
 8001de4:	e64a      	b.n	8001a7c <__aeabi_ddiv+0x198>
 8001de6:	428c      	cmp	r4, r1
 8001de8:	d1c5      	bne.n	8001d76 <__aeabi_ddiv+0x492>
 8001dea:	42af      	cmp	r7, r5
 8001dec:	d9c0      	bls.n	8001d70 <__aeabi_ddiv+0x48c>
 8001dee:	4690      	mov	r8, r2
 8001df0:	e716      	b.n	8001c20 <__aeabi_ddiv+0x33c>
 8001df2:	428a      	cmp	r2, r1
 8001df4:	d800      	bhi.n	8001df8 <__aeabi_ddiv+0x514>
 8001df6:	e6ea      	b.n	8001bce <__aeabi_ddiv+0x2ea>
 8001df8:	1e83      	subs	r3, r0, #2
 8001dfa:	1909      	adds	r1, r1, r4
 8001dfc:	e6e7      	b.n	8001bce <__aeabi_ddiv+0x2ea>
 8001dfe:	4a2a      	ldr	r2, [pc, #168]	; (8001ea8 <__aeabi_ddiv+0x5c4>)
 8001e00:	0028      	movs	r0, r5
 8001e02:	445a      	add	r2, fp
 8001e04:	4643      	mov	r3, r8
 8001e06:	4095      	lsls	r5, r2
 8001e08:	4093      	lsls	r3, r2
 8001e0a:	40c8      	lsrs	r0, r1
 8001e0c:	1e6a      	subs	r2, r5, #1
 8001e0e:	4195      	sbcs	r5, r2
 8001e10:	4644      	mov	r4, r8
 8001e12:	4303      	orrs	r3, r0
 8001e14:	432b      	orrs	r3, r5
 8001e16:	40cc      	lsrs	r4, r1
 8001e18:	075a      	lsls	r2, r3, #29
 8001e1a:	d092      	beq.n	8001d42 <__aeabi_ddiv+0x45e>
 8001e1c:	220f      	movs	r2, #15
 8001e1e:	401a      	ands	r2, r3
 8001e20:	2a04      	cmp	r2, #4
 8001e22:	d188      	bne.n	8001d36 <__aeabi_ddiv+0x452>
 8001e24:	e78d      	b.n	8001d42 <__aeabi_ddiv+0x45e>
 8001e26:	0035      	movs	r5, r6
 8001e28:	4281      	cmp	r1, r0
 8001e2a:	d000      	beq.n	8001e2e <__aeabi_ddiv+0x54a>
 8001e2c:	e74b      	b.n	8001cc6 <__aeabi_ddiv+0x3e2>
 8001e2e:	9a00      	ldr	r2, [sp, #0]
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d000      	beq.n	8001e36 <__aeabi_ddiv+0x552>
 8001e34:	e747      	b.n	8001cc6 <__aeabi_ddiv+0x3e2>
 8001e36:	e618      	b.n	8001a6a <__aeabi_ddiv+0x186>
 8001e38:	42ae      	cmp	r6, r5
 8001e3a:	d99c      	bls.n	8001d76 <__aeabi_ddiv+0x492>
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	425b      	negs	r3, r3
 8001e40:	469c      	mov	ip, r3
 8001e42:	9b00      	ldr	r3, [sp, #0]
 8001e44:	44e0      	add	r8, ip
 8001e46:	469c      	mov	ip, r3
 8001e48:	4465      	add	r5, ip
 8001e4a:	429d      	cmp	r5, r3
 8001e4c:	419b      	sbcs	r3, r3
 8001e4e:	425b      	negs	r3, r3
 8001e50:	191b      	adds	r3, r3, r4
 8001e52:	18c9      	adds	r1, r1, r3
 8001e54:	e6e4      	b.n	8001c20 <__aeabi_ddiv+0x33c>
 8001e56:	4a15      	ldr	r2, [pc, #84]	; (8001eac <__aeabi_ddiv+0x5c8>)
 8001e58:	445a      	add	r2, fp
 8001e5a:	2a00      	cmp	r2, #0
 8001e5c:	dc00      	bgt.n	8001e60 <__aeabi_ddiv+0x57c>
 8001e5e:	e744      	b.n	8001cea <__aeabi_ddiv+0x406>
 8001e60:	2301      	movs	r3, #1
 8001e62:	2500      	movs	r5, #0
 8001e64:	4498      	add	r8, r3
 8001e66:	e609      	b.n	8001a7c <__aeabi_ddiv+0x198>
 8001e68:	0765      	lsls	r5, r4, #29
 8001e6a:	0264      	lsls	r4, r4, #9
 8001e6c:	0b24      	lsrs	r4, r4, #12
 8001e6e:	08db      	lsrs	r3, r3, #3
 8001e70:	431d      	orrs	r5, r3
 8001e72:	2300      	movs	r3, #0
 8001e74:	e590      	b.n	8001998 <__aeabi_ddiv+0xb4>
 8001e76:	9e00      	ldr	r6, [sp, #0]
 8001e78:	3d02      	subs	r5, #2
 8001e7a:	0072      	lsls	r2, r6, #1
 8001e7c:	42b2      	cmp	r2, r6
 8001e7e:	41bf      	sbcs	r7, r7
 8001e80:	427f      	negs	r7, r7
 8001e82:	193c      	adds	r4, r7, r4
 8001e84:	1909      	adds	r1, r1, r4
 8001e86:	9200      	str	r2, [sp, #0]
 8001e88:	e7ce      	b.n	8001e28 <__aeabi_ddiv+0x544>
 8001e8a:	2480      	movs	r4, #128	; 0x80
 8001e8c:	4643      	mov	r3, r8
 8001e8e:	0324      	lsls	r4, r4, #12
 8001e90:	431c      	orrs	r4, r3
 8001e92:	0324      	lsls	r4, r4, #12
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <__aeabi_ddiv+0x5cc>)
 8001e96:	0b24      	lsrs	r4, r4, #12
 8001e98:	e57e      	b.n	8001998 <__aeabi_ddiv+0xb4>
 8001e9a:	9a00      	ldr	r2, [sp, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d3ea      	bcc.n	8001e76 <__aeabi_ddiv+0x592>
 8001ea0:	0035      	movs	r5, r6
 8001ea2:	e7c4      	b.n	8001e2e <__aeabi_ddiv+0x54a>
 8001ea4:	0000043e 	.word	0x0000043e
 8001ea8:	0000041e 	.word	0x0000041e
 8001eac:	000003ff 	.word	0x000003ff
 8001eb0:	000007ff 	.word	0x000007ff

08001eb4 <__eqdf2>:
 8001eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eb6:	464f      	mov	r7, r9
 8001eb8:	4646      	mov	r6, r8
 8001eba:	46d6      	mov	lr, sl
 8001ebc:	4694      	mov	ip, r2
 8001ebe:	4691      	mov	r9, r2
 8001ec0:	031a      	lsls	r2, r3, #12
 8001ec2:	0b12      	lsrs	r2, r2, #12
 8001ec4:	4d18      	ldr	r5, [pc, #96]	; (8001f28 <__eqdf2+0x74>)
 8001ec6:	b5c0      	push	{r6, r7, lr}
 8001ec8:	004c      	lsls	r4, r1, #1
 8001eca:	030f      	lsls	r7, r1, #12
 8001ecc:	4692      	mov	sl, r2
 8001ece:	005a      	lsls	r2, r3, #1
 8001ed0:	0006      	movs	r6, r0
 8001ed2:	4680      	mov	r8, r0
 8001ed4:	0b3f      	lsrs	r7, r7, #12
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	0d64      	lsrs	r4, r4, #21
 8001eda:	0fc9      	lsrs	r1, r1, #31
 8001edc:	0d52      	lsrs	r2, r2, #21
 8001ede:	0fdb      	lsrs	r3, r3, #31
 8001ee0:	42ac      	cmp	r4, r5
 8001ee2:	d00a      	beq.n	8001efa <__eqdf2+0x46>
 8001ee4:	42aa      	cmp	r2, r5
 8001ee6:	d003      	beq.n	8001ef0 <__eqdf2+0x3c>
 8001ee8:	4294      	cmp	r4, r2
 8001eea:	d101      	bne.n	8001ef0 <__eqdf2+0x3c>
 8001eec:	4557      	cmp	r7, sl
 8001eee:	d00d      	beq.n	8001f0c <__eqdf2+0x58>
 8001ef0:	bce0      	pop	{r5, r6, r7}
 8001ef2:	46ba      	mov	sl, r7
 8001ef4:	46b1      	mov	r9, r6
 8001ef6:	46a8      	mov	r8, r5
 8001ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001efa:	003d      	movs	r5, r7
 8001efc:	4335      	orrs	r5, r6
 8001efe:	d1f7      	bne.n	8001ef0 <__eqdf2+0x3c>
 8001f00:	42a2      	cmp	r2, r4
 8001f02:	d1f5      	bne.n	8001ef0 <__eqdf2+0x3c>
 8001f04:	4652      	mov	r2, sl
 8001f06:	4665      	mov	r5, ip
 8001f08:	432a      	orrs	r2, r5
 8001f0a:	d1f1      	bne.n	8001ef0 <__eqdf2+0x3c>
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	45c8      	cmp	r8, r9
 8001f10:	d1ee      	bne.n	8001ef0 <__eqdf2+0x3c>
 8001f12:	4299      	cmp	r1, r3
 8001f14:	d006      	beq.n	8001f24 <__eqdf2+0x70>
 8001f16:	2c00      	cmp	r4, #0
 8001f18:	d1ea      	bne.n	8001ef0 <__eqdf2+0x3c>
 8001f1a:	433e      	orrs	r6, r7
 8001f1c:	0030      	movs	r0, r6
 8001f1e:	1e46      	subs	r6, r0, #1
 8001f20:	41b0      	sbcs	r0, r6
 8001f22:	e7e5      	b.n	8001ef0 <__eqdf2+0x3c>
 8001f24:	2000      	movs	r0, #0
 8001f26:	e7e3      	b.n	8001ef0 <__eqdf2+0x3c>
 8001f28:	000007ff 	.word	0x000007ff

08001f2c <__gedf2>:
 8001f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f2e:	464e      	mov	r6, r9
 8001f30:	4645      	mov	r5, r8
 8001f32:	4657      	mov	r7, sl
 8001f34:	46de      	mov	lr, fp
 8001f36:	0004      	movs	r4, r0
 8001f38:	0018      	movs	r0, r3
 8001f3a:	b5e0      	push	{r5, r6, r7, lr}
 8001f3c:	0016      	movs	r6, r2
 8001f3e:	031b      	lsls	r3, r3, #12
 8001f40:	0b1b      	lsrs	r3, r3, #12
 8001f42:	4d32      	ldr	r5, [pc, #200]	; (800200c <__gedf2+0xe0>)
 8001f44:	030f      	lsls	r7, r1, #12
 8001f46:	004a      	lsls	r2, r1, #1
 8001f48:	4699      	mov	r9, r3
 8001f4a:	0043      	lsls	r3, r0, #1
 8001f4c:	46a4      	mov	ip, r4
 8001f4e:	46b0      	mov	r8, r6
 8001f50:	0b3f      	lsrs	r7, r7, #12
 8001f52:	0d52      	lsrs	r2, r2, #21
 8001f54:	0fc9      	lsrs	r1, r1, #31
 8001f56:	0d5b      	lsrs	r3, r3, #21
 8001f58:	0fc0      	lsrs	r0, r0, #31
 8001f5a:	42aa      	cmp	r2, r5
 8001f5c:	d029      	beq.n	8001fb2 <__gedf2+0x86>
 8001f5e:	42ab      	cmp	r3, r5
 8001f60:	d018      	beq.n	8001f94 <__gedf2+0x68>
 8001f62:	2a00      	cmp	r2, #0
 8001f64:	d12a      	bne.n	8001fbc <__gedf2+0x90>
 8001f66:	433c      	orrs	r4, r7
 8001f68:	46a3      	mov	fp, r4
 8001f6a:	4265      	negs	r5, r4
 8001f6c:	4165      	adcs	r5, r4
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d102      	bne.n	8001f78 <__gedf2+0x4c>
 8001f72:	464c      	mov	r4, r9
 8001f74:	4326      	orrs	r6, r4
 8001f76:	d027      	beq.n	8001fc8 <__gedf2+0x9c>
 8001f78:	2d00      	cmp	r5, #0
 8001f7a:	d115      	bne.n	8001fa8 <__gedf2+0x7c>
 8001f7c:	4281      	cmp	r1, r0
 8001f7e:	d028      	beq.n	8001fd2 <__gedf2+0xa6>
 8001f80:	2002      	movs	r0, #2
 8001f82:	3901      	subs	r1, #1
 8001f84:	4008      	ands	r0, r1
 8001f86:	3801      	subs	r0, #1
 8001f88:	bcf0      	pop	{r4, r5, r6, r7}
 8001f8a:	46bb      	mov	fp, r7
 8001f8c:	46b2      	mov	sl, r6
 8001f8e:	46a9      	mov	r9, r5
 8001f90:	46a0      	mov	r8, r4
 8001f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f94:	464d      	mov	r5, r9
 8001f96:	432e      	orrs	r6, r5
 8001f98:	d12f      	bne.n	8001ffa <__gedf2+0xce>
 8001f9a:	2a00      	cmp	r2, #0
 8001f9c:	d1ee      	bne.n	8001f7c <__gedf2+0x50>
 8001f9e:	433c      	orrs	r4, r7
 8001fa0:	4265      	negs	r5, r4
 8001fa2:	4165      	adcs	r5, r4
 8001fa4:	2d00      	cmp	r5, #0
 8001fa6:	d0e9      	beq.n	8001f7c <__gedf2+0x50>
 8001fa8:	2800      	cmp	r0, #0
 8001faa:	d1ed      	bne.n	8001f88 <__gedf2+0x5c>
 8001fac:	2001      	movs	r0, #1
 8001fae:	4240      	negs	r0, r0
 8001fb0:	e7ea      	b.n	8001f88 <__gedf2+0x5c>
 8001fb2:	003d      	movs	r5, r7
 8001fb4:	4325      	orrs	r5, r4
 8001fb6:	d120      	bne.n	8001ffa <__gedf2+0xce>
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d0eb      	beq.n	8001f94 <__gedf2+0x68>
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1dd      	bne.n	8001f7c <__gedf2+0x50>
 8001fc0:	464c      	mov	r4, r9
 8001fc2:	4326      	orrs	r6, r4
 8001fc4:	d1da      	bne.n	8001f7c <__gedf2+0x50>
 8001fc6:	e7db      	b.n	8001f80 <__gedf2+0x54>
 8001fc8:	465b      	mov	r3, fp
 8001fca:	2000      	movs	r0, #0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0db      	beq.n	8001f88 <__gedf2+0x5c>
 8001fd0:	e7d6      	b.n	8001f80 <__gedf2+0x54>
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	dc0a      	bgt.n	8001fec <__gedf2+0xc0>
 8001fd6:	dbe7      	blt.n	8001fa8 <__gedf2+0x7c>
 8001fd8:	454f      	cmp	r7, r9
 8001fda:	d8d1      	bhi.n	8001f80 <__gedf2+0x54>
 8001fdc:	d010      	beq.n	8002000 <__gedf2+0xd4>
 8001fde:	2000      	movs	r0, #0
 8001fe0:	454f      	cmp	r7, r9
 8001fe2:	d2d1      	bcs.n	8001f88 <__gedf2+0x5c>
 8001fe4:	2900      	cmp	r1, #0
 8001fe6:	d0e1      	beq.n	8001fac <__gedf2+0x80>
 8001fe8:	0008      	movs	r0, r1
 8001fea:	e7cd      	b.n	8001f88 <__gedf2+0x5c>
 8001fec:	4243      	negs	r3, r0
 8001fee:	4158      	adcs	r0, r3
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	4240      	negs	r0, r0
 8001ff4:	4018      	ands	r0, r3
 8001ff6:	3801      	subs	r0, #1
 8001ff8:	e7c6      	b.n	8001f88 <__gedf2+0x5c>
 8001ffa:	2002      	movs	r0, #2
 8001ffc:	4240      	negs	r0, r0
 8001ffe:	e7c3      	b.n	8001f88 <__gedf2+0x5c>
 8002000:	45c4      	cmp	ip, r8
 8002002:	d8bd      	bhi.n	8001f80 <__gedf2+0x54>
 8002004:	2000      	movs	r0, #0
 8002006:	45c4      	cmp	ip, r8
 8002008:	d2be      	bcs.n	8001f88 <__gedf2+0x5c>
 800200a:	e7eb      	b.n	8001fe4 <__gedf2+0xb8>
 800200c:	000007ff 	.word	0x000007ff

08002010 <__ledf2>:
 8002010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002012:	464e      	mov	r6, r9
 8002014:	4645      	mov	r5, r8
 8002016:	4657      	mov	r7, sl
 8002018:	46de      	mov	lr, fp
 800201a:	0004      	movs	r4, r0
 800201c:	0018      	movs	r0, r3
 800201e:	b5e0      	push	{r5, r6, r7, lr}
 8002020:	0016      	movs	r6, r2
 8002022:	031b      	lsls	r3, r3, #12
 8002024:	0b1b      	lsrs	r3, r3, #12
 8002026:	4d31      	ldr	r5, [pc, #196]	; (80020ec <__ledf2+0xdc>)
 8002028:	030f      	lsls	r7, r1, #12
 800202a:	004a      	lsls	r2, r1, #1
 800202c:	4699      	mov	r9, r3
 800202e:	0043      	lsls	r3, r0, #1
 8002030:	46a4      	mov	ip, r4
 8002032:	46b0      	mov	r8, r6
 8002034:	0b3f      	lsrs	r7, r7, #12
 8002036:	0d52      	lsrs	r2, r2, #21
 8002038:	0fc9      	lsrs	r1, r1, #31
 800203a:	0d5b      	lsrs	r3, r3, #21
 800203c:	0fc0      	lsrs	r0, r0, #31
 800203e:	42aa      	cmp	r2, r5
 8002040:	d011      	beq.n	8002066 <__ledf2+0x56>
 8002042:	42ab      	cmp	r3, r5
 8002044:	d014      	beq.n	8002070 <__ledf2+0x60>
 8002046:	2a00      	cmp	r2, #0
 8002048:	d12f      	bne.n	80020aa <__ledf2+0x9a>
 800204a:	433c      	orrs	r4, r7
 800204c:	46a3      	mov	fp, r4
 800204e:	4265      	negs	r5, r4
 8002050:	4165      	adcs	r5, r4
 8002052:	2b00      	cmp	r3, #0
 8002054:	d114      	bne.n	8002080 <__ledf2+0x70>
 8002056:	464c      	mov	r4, r9
 8002058:	4326      	orrs	r6, r4
 800205a:	d111      	bne.n	8002080 <__ledf2+0x70>
 800205c:	465b      	mov	r3, fp
 800205e:	2000      	movs	r0, #0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d017      	beq.n	8002094 <__ledf2+0x84>
 8002064:	e010      	b.n	8002088 <__ledf2+0x78>
 8002066:	003d      	movs	r5, r7
 8002068:	4325      	orrs	r5, r4
 800206a:	d112      	bne.n	8002092 <__ledf2+0x82>
 800206c:	4293      	cmp	r3, r2
 800206e:	d11c      	bne.n	80020aa <__ledf2+0x9a>
 8002070:	464d      	mov	r5, r9
 8002072:	432e      	orrs	r6, r5
 8002074:	d10d      	bne.n	8002092 <__ledf2+0x82>
 8002076:	2a00      	cmp	r2, #0
 8002078:	d104      	bne.n	8002084 <__ledf2+0x74>
 800207a:	433c      	orrs	r4, r7
 800207c:	4265      	negs	r5, r4
 800207e:	4165      	adcs	r5, r4
 8002080:	2d00      	cmp	r5, #0
 8002082:	d10d      	bne.n	80020a0 <__ledf2+0x90>
 8002084:	4281      	cmp	r1, r0
 8002086:	d016      	beq.n	80020b6 <__ledf2+0xa6>
 8002088:	2002      	movs	r0, #2
 800208a:	3901      	subs	r1, #1
 800208c:	4008      	ands	r0, r1
 800208e:	3801      	subs	r0, #1
 8002090:	e000      	b.n	8002094 <__ledf2+0x84>
 8002092:	2002      	movs	r0, #2
 8002094:	bcf0      	pop	{r4, r5, r6, r7}
 8002096:	46bb      	mov	fp, r7
 8002098:	46b2      	mov	sl, r6
 800209a:	46a9      	mov	r9, r5
 800209c:	46a0      	mov	r8, r4
 800209e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020a0:	2800      	cmp	r0, #0
 80020a2:	d1f7      	bne.n	8002094 <__ledf2+0x84>
 80020a4:	2001      	movs	r0, #1
 80020a6:	4240      	negs	r0, r0
 80020a8:	e7f4      	b.n	8002094 <__ledf2+0x84>
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1ea      	bne.n	8002084 <__ledf2+0x74>
 80020ae:	464c      	mov	r4, r9
 80020b0:	4326      	orrs	r6, r4
 80020b2:	d1e7      	bne.n	8002084 <__ledf2+0x74>
 80020b4:	e7e8      	b.n	8002088 <__ledf2+0x78>
 80020b6:	429a      	cmp	r2, r3
 80020b8:	dd06      	ble.n	80020c8 <__ledf2+0xb8>
 80020ba:	4243      	negs	r3, r0
 80020bc:	4158      	adcs	r0, r3
 80020be:	2302      	movs	r3, #2
 80020c0:	4240      	negs	r0, r0
 80020c2:	4018      	ands	r0, r3
 80020c4:	3801      	subs	r0, #1
 80020c6:	e7e5      	b.n	8002094 <__ledf2+0x84>
 80020c8:	429a      	cmp	r2, r3
 80020ca:	dbe9      	blt.n	80020a0 <__ledf2+0x90>
 80020cc:	454f      	cmp	r7, r9
 80020ce:	d8db      	bhi.n	8002088 <__ledf2+0x78>
 80020d0:	d006      	beq.n	80020e0 <__ledf2+0xd0>
 80020d2:	2000      	movs	r0, #0
 80020d4:	454f      	cmp	r7, r9
 80020d6:	d2dd      	bcs.n	8002094 <__ledf2+0x84>
 80020d8:	2900      	cmp	r1, #0
 80020da:	d0e3      	beq.n	80020a4 <__ledf2+0x94>
 80020dc:	0008      	movs	r0, r1
 80020de:	e7d9      	b.n	8002094 <__ledf2+0x84>
 80020e0:	45c4      	cmp	ip, r8
 80020e2:	d8d1      	bhi.n	8002088 <__ledf2+0x78>
 80020e4:	2000      	movs	r0, #0
 80020e6:	45c4      	cmp	ip, r8
 80020e8:	d2d4      	bcs.n	8002094 <__ledf2+0x84>
 80020ea:	e7f5      	b.n	80020d8 <__ledf2+0xc8>
 80020ec:	000007ff 	.word	0x000007ff

080020f0 <__aeabi_dmul>:
 80020f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020f2:	4657      	mov	r7, sl
 80020f4:	464e      	mov	r6, r9
 80020f6:	4645      	mov	r5, r8
 80020f8:	46de      	mov	lr, fp
 80020fa:	b5e0      	push	{r5, r6, r7, lr}
 80020fc:	4698      	mov	r8, r3
 80020fe:	030c      	lsls	r4, r1, #12
 8002100:	004b      	lsls	r3, r1, #1
 8002102:	0006      	movs	r6, r0
 8002104:	4692      	mov	sl, r2
 8002106:	b087      	sub	sp, #28
 8002108:	0b24      	lsrs	r4, r4, #12
 800210a:	0d5b      	lsrs	r3, r3, #21
 800210c:	0fcf      	lsrs	r7, r1, #31
 800210e:	2b00      	cmp	r3, #0
 8002110:	d06c      	beq.n	80021ec <__aeabi_dmul+0xfc>
 8002112:	4add      	ldr	r2, [pc, #884]	; (8002488 <__aeabi_dmul+0x398>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d100      	bne.n	800211a <__aeabi_dmul+0x2a>
 8002118:	e086      	b.n	8002228 <__aeabi_dmul+0x138>
 800211a:	0f42      	lsrs	r2, r0, #29
 800211c:	00e4      	lsls	r4, r4, #3
 800211e:	4314      	orrs	r4, r2
 8002120:	2280      	movs	r2, #128	; 0x80
 8002122:	0412      	lsls	r2, r2, #16
 8002124:	4314      	orrs	r4, r2
 8002126:	4ad9      	ldr	r2, [pc, #868]	; (800248c <__aeabi_dmul+0x39c>)
 8002128:	00c5      	lsls	r5, r0, #3
 800212a:	4694      	mov	ip, r2
 800212c:	4463      	add	r3, ip
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	2300      	movs	r3, #0
 8002132:	4699      	mov	r9, r3
 8002134:	469b      	mov	fp, r3
 8002136:	4643      	mov	r3, r8
 8002138:	4642      	mov	r2, r8
 800213a:	031e      	lsls	r6, r3, #12
 800213c:	0fd2      	lsrs	r2, r2, #31
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4650      	mov	r0, sl
 8002142:	4690      	mov	r8, r2
 8002144:	0b36      	lsrs	r6, r6, #12
 8002146:	0d5b      	lsrs	r3, r3, #21
 8002148:	d100      	bne.n	800214c <__aeabi_dmul+0x5c>
 800214a:	e078      	b.n	800223e <__aeabi_dmul+0x14e>
 800214c:	4ace      	ldr	r2, [pc, #824]	; (8002488 <__aeabi_dmul+0x398>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d01d      	beq.n	800218e <__aeabi_dmul+0x9e>
 8002152:	49ce      	ldr	r1, [pc, #824]	; (800248c <__aeabi_dmul+0x39c>)
 8002154:	0f42      	lsrs	r2, r0, #29
 8002156:	468c      	mov	ip, r1
 8002158:	9900      	ldr	r1, [sp, #0]
 800215a:	4463      	add	r3, ip
 800215c:	00f6      	lsls	r6, r6, #3
 800215e:	468c      	mov	ip, r1
 8002160:	4316      	orrs	r6, r2
 8002162:	2280      	movs	r2, #128	; 0x80
 8002164:	449c      	add	ip, r3
 8002166:	0412      	lsls	r2, r2, #16
 8002168:	4663      	mov	r3, ip
 800216a:	4316      	orrs	r6, r2
 800216c:	00c2      	lsls	r2, r0, #3
 800216e:	2000      	movs	r0, #0
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	9900      	ldr	r1, [sp, #0]
 8002174:	4643      	mov	r3, r8
 8002176:	3101      	adds	r1, #1
 8002178:	468c      	mov	ip, r1
 800217a:	4649      	mov	r1, r9
 800217c:	407b      	eors	r3, r7
 800217e:	9301      	str	r3, [sp, #4]
 8002180:	290f      	cmp	r1, #15
 8002182:	d900      	bls.n	8002186 <__aeabi_dmul+0x96>
 8002184:	e07e      	b.n	8002284 <__aeabi_dmul+0x194>
 8002186:	4bc2      	ldr	r3, [pc, #776]	; (8002490 <__aeabi_dmul+0x3a0>)
 8002188:	0089      	lsls	r1, r1, #2
 800218a:	5859      	ldr	r1, [r3, r1]
 800218c:	468f      	mov	pc, r1
 800218e:	4652      	mov	r2, sl
 8002190:	9b00      	ldr	r3, [sp, #0]
 8002192:	4332      	orrs	r2, r6
 8002194:	d000      	beq.n	8002198 <__aeabi_dmul+0xa8>
 8002196:	e156      	b.n	8002446 <__aeabi_dmul+0x356>
 8002198:	49bb      	ldr	r1, [pc, #748]	; (8002488 <__aeabi_dmul+0x398>)
 800219a:	2600      	movs	r6, #0
 800219c:	468c      	mov	ip, r1
 800219e:	4463      	add	r3, ip
 80021a0:	4649      	mov	r1, r9
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	2302      	movs	r3, #2
 80021a6:	4319      	orrs	r1, r3
 80021a8:	4689      	mov	r9, r1
 80021aa:	2002      	movs	r0, #2
 80021ac:	e7e1      	b.n	8002172 <__aeabi_dmul+0x82>
 80021ae:	4643      	mov	r3, r8
 80021b0:	9301      	str	r3, [sp, #4]
 80021b2:	0034      	movs	r4, r6
 80021b4:	0015      	movs	r5, r2
 80021b6:	4683      	mov	fp, r0
 80021b8:	465b      	mov	r3, fp
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d05e      	beq.n	800227c <__aeabi_dmul+0x18c>
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d100      	bne.n	80021c4 <__aeabi_dmul+0xd4>
 80021c2:	e1f3      	b.n	80025ac <__aeabi_dmul+0x4bc>
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d000      	beq.n	80021ca <__aeabi_dmul+0xda>
 80021c8:	e118      	b.n	80023fc <__aeabi_dmul+0x30c>
 80021ca:	2200      	movs	r2, #0
 80021cc:	2400      	movs	r4, #0
 80021ce:	2500      	movs	r5, #0
 80021d0:	9b01      	ldr	r3, [sp, #4]
 80021d2:	0512      	lsls	r2, r2, #20
 80021d4:	4322      	orrs	r2, r4
 80021d6:	07db      	lsls	r3, r3, #31
 80021d8:	431a      	orrs	r2, r3
 80021da:	0028      	movs	r0, r5
 80021dc:	0011      	movs	r1, r2
 80021de:	b007      	add	sp, #28
 80021e0:	bcf0      	pop	{r4, r5, r6, r7}
 80021e2:	46bb      	mov	fp, r7
 80021e4:	46b2      	mov	sl, r6
 80021e6:	46a9      	mov	r9, r5
 80021e8:	46a0      	mov	r8, r4
 80021ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021ec:	0025      	movs	r5, r4
 80021ee:	4305      	orrs	r5, r0
 80021f0:	d100      	bne.n	80021f4 <__aeabi_dmul+0x104>
 80021f2:	e141      	b.n	8002478 <__aeabi_dmul+0x388>
 80021f4:	2c00      	cmp	r4, #0
 80021f6:	d100      	bne.n	80021fa <__aeabi_dmul+0x10a>
 80021f8:	e1ad      	b.n	8002556 <__aeabi_dmul+0x466>
 80021fa:	0020      	movs	r0, r4
 80021fc:	f000 fef0 	bl	8002fe0 <__clzsi2>
 8002200:	0001      	movs	r1, r0
 8002202:	0002      	movs	r2, r0
 8002204:	390b      	subs	r1, #11
 8002206:	231d      	movs	r3, #29
 8002208:	0010      	movs	r0, r2
 800220a:	1a5b      	subs	r3, r3, r1
 800220c:	0031      	movs	r1, r6
 800220e:	0035      	movs	r5, r6
 8002210:	3808      	subs	r0, #8
 8002212:	4084      	lsls	r4, r0
 8002214:	40d9      	lsrs	r1, r3
 8002216:	4085      	lsls	r5, r0
 8002218:	430c      	orrs	r4, r1
 800221a:	489e      	ldr	r0, [pc, #632]	; (8002494 <__aeabi_dmul+0x3a4>)
 800221c:	1a83      	subs	r3, r0, r2
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	2300      	movs	r3, #0
 8002222:	4699      	mov	r9, r3
 8002224:	469b      	mov	fp, r3
 8002226:	e786      	b.n	8002136 <__aeabi_dmul+0x46>
 8002228:	0005      	movs	r5, r0
 800222a:	4325      	orrs	r5, r4
 800222c:	d000      	beq.n	8002230 <__aeabi_dmul+0x140>
 800222e:	e11c      	b.n	800246a <__aeabi_dmul+0x37a>
 8002230:	2208      	movs	r2, #8
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	2302      	movs	r3, #2
 8002236:	2400      	movs	r4, #0
 8002238:	4691      	mov	r9, r2
 800223a:	469b      	mov	fp, r3
 800223c:	e77b      	b.n	8002136 <__aeabi_dmul+0x46>
 800223e:	4652      	mov	r2, sl
 8002240:	4332      	orrs	r2, r6
 8002242:	d100      	bne.n	8002246 <__aeabi_dmul+0x156>
 8002244:	e10a      	b.n	800245c <__aeabi_dmul+0x36c>
 8002246:	2e00      	cmp	r6, #0
 8002248:	d100      	bne.n	800224c <__aeabi_dmul+0x15c>
 800224a:	e176      	b.n	800253a <__aeabi_dmul+0x44a>
 800224c:	0030      	movs	r0, r6
 800224e:	f000 fec7 	bl	8002fe0 <__clzsi2>
 8002252:	0002      	movs	r2, r0
 8002254:	3a0b      	subs	r2, #11
 8002256:	231d      	movs	r3, #29
 8002258:	0001      	movs	r1, r0
 800225a:	1a9b      	subs	r3, r3, r2
 800225c:	4652      	mov	r2, sl
 800225e:	3908      	subs	r1, #8
 8002260:	40da      	lsrs	r2, r3
 8002262:	408e      	lsls	r6, r1
 8002264:	4316      	orrs	r6, r2
 8002266:	4652      	mov	r2, sl
 8002268:	408a      	lsls	r2, r1
 800226a:	9b00      	ldr	r3, [sp, #0]
 800226c:	4989      	ldr	r1, [pc, #548]	; (8002494 <__aeabi_dmul+0x3a4>)
 800226e:	1a18      	subs	r0, r3, r0
 8002270:	0003      	movs	r3, r0
 8002272:	468c      	mov	ip, r1
 8002274:	4463      	add	r3, ip
 8002276:	2000      	movs	r0, #0
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	e77a      	b.n	8002172 <__aeabi_dmul+0x82>
 800227c:	2400      	movs	r4, #0
 800227e:	2500      	movs	r5, #0
 8002280:	4a81      	ldr	r2, [pc, #516]	; (8002488 <__aeabi_dmul+0x398>)
 8002282:	e7a5      	b.n	80021d0 <__aeabi_dmul+0xe0>
 8002284:	0c2f      	lsrs	r7, r5, #16
 8002286:	042d      	lsls	r5, r5, #16
 8002288:	0c2d      	lsrs	r5, r5, #16
 800228a:	002b      	movs	r3, r5
 800228c:	0c11      	lsrs	r1, r2, #16
 800228e:	0412      	lsls	r2, r2, #16
 8002290:	0c12      	lsrs	r2, r2, #16
 8002292:	4353      	muls	r3, r2
 8002294:	4698      	mov	r8, r3
 8002296:	0013      	movs	r3, r2
 8002298:	0028      	movs	r0, r5
 800229a:	437b      	muls	r3, r7
 800229c:	4699      	mov	r9, r3
 800229e:	4348      	muls	r0, r1
 80022a0:	4448      	add	r0, r9
 80022a2:	4683      	mov	fp, r0
 80022a4:	4640      	mov	r0, r8
 80022a6:	000b      	movs	r3, r1
 80022a8:	0c00      	lsrs	r0, r0, #16
 80022aa:	4682      	mov	sl, r0
 80022ac:	4658      	mov	r0, fp
 80022ae:	437b      	muls	r3, r7
 80022b0:	4450      	add	r0, sl
 80022b2:	9302      	str	r3, [sp, #8]
 80022b4:	4581      	cmp	r9, r0
 80022b6:	d906      	bls.n	80022c6 <__aeabi_dmul+0x1d6>
 80022b8:	469a      	mov	sl, r3
 80022ba:	2380      	movs	r3, #128	; 0x80
 80022bc:	025b      	lsls	r3, r3, #9
 80022be:	4699      	mov	r9, r3
 80022c0:	44ca      	add	sl, r9
 80022c2:	4653      	mov	r3, sl
 80022c4:	9302      	str	r3, [sp, #8]
 80022c6:	0c03      	lsrs	r3, r0, #16
 80022c8:	469b      	mov	fp, r3
 80022ca:	4643      	mov	r3, r8
 80022cc:	041b      	lsls	r3, r3, #16
 80022ce:	0400      	lsls	r0, r0, #16
 80022d0:	0c1b      	lsrs	r3, r3, #16
 80022d2:	4698      	mov	r8, r3
 80022d4:	0003      	movs	r3, r0
 80022d6:	4443      	add	r3, r8
 80022d8:	9304      	str	r3, [sp, #16]
 80022da:	0c33      	lsrs	r3, r6, #16
 80022dc:	4699      	mov	r9, r3
 80022de:	002b      	movs	r3, r5
 80022e0:	0436      	lsls	r6, r6, #16
 80022e2:	0c36      	lsrs	r6, r6, #16
 80022e4:	4373      	muls	r3, r6
 80022e6:	4698      	mov	r8, r3
 80022e8:	0033      	movs	r3, r6
 80022ea:	437b      	muls	r3, r7
 80022ec:	469a      	mov	sl, r3
 80022ee:	464b      	mov	r3, r9
 80022f0:	435d      	muls	r5, r3
 80022f2:	435f      	muls	r7, r3
 80022f4:	4643      	mov	r3, r8
 80022f6:	4455      	add	r5, sl
 80022f8:	0c18      	lsrs	r0, r3, #16
 80022fa:	1940      	adds	r0, r0, r5
 80022fc:	4582      	cmp	sl, r0
 80022fe:	d903      	bls.n	8002308 <__aeabi_dmul+0x218>
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	025b      	lsls	r3, r3, #9
 8002304:	469a      	mov	sl, r3
 8002306:	4457      	add	r7, sl
 8002308:	0c05      	lsrs	r5, r0, #16
 800230a:	19eb      	adds	r3, r5, r7
 800230c:	9305      	str	r3, [sp, #20]
 800230e:	4643      	mov	r3, r8
 8002310:	041d      	lsls	r5, r3, #16
 8002312:	0c2d      	lsrs	r5, r5, #16
 8002314:	0400      	lsls	r0, r0, #16
 8002316:	1940      	adds	r0, r0, r5
 8002318:	0c25      	lsrs	r5, r4, #16
 800231a:	0424      	lsls	r4, r4, #16
 800231c:	0c24      	lsrs	r4, r4, #16
 800231e:	0027      	movs	r7, r4
 8002320:	4357      	muls	r7, r2
 8002322:	436a      	muls	r2, r5
 8002324:	4690      	mov	r8, r2
 8002326:	002a      	movs	r2, r5
 8002328:	0c3b      	lsrs	r3, r7, #16
 800232a:	469a      	mov	sl, r3
 800232c:	434a      	muls	r2, r1
 800232e:	4361      	muls	r1, r4
 8002330:	4441      	add	r1, r8
 8002332:	4451      	add	r1, sl
 8002334:	4483      	add	fp, r0
 8002336:	4588      	cmp	r8, r1
 8002338:	d903      	bls.n	8002342 <__aeabi_dmul+0x252>
 800233a:	2380      	movs	r3, #128	; 0x80
 800233c:	025b      	lsls	r3, r3, #9
 800233e:	4698      	mov	r8, r3
 8002340:	4442      	add	r2, r8
 8002342:	043f      	lsls	r7, r7, #16
 8002344:	0c0b      	lsrs	r3, r1, #16
 8002346:	0c3f      	lsrs	r7, r7, #16
 8002348:	0409      	lsls	r1, r1, #16
 800234a:	19c9      	adds	r1, r1, r7
 800234c:	0027      	movs	r7, r4
 800234e:	4698      	mov	r8, r3
 8002350:	464b      	mov	r3, r9
 8002352:	4377      	muls	r7, r6
 8002354:	435c      	muls	r4, r3
 8002356:	436e      	muls	r6, r5
 8002358:	435d      	muls	r5, r3
 800235a:	0c3b      	lsrs	r3, r7, #16
 800235c:	4699      	mov	r9, r3
 800235e:	19a4      	adds	r4, r4, r6
 8002360:	444c      	add	r4, r9
 8002362:	4442      	add	r2, r8
 8002364:	9503      	str	r5, [sp, #12]
 8002366:	42a6      	cmp	r6, r4
 8002368:	d904      	bls.n	8002374 <__aeabi_dmul+0x284>
 800236a:	2380      	movs	r3, #128	; 0x80
 800236c:	025b      	lsls	r3, r3, #9
 800236e:	4698      	mov	r8, r3
 8002370:	4445      	add	r5, r8
 8002372:	9503      	str	r5, [sp, #12]
 8002374:	9b02      	ldr	r3, [sp, #8]
 8002376:	043f      	lsls	r7, r7, #16
 8002378:	445b      	add	r3, fp
 800237a:	001e      	movs	r6, r3
 800237c:	4283      	cmp	r3, r0
 800237e:	4180      	sbcs	r0, r0
 8002380:	0423      	lsls	r3, r4, #16
 8002382:	4698      	mov	r8, r3
 8002384:	9b05      	ldr	r3, [sp, #20]
 8002386:	0c3f      	lsrs	r7, r7, #16
 8002388:	4447      	add	r7, r8
 800238a:	4698      	mov	r8, r3
 800238c:	1876      	adds	r6, r6, r1
 800238e:	428e      	cmp	r6, r1
 8002390:	4189      	sbcs	r1, r1
 8002392:	4447      	add	r7, r8
 8002394:	4240      	negs	r0, r0
 8002396:	183d      	adds	r5, r7, r0
 8002398:	46a8      	mov	r8, r5
 800239a:	4693      	mov	fp, r2
 800239c:	4249      	negs	r1, r1
 800239e:	468a      	mov	sl, r1
 80023a0:	44c3      	add	fp, r8
 80023a2:	429f      	cmp	r7, r3
 80023a4:	41bf      	sbcs	r7, r7
 80023a6:	4580      	cmp	r8, r0
 80023a8:	4180      	sbcs	r0, r0
 80023aa:	9b03      	ldr	r3, [sp, #12]
 80023ac:	44da      	add	sl, fp
 80023ae:	4698      	mov	r8, r3
 80023b0:	4653      	mov	r3, sl
 80023b2:	4240      	negs	r0, r0
 80023b4:	427f      	negs	r7, r7
 80023b6:	4307      	orrs	r7, r0
 80023b8:	0c24      	lsrs	r4, r4, #16
 80023ba:	4593      	cmp	fp, r2
 80023bc:	4192      	sbcs	r2, r2
 80023be:	458a      	cmp	sl, r1
 80023c0:	4189      	sbcs	r1, r1
 80023c2:	193f      	adds	r7, r7, r4
 80023c4:	0ddc      	lsrs	r4, r3, #23
 80023c6:	9b04      	ldr	r3, [sp, #16]
 80023c8:	0275      	lsls	r5, r6, #9
 80023ca:	431d      	orrs	r5, r3
 80023cc:	1e68      	subs	r0, r5, #1
 80023ce:	4185      	sbcs	r5, r0
 80023d0:	4653      	mov	r3, sl
 80023d2:	4252      	negs	r2, r2
 80023d4:	4249      	negs	r1, r1
 80023d6:	430a      	orrs	r2, r1
 80023d8:	18bf      	adds	r7, r7, r2
 80023da:	4447      	add	r7, r8
 80023dc:	0df6      	lsrs	r6, r6, #23
 80023de:	027f      	lsls	r7, r7, #9
 80023e0:	4335      	orrs	r5, r6
 80023e2:	025a      	lsls	r2, r3, #9
 80023e4:	433c      	orrs	r4, r7
 80023e6:	4315      	orrs	r5, r2
 80023e8:	01fb      	lsls	r3, r7, #7
 80023ea:	d400      	bmi.n	80023ee <__aeabi_dmul+0x2fe>
 80023ec:	e0c1      	b.n	8002572 <__aeabi_dmul+0x482>
 80023ee:	2101      	movs	r1, #1
 80023f0:	086a      	lsrs	r2, r5, #1
 80023f2:	400d      	ands	r5, r1
 80023f4:	4315      	orrs	r5, r2
 80023f6:	07e2      	lsls	r2, r4, #31
 80023f8:	4315      	orrs	r5, r2
 80023fa:	0864      	lsrs	r4, r4, #1
 80023fc:	4926      	ldr	r1, [pc, #152]	; (8002498 <__aeabi_dmul+0x3a8>)
 80023fe:	4461      	add	r1, ip
 8002400:	2900      	cmp	r1, #0
 8002402:	dd56      	ble.n	80024b2 <__aeabi_dmul+0x3c2>
 8002404:	076b      	lsls	r3, r5, #29
 8002406:	d009      	beq.n	800241c <__aeabi_dmul+0x32c>
 8002408:	220f      	movs	r2, #15
 800240a:	402a      	ands	r2, r5
 800240c:	2a04      	cmp	r2, #4
 800240e:	d005      	beq.n	800241c <__aeabi_dmul+0x32c>
 8002410:	1d2a      	adds	r2, r5, #4
 8002412:	42aa      	cmp	r2, r5
 8002414:	41ad      	sbcs	r5, r5
 8002416:	426d      	negs	r5, r5
 8002418:	1964      	adds	r4, r4, r5
 800241a:	0015      	movs	r5, r2
 800241c:	01e3      	lsls	r3, r4, #7
 800241e:	d504      	bpl.n	800242a <__aeabi_dmul+0x33a>
 8002420:	2180      	movs	r1, #128	; 0x80
 8002422:	4a1e      	ldr	r2, [pc, #120]	; (800249c <__aeabi_dmul+0x3ac>)
 8002424:	00c9      	lsls	r1, r1, #3
 8002426:	4014      	ands	r4, r2
 8002428:	4461      	add	r1, ip
 800242a:	4a1d      	ldr	r2, [pc, #116]	; (80024a0 <__aeabi_dmul+0x3b0>)
 800242c:	4291      	cmp	r1, r2
 800242e:	dd00      	ble.n	8002432 <__aeabi_dmul+0x342>
 8002430:	e724      	b.n	800227c <__aeabi_dmul+0x18c>
 8002432:	0762      	lsls	r2, r4, #29
 8002434:	08ed      	lsrs	r5, r5, #3
 8002436:	0264      	lsls	r4, r4, #9
 8002438:	0549      	lsls	r1, r1, #21
 800243a:	4315      	orrs	r5, r2
 800243c:	0b24      	lsrs	r4, r4, #12
 800243e:	0d4a      	lsrs	r2, r1, #21
 8002440:	e6c6      	b.n	80021d0 <__aeabi_dmul+0xe0>
 8002442:	9701      	str	r7, [sp, #4]
 8002444:	e6b8      	b.n	80021b8 <__aeabi_dmul+0xc8>
 8002446:	4a10      	ldr	r2, [pc, #64]	; (8002488 <__aeabi_dmul+0x398>)
 8002448:	2003      	movs	r0, #3
 800244a:	4694      	mov	ip, r2
 800244c:	4463      	add	r3, ip
 800244e:	464a      	mov	r2, r9
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	2303      	movs	r3, #3
 8002454:	431a      	orrs	r2, r3
 8002456:	4691      	mov	r9, r2
 8002458:	4652      	mov	r2, sl
 800245a:	e68a      	b.n	8002172 <__aeabi_dmul+0x82>
 800245c:	4649      	mov	r1, r9
 800245e:	2301      	movs	r3, #1
 8002460:	4319      	orrs	r1, r3
 8002462:	4689      	mov	r9, r1
 8002464:	2600      	movs	r6, #0
 8002466:	2001      	movs	r0, #1
 8002468:	e683      	b.n	8002172 <__aeabi_dmul+0x82>
 800246a:	220c      	movs	r2, #12
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	2303      	movs	r3, #3
 8002470:	0005      	movs	r5, r0
 8002472:	4691      	mov	r9, r2
 8002474:	469b      	mov	fp, r3
 8002476:	e65e      	b.n	8002136 <__aeabi_dmul+0x46>
 8002478:	2304      	movs	r3, #4
 800247a:	4699      	mov	r9, r3
 800247c:	2300      	movs	r3, #0
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	3301      	adds	r3, #1
 8002482:	2400      	movs	r4, #0
 8002484:	469b      	mov	fp, r3
 8002486:	e656      	b.n	8002136 <__aeabi_dmul+0x46>
 8002488:	000007ff 	.word	0x000007ff
 800248c:	fffffc01 	.word	0xfffffc01
 8002490:	0800ae98 	.word	0x0800ae98
 8002494:	fffffc0d 	.word	0xfffffc0d
 8002498:	000003ff 	.word	0x000003ff
 800249c:	feffffff 	.word	0xfeffffff
 80024a0:	000007fe 	.word	0x000007fe
 80024a4:	2300      	movs	r3, #0
 80024a6:	2480      	movs	r4, #128	; 0x80
 80024a8:	2500      	movs	r5, #0
 80024aa:	4a44      	ldr	r2, [pc, #272]	; (80025bc <__aeabi_dmul+0x4cc>)
 80024ac:	9301      	str	r3, [sp, #4]
 80024ae:	0324      	lsls	r4, r4, #12
 80024b0:	e68e      	b.n	80021d0 <__aeabi_dmul+0xe0>
 80024b2:	2001      	movs	r0, #1
 80024b4:	1a40      	subs	r0, r0, r1
 80024b6:	2838      	cmp	r0, #56	; 0x38
 80024b8:	dd00      	ble.n	80024bc <__aeabi_dmul+0x3cc>
 80024ba:	e686      	b.n	80021ca <__aeabi_dmul+0xda>
 80024bc:	281f      	cmp	r0, #31
 80024be:	dd5b      	ble.n	8002578 <__aeabi_dmul+0x488>
 80024c0:	221f      	movs	r2, #31
 80024c2:	0023      	movs	r3, r4
 80024c4:	4252      	negs	r2, r2
 80024c6:	1a51      	subs	r1, r2, r1
 80024c8:	40cb      	lsrs	r3, r1
 80024ca:	0019      	movs	r1, r3
 80024cc:	2820      	cmp	r0, #32
 80024ce:	d003      	beq.n	80024d8 <__aeabi_dmul+0x3e8>
 80024d0:	4a3b      	ldr	r2, [pc, #236]	; (80025c0 <__aeabi_dmul+0x4d0>)
 80024d2:	4462      	add	r2, ip
 80024d4:	4094      	lsls	r4, r2
 80024d6:	4325      	orrs	r5, r4
 80024d8:	1e6a      	subs	r2, r5, #1
 80024da:	4195      	sbcs	r5, r2
 80024dc:	002a      	movs	r2, r5
 80024de:	430a      	orrs	r2, r1
 80024e0:	2107      	movs	r1, #7
 80024e2:	000d      	movs	r5, r1
 80024e4:	2400      	movs	r4, #0
 80024e6:	4015      	ands	r5, r2
 80024e8:	4211      	tst	r1, r2
 80024ea:	d05b      	beq.n	80025a4 <__aeabi_dmul+0x4b4>
 80024ec:	210f      	movs	r1, #15
 80024ee:	2400      	movs	r4, #0
 80024f0:	4011      	ands	r1, r2
 80024f2:	2904      	cmp	r1, #4
 80024f4:	d053      	beq.n	800259e <__aeabi_dmul+0x4ae>
 80024f6:	1d11      	adds	r1, r2, #4
 80024f8:	4291      	cmp	r1, r2
 80024fa:	4192      	sbcs	r2, r2
 80024fc:	4252      	negs	r2, r2
 80024fe:	18a4      	adds	r4, r4, r2
 8002500:	000a      	movs	r2, r1
 8002502:	0223      	lsls	r3, r4, #8
 8002504:	d54b      	bpl.n	800259e <__aeabi_dmul+0x4ae>
 8002506:	2201      	movs	r2, #1
 8002508:	2400      	movs	r4, #0
 800250a:	2500      	movs	r5, #0
 800250c:	e660      	b.n	80021d0 <__aeabi_dmul+0xe0>
 800250e:	2380      	movs	r3, #128	; 0x80
 8002510:	031b      	lsls	r3, r3, #12
 8002512:	421c      	tst	r4, r3
 8002514:	d009      	beq.n	800252a <__aeabi_dmul+0x43a>
 8002516:	421e      	tst	r6, r3
 8002518:	d107      	bne.n	800252a <__aeabi_dmul+0x43a>
 800251a:	4333      	orrs	r3, r6
 800251c:	031c      	lsls	r4, r3, #12
 800251e:	4643      	mov	r3, r8
 8002520:	0015      	movs	r5, r2
 8002522:	0b24      	lsrs	r4, r4, #12
 8002524:	4a25      	ldr	r2, [pc, #148]	; (80025bc <__aeabi_dmul+0x4cc>)
 8002526:	9301      	str	r3, [sp, #4]
 8002528:	e652      	b.n	80021d0 <__aeabi_dmul+0xe0>
 800252a:	2280      	movs	r2, #128	; 0x80
 800252c:	0312      	lsls	r2, r2, #12
 800252e:	4314      	orrs	r4, r2
 8002530:	0324      	lsls	r4, r4, #12
 8002532:	4a22      	ldr	r2, [pc, #136]	; (80025bc <__aeabi_dmul+0x4cc>)
 8002534:	0b24      	lsrs	r4, r4, #12
 8002536:	9701      	str	r7, [sp, #4]
 8002538:	e64a      	b.n	80021d0 <__aeabi_dmul+0xe0>
 800253a:	f000 fd51 	bl	8002fe0 <__clzsi2>
 800253e:	0003      	movs	r3, r0
 8002540:	001a      	movs	r2, r3
 8002542:	3215      	adds	r2, #21
 8002544:	3020      	adds	r0, #32
 8002546:	2a1c      	cmp	r2, #28
 8002548:	dc00      	bgt.n	800254c <__aeabi_dmul+0x45c>
 800254a:	e684      	b.n	8002256 <__aeabi_dmul+0x166>
 800254c:	4656      	mov	r6, sl
 800254e:	3b08      	subs	r3, #8
 8002550:	2200      	movs	r2, #0
 8002552:	409e      	lsls	r6, r3
 8002554:	e689      	b.n	800226a <__aeabi_dmul+0x17a>
 8002556:	f000 fd43 	bl	8002fe0 <__clzsi2>
 800255a:	0001      	movs	r1, r0
 800255c:	0002      	movs	r2, r0
 800255e:	3115      	adds	r1, #21
 8002560:	3220      	adds	r2, #32
 8002562:	291c      	cmp	r1, #28
 8002564:	dc00      	bgt.n	8002568 <__aeabi_dmul+0x478>
 8002566:	e64e      	b.n	8002206 <__aeabi_dmul+0x116>
 8002568:	0034      	movs	r4, r6
 800256a:	3808      	subs	r0, #8
 800256c:	2500      	movs	r5, #0
 800256e:	4084      	lsls	r4, r0
 8002570:	e653      	b.n	800221a <__aeabi_dmul+0x12a>
 8002572:	9b00      	ldr	r3, [sp, #0]
 8002574:	469c      	mov	ip, r3
 8002576:	e741      	b.n	80023fc <__aeabi_dmul+0x30c>
 8002578:	4912      	ldr	r1, [pc, #72]	; (80025c4 <__aeabi_dmul+0x4d4>)
 800257a:	0022      	movs	r2, r4
 800257c:	4461      	add	r1, ip
 800257e:	002e      	movs	r6, r5
 8002580:	408d      	lsls	r5, r1
 8002582:	408a      	lsls	r2, r1
 8002584:	40c6      	lsrs	r6, r0
 8002586:	1e69      	subs	r1, r5, #1
 8002588:	418d      	sbcs	r5, r1
 800258a:	4332      	orrs	r2, r6
 800258c:	432a      	orrs	r2, r5
 800258e:	40c4      	lsrs	r4, r0
 8002590:	0753      	lsls	r3, r2, #29
 8002592:	d0b6      	beq.n	8002502 <__aeabi_dmul+0x412>
 8002594:	210f      	movs	r1, #15
 8002596:	4011      	ands	r1, r2
 8002598:	2904      	cmp	r1, #4
 800259a:	d1ac      	bne.n	80024f6 <__aeabi_dmul+0x406>
 800259c:	e7b1      	b.n	8002502 <__aeabi_dmul+0x412>
 800259e:	0765      	lsls	r5, r4, #29
 80025a0:	0264      	lsls	r4, r4, #9
 80025a2:	0b24      	lsrs	r4, r4, #12
 80025a4:	08d2      	lsrs	r2, r2, #3
 80025a6:	4315      	orrs	r5, r2
 80025a8:	2200      	movs	r2, #0
 80025aa:	e611      	b.n	80021d0 <__aeabi_dmul+0xe0>
 80025ac:	2280      	movs	r2, #128	; 0x80
 80025ae:	0312      	lsls	r2, r2, #12
 80025b0:	4314      	orrs	r4, r2
 80025b2:	0324      	lsls	r4, r4, #12
 80025b4:	4a01      	ldr	r2, [pc, #4]	; (80025bc <__aeabi_dmul+0x4cc>)
 80025b6:	0b24      	lsrs	r4, r4, #12
 80025b8:	e60a      	b.n	80021d0 <__aeabi_dmul+0xe0>
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	000007ff 	.word	0x000007ff
 80025c0:	0000043e 	.word	0x0000043e
 80025c4:	0000041e 	.word	0x0000041e

080025c8 <__aeabi_dsub>:
 80025c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ca:	4657      	mov	r7, sl
 80025cc:	464e      	mov	r6, r9
 80025ce:	4645      	mov	r5, r8
 80025d0:	46de      	mov	lr, fp
 80025d2:	0004      	movs	r4, r0
 80025d4:	b5e0      	push	{r5, r6, r7, lr}
 80025d6:	001f      	movs	r7, r3
 80025d8:	0010      	movs	r0, r2
 80025da:	030b      	lsls	r3, r1, #12
 80025dc:	0f62      	lsrs	r2, r4, #29
 80025de:	004e      	lsls	r6, r1, #1
 80025e0:	0fcd      	lsrs	r5, r1, #31
 80025e2:	0a5b      	lsrs	r3, r3, #9
 80025e4:	0339      	lsls	r1, r7, #12
 80025e6:	4313      	orrs	r3, r2
 80025e8:	0a49      	lsrs	r1, r1, #9
 80025ea:	00e2      	lsls	r2, r4, #3
 80025ec:	0f44      	lsrs	r4, r0, #29
 80025ee:	4321      	orrs	r1, r4
 80025f0:	4cc2      	ldr	r4, [pc, #776]	; (80028fc <__aeabi_dsub+0x334>)
 80025f2:	4691      	mov	r9, r2
 80025f4:	4692      	mov	sl, r2
 80025f6:	00c0      	lsls	r0, r0, #3
 80025f8:	007a      	lsls	r2, r7, #1
 80025fa:	4680      	mov	r8, r0
 80025fc:	0d76      	lsrs	r6, r6, #21
 80025fe:	0d52      	lsrs	r2, r2, #21
 8002600:	0fff      	lsrs	r7, r7, #31
 8002602:	42a2      	cmp	r2, r4
 8002604:	d100      	bne.n	8002608 <__aeabi_dsub+0x40>
 8002606:	e0b4      	b.n	8002772 <__aeabi_dsub+0x1aa>
 8002608:	2401      	movs	r4, #1
 800260a:	4067      	eors	r7, r4
 800260c:	46bb      	mov	fp, r7
 800260e:	42bd      	cmp	r5, r7
 8002610:	d100      	bne.n	8002614 <__aeabi_dsub+0x4c>
 8002612:	e088      	b.n	8002726 <__aeabi_dsub+0x15e>
 8002614:	1ab4      	subs	r4, r6, r2
 8002616:	46a4      	mov	ip, r4
 8002618:	2c00      	cmp	r4, #0
 800261a:	dc00      	bgt.n	800261e <__aeabi_dsub+0x56>
 800261c:	e0b2      	b.n	8002784 <__aeabi_dsub+0x1bc>
 800261e:	2a00      	cmp	r2, #0
 8002620:	d100      	bne.n	8002624 <__aeabi_dsub+0x5c>
 8002622:	e0c5      	b.n	80027b0 <__aeabi_dsub+0x1e8>
 8002624:	4ab5      	ldr	r2, [pc, #724]	; (80028fc <__aeabi_dsub+0x334>)
 8002626:	4296      	cmp	r6, r2
 8002628:	d100      	bne.n	800262c <__aeabi_dsub+0x64>
 800262a:	e28b      	b.n	8002b44 <__aeabi_dsub+0x57c>
 800262c:	2280      	movs	r2, #128	; 0x80
 800262e:	0412      	lsls	r2, r2, #16
 8002630:	4311      	orrs	r1, r2
 8002632:	4662      	mov	r2, ip
 8002634:	2a38      	cmp	r2, #56	; 0x38
 8002636:	dd00      	ble.n	800263a <__aeabi_dsub+0x72>
 8002638:	e1a1      	b.n	800297e <__aeabi_dsub+0x3b6>
 800263a:	2a1f      	cmp	r2, #31
 800263c:	dd00      	ble.n	8002640 <__aeabi_dsub+0x78>
 800263e:	e216      	b.n	8002a6e <__aeabi_dsub+0x4a6>
 8002640:	2720      	movs	r7, #32
 8002642:	000c      	movs	r4, r1
 8002644:	1abf      	subs	r7, r7, r2
 8002646:	40bc      	lsls	r4, r7
 8002648:	0002      	movs	r2, r0
 800264a:	46a0      	mov	r8, r4
 800264c:	4664      	mov	r4, ip
 800264e:	40b8      	lsls	r0, r7
 8002650:	40e2      	lsrs	r2, r4
 8002652:	4644      	mov	r4, r8
 8002654:	4314      	orrs	r4, r2
 8002656:	0002      	movs	r2, r0
 8002658:	1e50      	subs	r0, r2, #1
 800265a:	4182      	sbcs	r2, r0
 800265c:	4660      	mov	r0, ip
 800265e:	40c1      	lsrs	r1, r0
 8002660:	4322      	orrs	r2, r4
 8002662:	1a5b      	subs	r3, r3, r1
 8002664:	4649      	mov	r1, r9
 8002666:	1a8c      	subs	r4, r1, r2
 8002668:	45a1      	cmp	r9, r4
 800266a:	4192      	sbcs	r2, r2
 800266c:	4252      	negs	r2, r2
 800266e:	1a9b      	subs	r3, r3, r2
 8002670:	4698      	mov	r8, r3
 8002672:	4643      	mov	r3, r8
 8002674:	021b      	lsls	r3, r3, #8
 8002676:	d400      	bmi.n	800267a <__aeabi_dsub+0xb2>
 8002678:	e117      	b.n	80028aa <__aeabi_dsub+0x2e2>
 800267a:	4643      	mov	r3, r8
 800267c:	025b      	lsls	r3, r3, #9
 800267e:	0a5b      	lsrs	r3, r3, #9
 8002680:	4698      	mov	r8, r3
 8002682:	4643      	mov	r3, r8
 8002684:	2b00      	cmp	r3, #0
 8002686:	d100      	bne.n	800268a <__aeabi_dsub+0xc2>
 8002688:	e16c      	b.n	8002964 <__aeabi_dsub+0x39c>
 800268a:	4640      	mov	r0, r8
 800268c:	f000 fca8 	bl	8002fe0 <__clzsi2>
 8002690:	0002      	movs	r2, r0
 8002692:	3a08      	subs	r2, #8
 8002694:	2120      	movs	r1, #32
 8002696:	0020      	movs	r0, r4
 8002698:	4643      	mov	r3, r8
 800269a:	1a89      	subs	r1, r1, r2
 800269c:	4093      	lsls	r3, r2
 800269e:	40c8      	lsrs	r0, r1
 80026a0:	4094      	lsls	r4, r2
 80026a2:	4303      	orrs	r3, r0
 80026a4:	4296      	cmp	r6, r2
 80026a6:	dd00      	ble.n	80026aa <__aeabi_dsub+0xe2>
 80026a8:	e157      	b.n	800295a <__aeabi_dsub+0x392>
 80026aa:	1b96      	subs	r6, r2, r6
 80026ac:	1c71      	adds	r1, r6, #1
 80026ae:	291f      	cmp	r1, #31
 80026b0:	dd00      	ble.n	80026b4 <__aeabi_dsub+0xec>
 80026b2:	e1cb      	b.n	8002a4c <__aeabi_dsub+0x484>
 80026b4:	2220      	movs	r2, #32
 80026b6:	0018      	movs	r0, r3
 80026b8:	0026      	movs	r6, r4
 80026ba:	1a52      	subs	r2, r2, r1
 80026bc:	4094      	lsls	r4, r2
 80026be:	4090      	lsls	r0, r2
 80026c0:	40ce      	lsrs	r6, r1
 80026c2:	40cb      	lsrs	r3, r1
 80026c4:	1e62      	subs	r2, r4, #1
 80026c6:	4194      	sbcs	r4, r2
 80026c8:	4330      	orrs	r0, r6
 80026ca:	4698      	mov	r8, r3
 80026cc:	2600      	movs	r6, #0
 80026ce:	4304      	orrs	r4, r0
 80026d0:	0763      	lsls	r3, r4, #29
 80026d2:	d009      	beq.n	80026e8 <__aeabi_dsub+0x120>
 80026d4:	230f      	movs	r3, #15
 80026d6:	4023      	ands	r3, r4
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d005      	beq.n	80026e8 <__aeabi_dsub+0x120>
 80026dc:	1d23      	adds	r3, r4, #4
 80026de:	42a3      	cmp	r3, r4
 80026e0:	41a4      	sbcs	r4, r4
 80026e2:	4264      	negs	r4, r4
 80026e4:	44a0      	add	r8, r4
 80026e6:	001c      	movs	r4, r3
 80026e8:	4643      	mov	r3, r8
 80026ea:	021b      	lsls	r3, r3, #8
 80026ec:	d400      	bmi.n	80026f0 <__aeabi_dsub+0x128>
 80026ee:	e0df      	b.n	80028b0 <__aeabi_dsub+0x2e8>
 80026f0:	4b82      	ldr	r3, [pc, #520]	; (80028fc <__aeabi_dsub+0x334>)
 80026f2:	3601      	adds	r6, #1
 80026f4:	429e      	cmp	r6, r3
 80026f6:	d100      	bne.n	80026fa <__aeabi_dsub+0x132>
 80026f8:	e0fb      	b.n	80028f2 <__aeabi_dsub+0x32a>
 80026fa:	4642      	mov	r2, r8
 80026fc:	4b80      	ldr	r3, [pc, #512]	; (8002900 <__aeabi_dsub+0x338>)
 80026fe:	08e4      	lsrs	r4, r4, #3
 8002700:	401a      	ands	r2, r3
 8002702:	0013      	movs	r3, r2
 8002704:	0571      	lsls	r1, r6, #21
 8002706:	0752      	lsls	r2, r2, #29
 8002708:	025b      	lsls	r3, r3, #9
 800270a:	4322      	orrs	r2, r4
 800270c:	0b1b      	lsrs	r3, r3, #12
 800270e:	0d49      	lsrs	r1, r1, #21
 8002710:	0509      	lsls	r1, r1, #20
 8002712:	07ed      	lsls	r5, r5, #31
 8002714:	4319      	orrs	r1, r3
 8002716:	4329      	orrs	r1, r5
 8002718:	0010      	movs	r0, r2
 800271a:	bcf0      	pop	{r4, r5, r6, r7}
 800271c:	46bb      	mov	fp, r7
 800271e:	46b2      	mov	sl, r6
 8002720:	46a9      	mov	r9, r5
 8002722:	46a0      	mov	r8, r4
 8002724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002726:	1ab4      	subs	r4, r6, r2
 8002728:	46a4      	mov	ip, r4
 800272a:	2c00      	cmp	r4, #0
 800272c:	dd58      	ble.n	80027e0 <__aeabi_dsub+0x218>
 800272e:	2a00      	cmp	r2, #0
 8002730:	d100      	bne.n	8002734 <__aeabi_dsub+0x16c>
 8002732:	e09e      	b.n	8002872 <__aeabi_dsub+0x2aa>
 8002734:	4a71      	ldr	r2, [pc, #452]	; (80028fc <__aeabi_dsub+0x334>)
 8002736:	4296      	cmp	r6, r2
 8002738:	d100      	bne.n	800273c <__aeabi_dsub+0x174>
 800273a:	e13b      	b.n	80029b4 <__aeabi_dsub+0x3ec>
 800273c:	2280      	movs	r2, #128	; 0x80
 800273e:	0412      	lsls	r2, r2, #16
 8002740:	4311      	orrs	r1, r2
 8002742:	4662      	mov	r2, ip
 8002744:	2a38      	cmp	r2, #56	; 0x38
 8002746:	dd00      	ble.n	800274a <__aeabi_dsub+0x182>
 8002748:	e0c1      	b.n	80028ce <__aeabi_dsub+0x306>
 800274a:	2a1f      	cmp	r2, #31
 800274c:	dc00      	bgt.n	8002750 <__aeabi_dsub+0x188>
 800274e:	e1bb      	b.n	8002ac8 <__aeabi_dsub+0x500>
 8002750:	000c      	movs	r4, r1
 8002752:	3a20      	subs	r2, #32
 8002754:	40d4      	lsrs	r4, r2
 8002756:	0022      	movs	r2, r4
 8002758:	4664      	mov	r4, ip
 800275a:	2c20      	cmp	r4, #32
 800275c:	d004      	beq.n	8002768 <__aeabi_dsub+0x1a0>
 800275e:	2740      	movs	r7, #64	; 0x40
 8002760:	1b3f      	subs	r7, r7, r4
 8002762:	40b9      	lsls	r1, r7
 8002764:	4308      	orrs	r0, r1
 8002766:	4680      	mov	r8, r0
 8002768:	4644      	mov	r4, r8
 800276a:	1e61      	subs	r1, r4, #1
 800276c:	418c      	sbcs	r4, r1
 800276e:	4314      	orrs	r4, r2
 8002770:	e0b1      	b.n	80028d6 <__aeabi_dsub+0x30e>
 8002772:	000c      	movs	r4, r1
 8002774:	4304      	orrs	r4, r0
 8002776:	d02a      	beq.n	80027ce <__aeabi_dsub+0x206>
 8002778:	46bb      	mov	fp, r7
 800277a:	42bd      	cmp	r5, r7
 800277c:	d02d      	beq.n	80027da <__aeabi_dsub+0x212>
 800277e:	4c61      	ldr	r4, [pc, #388]	; (8002904 <__aeabi_dsub+0x33c>)
 8002780:	46a4      	mov	ip, r4
 8002782:	44b4      	add	ip, r6
 8002784:	4664      	mov	r4, ip
 8002786:	2c00      	cmp	r4, #0
 8002788:	d05c      	beq.n	8002844 <__aeabi_dsub+0x27c>
 800278a:	1b94      	subs	r4, r2, r6
 800278c:	46a4      	mov	ip, r4
 800278e:	2e00      	cmp	r6, #0
 8002790:	d000      	beq.n	8002794 <__aeabi_dsub+0x1cc>
 8002792:	e115      	b.n	80029c0 <__aeabi_dsub+0x3f8>
 8002794:	464d      	mov	r5, r9
 8002796:	431d      	orrs	r5, r3
 8002798:	d100      	bne.n	800279c <__aeabi_dsub+0x1d4>
 800279a:	e1c3      	b.n	8002b24 <__aeabi_dsub+0x55c>
 800279c:	1e65      	subs	r5, r4, #1
 800279e:	2c01      	cmp	r4, #1
 80027a0:	d100      	bne.n	80027a4 <__aeabi_dsub+0x1dc>
 80027a2:	e20c      	b.n	8002bbe <__aeabi_dsub+0x5f6>
 80027a4:	4e55      	ldr	r6, [pc, #340]	; (80028fc <__aeabi_dsub+0x334>)
 80027a6:	42b4      	cmp	r4, r6
 80027a8:	d100      	bne.n	80027ac <__aeabi_dsub+0x1e4>
 80027aa:	e1f8      	b.n	8002b9e <__aeabi_dsub+0x5d6>
 80027ac:	46ac      	mov	ip, r5
 80027ae:	e10e      	b.n	80029ce <__aeabi_dsub+0x406>
 80027b0:	000a      	movs	r2, r1
 80027b2:	4302      	orrs	r2, r0
 80027b4:	d100      	bne.n	80027b8 <__aeabi_dsub+0x1f0>
 80027b6:	e136      	b.n	8002a26 <__aeabi_dsub+0x45e>
 80027b8:	0022      	movs	r2, r4
 80027ba:	3a01      	subs	r2, #1
 80027bc:	2c01      	cmp	r4, #1
 80027be:	d100      	bne.n	80027c2 <__aeabi_dsub+0x1fa>
 80027c0:	e1c6      	b.n	8002b50 <__aeabi_dsub+0x588>
 80027c2:	4c4e      	ldr	r4, [pc, #312]	; (80028fc <__aeabi_dsub+0x334>)
 80027c4:	45a4      	cmp	ip, r4
 80027c6:	d100      	bne.n	80027ca <__aeabi_dsub+0x202>
 80027c8:	e0f4      	b.n	80029b4 <__aeabi_dsub+0x3ec>
 80027ca:	4694      	mov	ip, r2
 80027cc:	e731      	b.n	8002632 <__aeabi_dsub+0x6a>
 80027ce:	2401      	movs	r4, #1
 80027d0:	4067      	eors	r7, r4
 80027d2:	46bb      	mov	fp, r7
 80027d4:	42bd      	cmp	r5, r7
 80027d6:	d000      	beq.n	80027da <__aeabi_dsub+0x212>
 80027d8:	e71c      	b.n	8002614 <__aeabi_dsub+0x4c>
 80027da:	4c4a      	ldr	r4, [pc, #296]	; (8002904 <__aeabi_dsub+0x33c>)
 80027dc:	46a4      	mov	ip, r4
 80027de:	44b4      	add	ip, r6
 80027e0:	4664      	mov	r4, ip
 80027e2:	2c00      	cmp	r4, #0
 80027e4:	d100      	bne.n	80027e8 <__aeabi_dsub+0x220>
 80027e6:	e0cf      	b.n	8002988 <__aeabi_dsub+0x3c0>
 80027e8:	1b94      	subs	r4, r2, r6
 80027ea:	46a4      	mov	ip, r4
 80027ec:	2e00      	cmp	r6, #0
 80027ee:	d100      	bne.n	80027f2 <__aeabi_dsub+0x22a>
 80027f0:	e15c      	b.n	8002aac <__aeabi_dsub+0x4e4>
 80027f2:	4e42      	ldr	r6, [pc, #264]	; (80028fc <__aeabi_dsub+0x334>)
 80027f4:	42b2      	cmp	r2, r6
 80027f6:	d100      	bne.n	80027fa <__aeabi_dsub+0x232>
 80027f8:	e1ec      	b.n	8002bd4 <__aeabi_dsub+0x60c>
 80027fa:	2680      	movs	r6, #128	; 0x80
 80027fc:	0436      	lsls	r6, r6, #16
 80027fe:	4333      	orrs	r3, r6
 8002800:	4664      	mov	r4, ip
 8002802:	2c38      	cmp	r4, #56	; 0x38
 8002804:	dd00      	ble.n	8002808 <__aeabi_dsub+0x240>
 8002806:	e1b3      	b.n	8002b70 <__aeabi_dsub+0x5a8>
 8002808:	2c1f      	cmp	r4, #31
 800280a:	dd00      	ble.n	800280e <__aeabi_dsub+0x246>
 800280c:	e238      	b.n	8002c80 <__aeabi_dsub+0x6b8>
 800280e:	2620      	movs	r6, #32
 8002810:	1b36      	subs	r6, r6, r4
 8002812:	001c      	movs	r4, r3
 8002814:	40b4      	lsls	r4, r6
 8002816:	464f      	mov	r7, r9
 8002818:	46a0      	mov	r8, r4
 800281a:	4664      	mov	r4, ip
 800281c:	40e7      	lsrs	r7, r4
 800281e:	4644      	mov	r4, r8
 8002820:	433c      	orrs	r4, r7
 8002822:	464f      	mov	r7, r9
 8002824:	40b7      	lsls	r7, r6
 8002826:	003e      	movs	r6, r7
 8002828:	1e77      	subs	r7, r6, #1
 800282a:	41be      	sbcs	r6, r7
 800282c:	4334      	orrs	r4, r6
 800282e:	4666      	mov	r6, ip
 8002830:	40f3      	lsrs	r3, r6
 8002832:	18c9      	adds	r1, r1, r3
 8002834:	1824      	adds	r4, r4, r0
 8002836:	4284      	cmp	r4, r0
 8002838:	419b      	sbcs	r3, r3
 800283a:	425b      	negs	r3, r3
 800283c:	4698      	mov	r8, r3
 800283e:	0016      	movs	r6, r2
 8002840:	4488      	add	r8, r1
 8002842:	e04e      	b.n	80028e2 <__aeabi_dsub+0x31a>
 8002844:	4a30      	ldr	r2, [pc, #192]	; (8002908 <__aeabi_dsub+0x340>)
 8002846:	1c74      	adds	r4, r6, #1
 8002848:	4214      	tst	r4, r2
 800284a:	d000      	beq.n	800284e <__aeabi_dsub+0x286>
 800284c:	e0d6      	b.n	80029fc <__aeabi_dsub+0x434>
 800284e:	464a      	mov	r2, r9
 8002850:	431a      	orrs	r2, r3
 8002852:	2e00      	cmp	r6, #0
 8002854:	d000      	beq.n	8002858 <__aeabi_dsub+0x290>
 8002856:	e15b      	b.n	8002b10 <__aeabi_dsub+0x548>
 8002858:	2a00      	cmp	r2, #0
 800285a:	d100      	bne.n	800285e <__aeabi_dsub+0x296>
 800285c:	e1a5      	b.n	8002baa <__aeabi_dsub+0x5e2>
 800285e:	000a      	movs	r2, r1
 8002860:	4302      	orrs	r2, r0
 8002862:	d000      	beq.n	8002866 <__aeabi_dsub+0x29e>
 8002864:	e1bb      	b.n	8002bde <__aeabi_dsub+0x616>
 8002866:	464a      	mov	r2, r9
 8002868:	0759      	lsls	r1, r3, #29
 800286a:	08d2      	lsrs	r2, r2, #3
 800286c:	430a      	orrs	r2, r1
 800286e:	08db      	lsrs	r3, r3, #3
 8002870:	e027      	b.n	80028c2 <__aeabi_dsub+0x2fa>
 8002872:	000a      	movs	r2, r1
 8002874:	4302      	orrs	r2, r0
 8002876:	d100      	bne.n	800287a <__aeabi_dsub+0x2b2>
 8002878:	e174      	b.n	8002b64 <__aeabi_dsub+0x59c>
 800287a:	0022      	movs	r2, r4
 800287c:	3a01      	subs	r2, #1
 800287e:	2c01      	cmp	r4, #1
 8002880:	d005      	beq.n	800288e <__aeabi_dsub+0x2c6>
 8002882:	4c1e      	ldr	r4, [pc, #120]	; (80028fc <__aeabi_dsub+0x334>)
 8002884:	45a4      	cmp	ip, r4
 8002886:	d100      	bne.n	800288a <__aeabi_dsub+0x2c2>
 8002888:	e094      	b.n	80029b4 <__aeabi_dsub+0x3ec>
 800288a:	4694      	mov	ip, r2
 800288c:	e759      	b.n	8002742 <__aeabi_dsub+0x17a>
 800288e:	4448      	add	r0, r9
 8002890:	4548      	cmp	r0, r9
 8002892:	4192      	sbcs	r2, r2
 8002894:	185b      	adds	r3, r3, r1
 8002896:	4698      	mov	r8, r3
 8002898:	0004      	movs	r4, r0
 800289a:	4252      	negs	r2, r2
 800289c:	4490      	add	r8, r2
 800289e:	4643      	mov	r3, r8
 80028a0:	2602      	movs	r6, #2
 80028a2:	021b      	lsls	r3, r3, #8
 80028a4:	d500      	bpl.n	80028a8 <__aeabi_dsub+0x2e0>
 80028a6:	e0c4      	b.n	8002a32 <__aeabi_dsub+0x46a>
 80028a8:	3e01      	subs	r6, #1
 80028aa:	0763      	lsls	r3, r4, #29
 80028ac:	d000      	beq.n	80028b0 <__aeabi_dsub+0x2e8>
 80028ae:	e711      	b.n	80026d4 <__aeabi_dsub+0x10c>
 80028b0:	4643      	mov	r3, r8
 80028b2:	46b4      	mov	ip, r6
 80028b4:	0759      	lsls	r1, r3, #29
 80028b6:	08e2      	lsrs	r2, r4, #3
 80028b8:	430a      	orrs	r2, r1
 80028ba:	08db      	lsrs	r3, r3, #3
 80028bc:	490f      	ldr	r1, [pc, #60]	; (80028fc <__aeabi_dsub+0x334>)
 80028be:	458c      	cmp	ip, r1
 80028c0:	d040      	beq.n	8002944 <__aeabi_dsub+0x37c>
 80028c2:	4661      	mov	r1, ip
 80028c4:	031b      	lsls	r3, r3, #12
 80028c6:	0549      	lsls	r1, r1, #21
 80028c8:	0b1b      	lsrs	r3, r3, #12
 80028ca:	0d49      	lsrs	r1, r1, #21
 80028cc:	e720      	b.n	8002710 <__aeabi_dsub+0x148>
 80028ce:	4301      	orrs	r1, r0
 80028d0:	000c      	movs	r4, r1
 80028d2:	1e61      	subs	r1, r4, #1
 80028d4:	418c      	sbcs	r4, r1
 80028d6:	444c      	add	r4, r9
 80028d8:	454c      	cmp	r4, r9
 80028da:	4192      	sbcs	r2, r2
 80028dc:	4252      	negs	r2, r2
 80028de:	4690      	mov	r8, r2
 80028e0:	4498      	add	r8, r3
 80028e2:	4643      	mov	r3, r8
 80028e4:	021b      	lsls	r3, r3, #8
 80028e6:	d5e0      	bpl.n	80028aa <__aeabi_dsub+0x2e2>
 80028e8:	4b04      	ldr	r3, [pc, #16]	; (80028fc <__aeabi_dsub+0x334>)
 80028ea:	3601      	adds	r6, #1
 80028ec:	429e      	cmp	r6, r3
 80028ee:	d000      	beq.n	80028f2 <__aeabi_dsub+0x32a>
 80028f0:	e09f      	b.n	8002a32 <__aeabi_dsub+0x46a>
 80028f2:	0031      	movs	r1, r6
 80028f4:	2300      	movs	r3, #0
 80028f6:	2200      	movs	r2, #0
 80028f8:	e70a      	b.n	8002710 <__aeabi_dsub+0x148>
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	000007ff 	.word	0x000007ff
 8002900:	ff7fffff 	.word	0xff7fffff
 8002904:	fffff801 	.word	0xfffff801
 8002908:	000007fe 	.word	0x000007fe
 800290c:	2a00      	cmp	r2, #0
 800290e:	d100      	bne.n	8002912 <__aeabi_dsub+0x34a>
 8002910:	e160      	b.n	8002bd4 <__aeabi_dsub+0x60c>
 8002912:	000a      	movs	r2, r1
 8002914:	4302      	orrs	r2, r0
 8002916:	d04d      	beq.n	80029b4 <__aeabi_dsub+0x3ec>
 8002918:	464a      	mov	r2, r9
 800291a:	075c      	lsls	r4, r3, #29
 800291c:	08d2      	lsrs	r2, r2, #3
 800291e:	4322      	orrs	r2, r4
 8002920:	2480      	movs	r4, #128	; 0x80
 8002922:	08db      	lsrs	r3, r3, #3
 8002924:	0324      	lsls	r4, r4, #12
 8002926:	4223      	tst	r3, r4
 8002928:	d007      	beq.n	800293a <__aeabi_dsub+0x372>
 800292a:	08ce      	lsrs	r6, r1, #3
 800292c:	4226      	tst	r6, r4
 800292e:	d104      	bne.n	800293a <__aeabi_dsub+0x372>
 8002930:	465d      	mov	r5, fp
 8002932:	0033      	movs	r3, r6
 8002934:	08c2      	lsrs	r2, r0, #3
 8002936:	0749      	lsls	r1, r1, #29
 8002938:	430a      	orrs	r2, r1
 800293a:	0f51      	lsrs	r1, r2, #29
 800293c:	00d2      	lsls	r2, r2, #3
 800293e:	08d2      	lsrs	r2, r2, #3
 8002940:	0749      	lsls	r1, r1, #29
 8002942:	430a      	orrs	r2, r1
 8002944:	0011      	movs	r1, r2
 8002946:	4319      	orrs	r1, r3
 8002948:	d100      	bne.n	800294c <__aeabi_dsub+0x384>
 800294a:	e1c8      	b.n	8002cde <__aeabi_dsub+0x716>
 800294c:	2180      	movs	r1, #128	; 0x80
 800294e:	0309      	lsls	r1, r1, #12
 8002950:	430b      	orrs	r3, r1
 8002952:	031b      	lsls	r3, r3, #12
 8002954:	49d5      	ldr	r1, [pc, #852]	; (8002cac <__aeabi_dsub+0x6e4>)
 8002956:	0b1b      	lsrs	r3, r3, #12
 8002958:	e6da      	b.n	8002710 <__aeabi_dsub+0x148>
 800295a:	49d5      	ldr	r1, [pc, #852]	; (8002cb0 <__aeabi_dsub+0x6e8>)
 800295c:	1ab6      	subs	r6, r6, r2
 800295e:	400b      	ands	r3, r1
 8002960:	4698      	mov	r8, r3
 8002962:	e6b5      	b.n	80026d0 <__aeabi_dsub+0x108>
 8002964:	0020      	movs	r0, r4
 8002966:	f000 fb3b 	bl	8002fe0 <__clzsi2>
 800296a:	0002      	movs	r2, r0
 800296c:	3218      	adds	r2, #24
 800296e:	2a1f      	cmp	r2, #31
 8002970:	dc00      	bgt.n	8002974 <__aeabi_dsub+0x3ac>
 8002972:	e68f      	b.n	8002694 <__aeabi_dsub+0xcc>
 8002974:	0023      	movs	r3, r4
 8002976:	3808      	subs	r0, #8
 8002978:	4083      	lsls	r3, r0
 800297a:	2400      	movs	r4, #0
 800297c:	e692      	b.n	80026a4 <__aeabi_dsub+0xdc>
 800297e:	4308      	orrs	r0, r1
 8002980:	0002      	movs	r2, r0
 8002982:	1e50      	subs	r0, r2, #1
 8002984:	4182      	sbcs	r2, r0
 8002986:	e66d      	b.n	8002664 <__aeabi_dsub+0x9c>
 8002988:	4cca      	ldr	r4, [pc, #808]	; (8002cb4 <__aeabi_dsub+0x6ec>)
 800298a:	1c72      	adds	r2, r6, #1
 800298c:	4222      	tst	r2, r4
 800298e:	d000      	beq.n	8002992 <__aeabi_dsub+0x3ca>
 8002990:	e0ad      	b.n	8002aee <__aeabi_dsub+0x526>
 8002992:	464a      	mov	r2, r9
 8002994:	431a      	orrs	r2, r3
 8002996:	2e00      	cmp	r6, #0
 8002998:	d1b8      	bne.n	800290c <__aeabi_dsub+0x344>
 800299a:	2a00      	cmp	r2, #0
 800299c:	d100      	bne.n	80029a0 <__aeabi_dsub+0x3d8>
 800299e:	e158      	b.n	8002c52 <__aeabi_dsub+0x68a>
 80029a0:	000a      	movs	r2, r1
 80029a2:	4302      	orrs	r2, r0
 80029a4:	d000      	beq.n	80029a8 <__aeabi_dsub+0x3e0>
 80029a6:	e159      	b.n	8002c5c <__aeabi_dsub+0x694>
 80029a8:	464a      	mov	r2, r9
 80029aa:	0759      	lsls	r1, r3, #29
 80029ac:	08d2      	lsrs	r2, r2, #3
 80029ae:	430a      	orrs	r2, r1
 80029b0:	08db      	lsrs	r3, r3, #3
 80029b2:	e786      	b.n	80028c2 <__aeabi_dsub+0x2fa>
 80029b4:	464a      	mov	r2, r9
 80029b6:	0759      	lsls	r1, r3, #29
 80029b8:	08d2      	lsrs	r2, r2, #3
 80029ba:	430a      	orrs	r2, r1
 80029bc:	08db      	lsrs	r3, r3, #3
 80029be:	e7c1      	b.n	8002944 <__aeabi_dsub+0x37c>
 80029c0:	4dba      	ldr	r5, [pc, #744]	; (8002cac <__aeabi_dsub+0x6e4>)
 80029c2:	42aa      	cmp	r2, r5
 80029c4:	d100      	bne.n	80029c8 <__aeabi_dsub+0x400>
 80029c6:	e11e      	b.n	8002c06 <__aeabi_dsub+0x63e>
 80029c8:	2580      	movs	r5, #128	; 0x80
 80029ca:	042d      	lsls	r5, r5, #16
 80029cc:	432b      	orrs	r3, r5
 80029ce:	4664      	mov	r4, ip
 80029d0:	2c38      	cmp	r4, #56	; 0x38
 80029d2:	dc5d      	bgt.n	8002a90 <__aeabi_dsub+0x4c8>
 80029d4:	2c1f      	cmp	r4, #31
 80029d6:	dd00      	ble.n	80029da <__aeabi_dsub+0x412>
 80029d8:	e0d0      	b.n	8002b7c <__aeabi_dsub+0x5b4>
 80029da:	2520      	movs	r5, #32
 80029dc:	4667      	mov	r7, ip
 80029de:	1b2d      	subs	r5, r5, r4
 80029e0:	464e      	mov	r6, r9
 80029e2:	001c      	movs	r4, r3
 80029e4:	40fe      	lsrs	r6, r7
 80029e6:	40ac      	lsls	r4, r5
 80029e8:	4334      	orrs	r4, r6
 80029ea:	464e      	mov	r6, r9
 80029ec:	40ae      	lsls	r6, r5
 80029ee:	0035      	movs	r5, r6
 80029f0:	40fb      	lsrs	r3, r7
 80029f2:	1e6e      	subs	r6, r5, #1
 80029f4:	41b5      	sbcs	r5, r6
 80029f6:	1ac9      	subs	r1, r1, r3
 80029f8:	432c      	orrs	r4, r5
 80029fa:	e04e      	b.n	8002a9a <__aeabi_dsub+0x4d2>
 80029fc:	464a      	mov	r2, r9
 80029fe:	1a14      	subs	r4, r2, r0
 8002a00:	45a1      	cmp	r9, r4
 8002a02:	4192      	sbcs	r2, r2
 8002a04:	4252      	negs	r2, r2
 8002a06:	4690      	mov	r8, r2
 8002a08:	1a5f      	subs	r7, r3, r1
 8002a0a:	003a      	movs	r2, r7
 8002a0c:	4647      	mov	r7, r8
 8002a0e:	1bd2      	subs	r2, r2, r7
 8002a10:	4690      	mov	r8, r2
 8002a12:	0212      	lsls	r2, r2, #8
 8002a14:	d500      	bpl.n	8002a18 <__aeabi_dsub+0x450>
 8002a16:	e08b      	b.n	8002b30 <__aeabi_dsub+0x568>
 8002a18:	4642      	mov	r2, r8
 8002a1a:	4322      	orrs	r2, r4
 8002a1c:	d000      	beq.n	8002a20 <__aeabi_dsub+0x458>
 8002a1e:	e630      	b.n	8002682 <__aeabi_dsub+0xba>
 8002a20:	2300      	movs	r3, #0
 8002a22:	2500      	movs	r5, #0
 8002a24:	e74d      	b.n	80028c2 <__aeabi_dsub+0x2fa>
 8002a26:	464a      	mov	r2, r9
 8002a28:	0759      	lsls	r1, r3, #29
 8002a2a:	08d2      	lsrs	r2, r2, #3
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	08db      	lsrs	r3, r3, #3
 8002a30:	e744      	b.n	80028bc <__aeabi_dsub+0x2f4>
 8002a32:	4642      	mov	r2, r8
 8002a34:	4b9e      	ldr	r3, [pc, #632]	; (8002cb0 <__aeabi_dsub+0x6e8>)
 8002a36:	0861      	lsrs	r1, r4, #1
 8002a38:	401a      	ands	r2, r3
 8002a3a:	0013      	movs	r3, r2
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	4014      	ands	r4, r2
 8002a40:	430c      	orrs	r4, r1
 8002a42:	07da      	lsls	r2, r3, #31
 8002a44:	085b      	lsrs	r3, r3, #1
 8002a46:	4698      	mov	r8, r3
 8002a48:	4314      	orrs	r4, r2
 8002a4a:	e641      	b.n	80026d0 <__aeabi_dsub+0x108>
 8002a4c:	001a      	movs	r2, r3
 8002a4e:	3e1f      	subs	r6, #31
 8002a50:	40f2      	lsrs	r2, r6
 8002a52:	0016      	movs	r6, r2
 8002a54:	2920      	cmp	r1, #32
 8002a56:	d003      	beq.n	8002a60 <__aeabi_dsub+0x498>
 8002a58:	2240      	movs	r2, #64	; 0x40
 8002a5a:	1a51      	subs	r1, r2, r1
 8002a5c:	408b      	lsls	r3, r1
 8002a5e:	431c      	orrs	r4, r3
 8002a60:	1e62      	subs	r2, r4, #1
 8002a62:	4194      	sbcs	r4, r2
 8002a64:	2300      	movs	r3, #0
 8002a66:	4334      	orrs	r4, r6
 8002a68:	4698      	mov	r8, r3
 8002a6a:	2600      	movs	r6, #0
 8002a6c:	e71d      	b.n	80028aa <__aeabi_dsub+0x2e2>
 8002a6e:	000c      	movs	r4, r1
 8002a70:	3a20      	subs	r2, #32
 8002a72:	40d4      	lsrs	r4, r2
 8002a74:	0022      	movs	r2, r4
 8002a76:	4664      	mov	r4, ip
 8002a78:	2c20      	cmp	r4, #32
 8002a7a:	d004      	beq.n	8002a86 <__aeabi_dsub+0x4be>
 8002a7c:	2740      	movs	r7, #64	; 0x40
 8002a7e:	1b3f      	subs	r7, r7, r4
 8002a80:	40b9      	lsls	r1, r7
 8002a82:	4308      	orrs	r0, r1
 8002a84:	4680      	mov	r8, r0
 8002a86:	4644      	mov	r4, r8
 8002a88:	1e61      	subs	r1, r4, #1
 8002a8a:	418c      	sbcs	r4, r1
 8002a8c:	4322      	orrs	r2, r4
 8002a8e:	e5e9      	b.n	8002664 <__aeabi_dsub+0x9c>
 8002a90:	464c      	mov	r4, r9
 8002a92:	4323      	orrs	r3, r4
 8002a94:	001c      	movs	r4, r3
 8002a96:	1e63      	subs	r3, r4, #1
 8002a98:	419c      	sbcs	r4, r3
 8002a9a:	1b04      	subs	r4, r0, r4
 8002a9c:	42a0      	cmp	r0, r4
 8002a9e:	419b      	sbcs	r3, r3
 8002aa0:	425b      	negs	r3, r3
 8002aa2:	1acb      	subs	r3, r1, r3
 8002aa4:	4698      	mov	r8, r3
 8002aa6:	465d      	mov	r5, fp
 8002aa8:	0016      	movs	r6, r2
 8002aaa:	e5e2      	b.n	8002672 <__aeabi_dsub+0xaa>
 8002aac:	464e      	mov	r6, r9
 8002aae:	431e      	orrs	r6, r3
 8002ab0:	d100      	bne.n	8002ab4 <__aeabi_dsub+0x4ec>
 8002ab2:	e0ae      	b.n	8002c12 <__aeabi_dsub+0x64a>
 8002ab4:	1e66      	subs	r6, r4, #1
 8002ab6:	2c01      	cmp	r4, #1
 8002ab8:	d100      	bne.n	8002abc <__aeabi_dsub+0x4f4>
 8002aba:	e0fd      	b.n	8002cb8 <__aeabi_dsub+0x6f0>
 8002abc:	4f7b      	ldr	r7, [pc, #492]	; (8002cac <__aeabi_dsub+0x6e4>)
 8002abe:	42bc      	cmp	r4, r7
 8002ac0:	d100      	bne.n	8002ac4 <__aeabi_dsub+0x4fc>
 8002ac2:	e107      	b.n	8002cd4 <__aeabi_dsub+0x70c>
 8002ac4:	46b4      	mov	ip, r6
 8002ac6:	e69b      	b.n	8002800 <__aeabi_dsub+0x238>
 8002ac8:	4664      	mov	r4, ip
 8002aca:	2220      	movs	r2, #32
 8002acc:	1b12      	subs	r2, r2, r4
 8002ace:	000c      	movs	r4, r1
 8002ad0:	4094      	lsls	r4, r2
 8002ad2:	0007      	movs	r7, r0
 8002ad4:	4090      	lsls	r0, r2
 8002ad6:	46a0      	mov	r8, r4
 8002ad8:	4664      	mov	r4, ip
 8002ada:	1e42      	subs	r2, r0, #1
 8002adc:	4190      	sbcs	r0, r2
 8002ade:	4662      	mov	r2, ip
 8002ae0:	40e7      	lsrs	r7, r4
 8002ae2:	4644      	mov	r4, r8
 8002ae4:	40d1      	lsrs	r1, r2
 8002ae6:	433c      	orrs	r4, r7
 8002ae8:	4304      	orrs	r4, r0
 8002aea:	185b      	adds	r3, r3, r1
 8002aec:	e6f3      	b.n	80028d6 <__aeabi_dsub+0x30e>
 8002aee:	4c6f      	ldr	r4, [pc, #444]	; (8002cac <__aeabi_dsub+0x6e4>)
 8002af0:	42a2      	cmp	r2, r4
 8002af2:	d100      	bne.n	8002af6 <__aeabi_dsub+0x52e>
 8002af4:	e0d5      	b.n	8002ca2 <__aeabi_dsub+0x6da>
 8002af6:	4448      	add	r0, r9
 8002af8:	185b      	adds	r3, r3, r1
 8002afa:	4548      	cmp	r0, r9
 8002afc:	4189      	sbcs	r1, r1
 8002afe:	4249      	negs	r1, r1
 8002b00:	185b      	adds	r3, r3, r1
 8002b02:	07dc      	lsls	r4, r3, #31
 8002b04:	0840      	lsrs	r0, r0, #1
 8002b06:	085b      	lsrs	r3, r3, #1
 8002b08:	4698      	mov	r8, r3
 8002b0a:	0016      	movs	r6, r2
 8002b0c:	4304      	orrs	r4, r0
 8002b0e:	e6cc      	b.n	80028aa <__aeabi_dsub+0x2e2>
 8002b10:	2a00      	cmp	r2, #0
 8002b12:	d000      	beq.n	8002b16 <__aeabi_dsub+0x54e>
 8002b14:	e082      	b.n	8002c1c <__aeabi_dsub+0x654>
 8002b16:	000a      	movs	r2, r1
 8002b18:	4302      	orrs	r2, r0
 8002b1a:	d140      	bne.n	8002b9e <__aeabi_dsub+0x5d6>
 8002b1c:	2380      	movs	r3, #128	; 0x80
 8002b1e:	2500      	movs	r5, #0
 8002b20:	031b      	lsls	r3, r3, #12
 8002b22:	e713      	b.n	800294c <__aeabi_dsub+0x384>
 8002b24:	074b      	lsls	r3, r1, #29
 8002b26:	08c2      	lsrs	r2, r0, #3
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	465d      	mov	r5, fp
 8002b2c:	08cb      	lsrs	r3, r1, #3
 8002b2e:	e6c5      	b.n	80028bc <__aeabi_dsub+0x2f4>
 8002b30:	464a      	mov	r2, r9
 8002b32:	1a84      	subs	r4, r0, r2
 8002b34:	42a0      	cmp	r0, r4
 8002b36:	4192      	sbcs	r2, r2
 8002b38:	1acb      	subs	r3, r1, r3
 8002b3a:	4252      	negs	r2, r2
 8002b3c:	1a9b      	subs	r3, r3, r2
 8002b3e:	4698      	mov	r8, r3
 8002b40:	465d      	mov	r5, fp
 8002b42:	e59e      	b.n	8002682 <__aeabi_dsub+0xba>
 8002b44:	464a      	mov	r2, r9
 8002b46:	0759      	lsls	r1, r3, #29
 8002b48:	08d2      	lsrs	r2, r2, #3
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	08db      	lsrs	r3, r3, #3
 8002b4e:	e6f9      	b.n	8002944 <__aeabi_dsub+0x37c>
 8002b50:	464a      	mov	r2, r9
 8002b52:	1a14      	subs	r4, r2, r0
 8002b54:	45a1      	cmp	r9, r4
 8002b56:	4192      	sbcs	r2, r2
 8002b58:	1a5b      	subs	r3, r3, r1
 8002b5a:	4252      	negs	r2, r2
 8002b5c:	1a9b      	subs	r3, r3, r2
 8002b5e:	4698      	mov	r8, r3
 8002b60:	2601      	movs	r6, #1
 8002b62:	e586      	b.n	8002672 <__aeabi_dsub+0xaa>
 8002b64:	464a      	mov	r2, r9
 8002b66:	0759      	lsls	r1, r3, #29
 8002b68:	08d2      	lsrs	r2, r2, #3
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	08db      	lsrs	r3, r3, #3
 8002b6e:	e6a5      	b.n	80028bc <__aeabi_dsub+0x2f4>
 8002b70:	464c      	mov	r4, r9
 8002b72:	4323      	orrs	r3, r4
 8002b74:	001c      	movs	r4, r3
 8002b76:	1e63      	subs	r3, r4, #1
 8002b78:	419c      	sbcs	r4, r3
 8002b7a:	e65b      	b.n	8002834 <__aeabi_dsub+0x26c>
 8002b7c:	4665      	mov	r5, ip
 8002b7e:	001e      	movs	r6, r3
 8002b80:	3d20      	subs	r5, #32
 8002b82:	40ee      	lsrs	r6, r5
 8002b84:	2c20      	cmp	r4, #32
 8002b86:	d005      	beq.n	8002b94 <__aeabi_dsub+0x5cc>
 8002b88:	2540      	movs	r5, #64	; 0x40
 8002b8a:	1b2d      	subs	r5, r5, r4
 8002b8c:	40ab      	lsls	r3, r5
 8002b8e:	464c      	mov	r4, r9
 8002b90:	431c      	orrs	r4, r3
 8002b92:	46a2      	mov	sl, r4
 8002b94:	4654      	mov	r4, sl
 8002b96:	1e63      	subs	r3, r4, #1
 8002b98:	419c      	sbcs	r4, r3
 8002b9a:	4334      	orrs	r4, r6
 8002b9c:	e77d      	b.n	8002a9a <__aeabi_dsub+0x4d2>
 8002b9e:	074b      	lsls	r3, r1, #29
 8002ba0:	08c2      	lsrs	r2, r0, #3
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	465d      	mov	r5, fp
 8002ba6:	08cb      	lsrs	r3, r1, #3
 8002ba8:	e6cc      	b.n	8002944 <__aeabi_dsub+0x37c>
 8002baa:	000a      	movs	r2, r1
 8002bac:	4302      	orrs	r2, r0
 8002bae:	d100      	bne.n	8002bb2 <__aeabi_dsub+0x5ea>
 8002bb0:	e736      	b.n	8002a20 <__aeabi_dsub+0x458>
 8002bb2:	074b      	lsls	r3, r1, #29
 8002bb4:	08c2      	lsrs	r2, r0, #3
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	465d      	mov	r5, fp
 8002bba:	08cb      	lsrs	r3, r1, #3
 8002bbc:	e681      	b.n	80028c2 <__aeabi_dsub+0x2fa>
 8002bbe:	464a      	mov	r2, r9
 8002bc0:	1a84      	subs	r4, r0, r2
 8002bc2:	42a0      	cmp	r0, r4
 8002bc4:	4192      	sbcs	r2, r2
 8002bc6:	1acb      	subs	r3, r1, r3
 8002bc8:	4252      	negs	r2, r2
 8002bca:	1a9b      	subs	r3, r3, r2
 8002bcc:	4698      	mov	r8, r3
 8002bce:	465d      	mov	r5, fp
 8002bd0:	2601      	movs	r6, #1
 8002bd2:	e54e      	b.n	8002672 <__aeabi_dsub+0xaa>
 8002bd4:	074b      	lsls	r3, r1, #29
 8002bd6:	08c2      	lsrs	r2, r0, #3
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	08cb      	lsrs	r3, r1, #3
 8002bdc:	e6b2      	b.n	8002944 <__aeabi_dsub+0x37c>
 8002bde:	464a      	mov	r2, r9
 8002be0:	1a14      	subs	r4, r2, r0
 8002be2:	45a1      	cmp	r9, r4
 8002be4:	4192      	sbcs	r2, r2
 8002be6:	1a5f      	subs	r7, r3, r1
 8002be8:	4252      	negs	r2, r2
 8002bea:	1aba      	subs	r2, r7, r2
 8002bec:	4690      	mov	r8, r2
 8002bee:	0212      	lsls	r2, r2, #8
 8002bf0:	d56b      	bpl.n	8002cca <__aeabi_dsub+0x702>
 8002bf2:	464a      	mov	r2, r9
 8002bf4:	1a84      	subs	r4, r0, r2
 8002bf6:	42a0      	cmp	r0, r4
 8002bf8:	4192      	sbcs	r2, r2
 8002bfa:	1acb      	subs	r3, r1, r3
 8002bfc:	4252      	negs	r2, r2
 8002bfe:	1a9b      	subs	r3, r3, r2
 8002c00:	4698      	mov	r8, r3
 8002c02:	465d      	mov	r5, fp
 8002c04:	e564      	b.n	80026d0 <__aeabi_dsub+0x108>
 8002c06:	074b      	lsls	r3, r1, #29
 8002c08:	08c2      	lsrs	r2, r0, #3
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	465d      	mov	r5, fp
 8002c0e:	08cb      	lsrs	r3, r1, #3
 8002c10:	e698      	b.n	8002944 <__aeabi_dsub+0x37c>
 8002c12:	074b      	lsls	r3, r1, #29
 8002c14:	08c2      	lsrs	r2, r0, #3
 8002c16:	431a      	orrs	r2, r3
 8002c18:	08cb      	lsrs	r3, r1, #3
 8002c1a:	e64f      	b.n	80028bc <__aeabi_dsub+0x2f4>
 8002c1c:	000a      	movs	r2, r1
 8002c1e:	4302      	orrs	r2, r0
 8002c20:	d090      	beq.n	8002b44 <__aeabi_dsub+0x57c>
 8002c22:	464a      	mov	r2, r9
 8002c24:	075c      	lsls	r4, r3, #29
 8002c26:	08d2      	lsrs	r2, r2, #3
 8002c28:	4314      	orrs	r4, r2
 8002c2a:	2280      	movs	r2, #128	; 0x80
 8002c2c:	08db      	lsrs	r3, r3, #3
 8002c2e:	0312      	lsls	r2, r2, #12
 8002c30:	4213      	tst	r3, r2
 8002c32:	d008      	beq.n	8002c46 <__aeabi_dsub+0x67e>
 8002c34:	08ce      	lsrs	r6, r1, #3
 8002c36:	4216      	tst	r6, r2
 8002c38:	d105      	bne.n	8002c46 <__aeabi_dsub+0x67e>
 8002c3a:	08c0      	lsrs	r0, r0, #3
 8002c3c:	0749      	lsls	r1, r1, #29
 8002c3e:	4308      	orrs	r0, r1
 8002c40:	0004      	movs	r4, r0
 8002c42:	465d      	mov	r5, fp
 8002c44:	0033      	movs	r3, r6
 8002c46:	0f61      	lsrs	r1, r4, #29
 8002c48:	00e2      	lsls	r2, r4, #3
 8002c4a:	0749      	lsls	r1, r1, #29
 8002c4c:	08d2      	lsrs	r2, r2, #3
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	e678      	b.n	8002944 <__aeabi_dsub+0x37c>
 8002c52:	074b      	lsls	r3, r1, #29
 8002c54:	08c2      	lsrs	r2, r0, #3
 8002c56:	431a      	orrs	r2, r3
 8002c58:	08cb      	lsrs	r3, r1, #3
 8002c5a:	e632      	b.n	80028c2 <__aeabi_dsub+0x2fa>
 8002c5c:	4448      	add	r0, r9
 8002c5e:	185b      	adds	r3, r3, r1
 8002c60:	4548      	cmp	r0, r9
 8002c62:	4192      	sbcs	r2, r2
 8002c64:	4698      	mov	r8, r3
 8002c66:	4252      	negs	r2, r2
 8002c68:	4490      	add	r8, r2
 8002c6a:	4643      	mov	r3, r8
 8002c6c:	0004      	movs	r4, r0
 8002c6e:	021b      	lsls	r3, r3, #8
 8002c70:	d400      	bmi.n	8002c74 <__aeabi_dsub+0x6ac>
 8002c72:	e61a      	b.n	80028aa <__aeabi_dsub+0x2e2>
 8002c74:	4642      	mov	r2, r8
 8002c76:	4b0e      	ldr	r3, [pc, #56]	; (8002cb0 <__aeabi_dsub+0x6e8>)
 8002c78:	2601      	movs	r6, #1
 8002c7a:	401a      	ands	r2, r3
 8002c7c:	4690      	mov	r8, r2
 8002c7e:	e614      	b.n	80028aa <__aeabi_dsub+0x2e2>
 8002c80:	4666      	mov	r6, ip
 8002c82:	001f      	movs	r7, r3
 8002c84:	3e20      	subs	r6, #32
 8002c86:	40f7      	lsrs	r7, r6
 8002c88:	2c20      	cmp	r4, #32
 8002c8a:	d005      	beq.n	8002c98 <__aeabi_dsub+0x6d0>
 8002c8c:	2640      	movs	r6, #64	; 0x40
 8002c8e:	1b36      	subs	r6, r6, r4
 8002c90:	40b3      	lsls	r3, r6
 8002c92:	464c      	mov	r4, r9
 8002c94:	431c      	orrs	r4, r3
 8002c96:	46a2      	mov	sl, r4
 8002c98:	4654      	mov	r4, sl
 8002c9a:	1e63      	subs	r3, r4, #1
 8002c9c:	419c      	sbcs	r4, r3
 8002c9e:	433c      	orrs	r4, r7
 8002ca0:	e5c8      	b.n	8002834 <__aeabi_dsub+0x26c>
 8002ca2:	0011      	movs	r1, r2
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	e532      	b.n	8002710 <__aeabi_dsub+0x148>
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	000007ff 	.word	0x000007ff
 8002cb0:	ff7fffff 	.word	0xff7fffff
 8002cb4:	000007fe 	.word	0x000007fe
 8002cb8:	464a      	mov	r2, r9
 8002cba:	1814      	adds	r4, r2, r0
 8002cbc:	4284      	cmp	r4, r0
 8002cbe:	4192      	sbcs	r2, r2
 8002cc0:	185b      	adds	r3, r3, r1
 8002cc2:	4698      	mov	r8, r3
 8002cc4:	4252      	negs	r2, r2
 8002cc6:	4490      	add	r8, r2
 8002cc8:	e5e9      	b.n	800289e <__aeabi_dsub+0x2d6>
 8002cca:	4642      	mov	r2, r8
 8002ccc:	4322      	orrs	r2, r4
 8002cce:	d100      	bne.n	8002cd2 <__aeabi_dsub+0x70a>
 8002cd0:	e6a6      	b.n	8002a20 <__aeabi_dsub+0x458>
 8002cd2:	e5ea      	b.n	80028aa <__aeabi_dsub+0x2e2>
 8002cd4:	074b      	lsls	r3, r1, #29
 8002cd6:	08c2      	lsrs	r2, r0, #3
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	08cb      	lsrs	r3, r1, #3
 8002cdc:	e632      	b.n	8002944 <__aeabi_dsub+0x37c>
 8002cde:	2200      	movs	r2, #0
 8002ce0:	4901      	ldr	r1, [pc, #4]	; (8002ce8 <__aeabi_dsub+0x720>)
 8002ce2:	0013      	movs	r3, r2
 8002ce4:	e514      	b.n	8002710 <__aeabi_dsub+0x148>
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	000007ff 	.word	0x000007ff

08002cec <__aeabi_dcmpun>:
 8002cec:	b570      	push	{r4, r5, r6, lr}
 8002cee:	0005      	movs	r5, r0
 8002cf0:	480c      	ldr	r0, [pc, #48]	; (8002d24 <__aeabi_dcmpun+0x38>)
 8002cf2:	030c      	lsls	r4, r1, #12
 8002cf4:	0016      	movs	r6, r2
 8002cf6:	0049      	lsls	r1, r1, #1
 8002cf8:	031a      	lsls	r2, r3, #12
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	0b24      	lsrs	r4, r4, #12
 8002cfe:	0d49      	lsrs	r1, r1, #21
 8002d00:	0b12      	lsrs	r2, r2, #12
 8002d02:	0d5b      	lsrs	r3, r3, #21
 8002d04:	4281      	cmp	r1, r0
 8002d06:	d008      	beq.n	8002d1a <__aeabi_dcmpun+0x2e>
 8002d08:	4906      	ldr	r1, [pc, #24]	; (8002d24 <__aeabi_dcmpun+0x38>)
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	428b      	cmp	r3, r1
 8002d0e:	d103      	bne.n	8002d18 <__aeabi_dcmpun+0x2c>
 8002d10:	4332      	orrs	r2, r6
 8002d12:	0010      	movs	r0, r2
 8002d14:	1e42      	subs	r2, r0, #1
 8002d16:	4190      	sbcs	r0, r2
 8002d18:	bd70      	pop	{r4, r5, r6, pc}
 8002d1a:	2001      	movs	r0, #1
 8002d1c:	432c      	orrs	r4, r5
 8002d1e:	d1fb      	bne.n	8002d18 <__aeabi_dcmpun+0x2c>
 8002d20:	e7f2      	b.n	8002d08 <__aeabi_dcmpun+0x1c>
 8002d22:	46c0      	nop			; (mov r8, r8)
 8002d24:	000007ff 	.word	0x000007ff

08002d28 <__aeabi_d2iz>:
 8002d28:	000a      	movs	r2, r1
 8002d2a:	b530      	push	{r4, r5, lr}
 8002d2c:	4c13      	ldr	r4, [pc, #76]	; (8002d7c <__aeabi_d2iz+0x54>)
 8002d2e:	0053      	lsls	r3, r2, #1
 8002d30:	0309      	lsls	r1, r1, #12
 8002d32:	0005      	movs	r5, r0
 8002d34:	0b09      	lsrs	r1, r1, #12
 8002d36:	2000      	movs	r0, #0
 8002d38:	0d5b      	lsrs	r3, r3, #21
 8002d3a:	0fd2      	lsrs	r2, r2, #31
 8002d3c:	42a3      	cmp	r3, r4
 8002d3e:	dd04      	ble.n	8002d4a <__aeabi_d2iz+0x22>
 8002d40:	480f      	ldr	r0, [pc, #60]	; (8002d80 <__aeabi_d2iz+0x58>)
 8002d42:	4283      	cmp	r3, r0
 8002d44:	dd02      	ble.n	8002d4c <__aeabi_d2iz+0x24>
 8002d46:	4b0f      	ldr	r3, [pc, #60]	; (8002d84 <__aeabi_d2iz+0x5c>)
 8002d48:	18d0      	adds	r0, r2, r3
 8002d4a:	bd30      	pop	{r4, r5, pc}
 8002d4c:	2080      	movs	r0, #128	; 0x80
 8002d4e:	0340      	lsls	r0, r0, #13
 8002d50:	4301      	orrs	r1, r0
 8002d52:	480d      	ldr	r0, [pc, #52]	; (8002d88 <__aeabi_d2iz+0x60>)
 8002d54:	1ac0      	subs	r0, r0, r3
 8002d56:	281f      	cmp	r0, #31
 8002d58:	dd08      	ble.n	8002d6c <__aeabi_d2iz+0x44>
 8002d5a:	480c      	ldr	r0, [pc, #48]	; (8002d8c <__aeabi_d2iz+0x64>)
 8002d5c:	1ac3      	subs	r3, r0, r3
 8002d5e:	40d9      	lsrs	r1, r3
 8002d60:	000b      	movs	r3, r1
 8002d62:	4258      	negs	r0, r3
 8002d64:	2a00      	cmp	r2, #0
 8002d66:	d1f0      	bne.n	8002d4a <__aeabi_d2iz+0x22>
 8002d68:	0018      	movs	r0, r3
 8002d6a:	e7ee      	b.n	8002d4a <__aeabi_d2iz+0x22>
 8002d6c:	4c08      	ldr	r4, [pc, #32]	; (8002d90 <__aeabi_d2iz+0x68>)
 8002d6e:	40c5      	lsrs	r5, r0
 8002d70:	46a4      	mov	ip, r4
 8002d72:	4463      	add	r3, ip
 8002d74:	4099      	lsls	r1, r3
 8002d76:	000b      	movs	r3, r1
 8002d78:	432b      	orrs	r3, r5
 8002d7a:	e7f2      	b.n	8002d62 <__aeabi_d2iz+0x3a>
 8002d7c:	000003fe 	.word	0x000003fe
 8002d80:	0000041d 	.word	0x0000041d
 8002d84:	7fffffff 	.word	0x7fffffff
 8002d88:	00000433 	.word	0x00000433
 8002d8c:	00000413 	.word	0x00000413
 8002d90:	fffffbed 	.word	0xfffffbed

08002d94 <__aeabi_i2d>:
 8002d94:	b570      	push	{r4, r5, r6, lr}
 8002d96:	2800      	cmp	r0, #0
 8002d98:	d016      	beq.n	8002dc8 <__aeabi_i2d+0x34>
 8002d9a:	17c3      	asrs	r3, r0, #31
 8002d9c:	18c5      	adds	r5, r0, r3
 8002d9e:	405d      	eors	r5, r3
 8002da0:	0fc4      	lsrs	r4, r0, #31
 8002da2:	0028      	movs	r0, r5
 8002da4:	f000 f91c 	bl	8002fe0 <__clzsi2>
 8002da8:	4a11      	ldr	r2, [pc, #68]	; (8002df0 <__aeabi_i2d+0x5c>)
 8002daa:	1a12      	subs	r2, r2, r0
 8002dac:	280a      	cmp	r0, #10
 8002dae:	dc16      	bgt.n	8002dde <__aeabi_i2d+0x4a>
 8002db0:	0003      	movs	r3, r0
 8002db2:	002e      	movs	r6, r5
 8002db4:	3315      	adds	r3, #21
 8002db6:	409e      	lsls	r6, r3
 8002db8:	230b      	movs	r3, #11
 8002dba:	1a18      	subs	r0, r3, r0
 8002dbc:	40c5      	lsrs	r5, r0
 8002dbe:	0553      	lsls	r3, r2, #21
 8002dc0:	032d      	lsls	r5, r5, #12
 8002dc2:	0b2d      	lsrs	r5, r5, #12
 8002dc4:	0d5b      	lsrs	r3, r3, #21
 8002dc6:	e003      	b.n	8002dd0 <__aeabi_i2d+0x3c>
 8002dc8:	2400      	movs	r4, #0
 8002dca:	2300      	movs	r3, #0
 8002dcc:	2500      	movs	r5, #0
 8002dce:	2600      	movs	r6, #0
 8002dd0:	051b      	lsls	r3, r3, #20
 8002dd2:	432b      	orrs	r3, r5
 8002dd4:	07e4      	lsls	r4, r4, #31
 8002dd6:	4323      	orrs	r3, r4
 8002dd8:	0030      	movs	r0, r6
 8002dda:	0019      	movs	r1, r3
 8002ddc:	bd70      	pop	{r4, r5, r6, pc}
 8002dde:	380b      	subs	r0, #11
 8002de0:	4085      	lsls	r5, r0
 8002de2:	0553      	lsls	r3, r2, #21
 8002de4:	032d      	lsls	r5, r5, #12
 8002de6:	2600      	movs	r6, #0
 8002de8:	0b2d      	lsrs	r5, r5, #12
 8002dea:	0d5b      	lsrs	r3, r3, #21
 8002dec:	e7f0      	b.n	8002dd0 <__aeabi_i2d+0x3c>
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	0000041e 	.word	0x0000041e

08002df4 <__aeabi_ui2d>:
 8002df4:	b510      	push	{r4, lr}
 8002df6:	1e04      	subs	r4, r0, #0
 8002df8:	d010      	beq.n	8002e1c <__aeabi_ui2d+0x28>
 8002dfa:	f000 f8f1 	bl	8002fe0 <__clzsi2>
 8002dfe:	4b0f      	ldr	r3, [pc, #60]	; (8002e3c <__aeabi_ui2d+0x48>)
 8002e00:	1a1b      	subs	r3, r3, r0
 8002e02:	280a      	cmp	r0, #10
 8002e04:	dc11      	bgt.n	8002e2a <__aeabi_ui2d+0x36>
 8002e06:	220b      	movs	r2, #11
 8002e08:	0021      	movs	r1, r4
 8002e0a:	1a12      	subs	r2, r2, r0
 8002e0c:	40d1      	lsrs	r1, r2
 8002e0e:	3015      	adds	r0, #21
 8002e10:	030a      	lsls	r2, r1, #12
 8002e12:	055b      	lsls	r3, r3, #21
 8002e14:	4084      	lsls	r4, r0
 8002e16:	0b12      	lsrs	r2, r2, #12
 8002e18:	0d5b      	lsrs	r3, r3, #21
 8002e1a:	e001      	b.n	8002e20 <__aeabi_ui2d+0x2c>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	2200      	movs	r2, #0
 8002e20:	051b      	lsls	r3, r3, #20
 8002e22:	4313      	orrs	r3, r2
 8002e24:	0020      	movs	r0, r4
 8002e26:	0019      	movs	r1, r3
 8002e28:	bd10      	pop	{r4, pc}
 8002e2a:	0022      	movs	r2, r4
 8002e2c:	380b      	subs	r0, #11
 8002e2e:	4082      	lsls	r2, r0
 8002e30:	055b      	lsls	r3, r3, #21
 8002e32:	0312      	lsls	r2, r2, #12
 8002e34:	2400      	movs	r4, #0
 8002e36:	0b12      	lsrs	r2, r2, #12
 8002e38:	0d5b      	lsrs	r3, r3, #21
 8002e3a:	e7f1      	b.n	8002e20 <__aeabi_ui2d+0x2c>
 8002e3c:	0000041e 	.word	0x0000041e

08002e40 <__aeabi_f2d>:
 8002e40:	b570      	push	{r4, r5, r6, lr}
 8002e42:	0043      	lsls	r3, r0, #1
 8002e44:	0246      	lsls	r6, r0, #9
 8002e46:	0fc4      	lsrs	r4, r0, #31
 8002e48:	20fe      	movs	r0, #254	; 0xfe
 8002e4a:	0e1b      	lsrs	r3, r3, #24
 8002e4c:	1c59      	adds	r1, r3, #1
 8002e4e:	0a75      	lsrs	r5, r6, #9
 8002e50:	4208      	tst	r0, r1
 8002e52:	d00c      	beq.n	8002e6e <__aeabi_f2d+0x2e>
 8002e54:	22e0      	movs	r2, #224	; 0xe0
 8002e56:	0092      	lsls	r2, r2, #2
 8002e58:	4694      	mov	ip, r2
 8002e5a:	076d      	lsls	r5, r5, #29
 8002e5c:	0b36      	lsrs	r6, r6, #12
 8002e5e:	4463      	add	r3, ip
 8002e60:	051b      	lsls	r3, r3, #20
 8002e62:	4333      	orrs	r3, r6
 8002e64:	07e4      	lsls	r4, r4, #31
 8002e66:	4323      	orrs	r3, r4
 8002e68:	0028      	movs	r0, r5
 8002e6a:	0019      	movs	r1, r3
 8002e6c:	bd70      	pop	{r4, r5, r6, pc}
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d114      	bne.n	8002e9c <__aeabi_f2d+0x5c>
 8002e72:	2d00      	cmp	r5, #0
 8002e74:	d01b      	beq.n	8002eae <__aeabi_f2d+0x6e>
 8002e76:	0028      	movs	r0, r5
 8002e78:	f000 f8b2 	bl	8002fe0 <__clzsi2>
 8002e7c:	280a      	cmp	r0, #10
 8002e7e:	dc1c      	bgt.n	8002eba <__aeabi_f2d+0x7a>
 8002e80:	230b      	movs	r3, #11
 8002e82:	002a      	movs	r2, r5
 8002e84:	1a1b      	subs	r3, r3, r0
 8002e86:	40da      	lsrs	r2, r3
 8002e88:	0003      	movs	r3, r0
 8002e8a:	3315      	adds	r3, #21
 8002e8c:	409d      	lsls	r5, r3
 8002e8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <__aeabi_f2d+0x88>)
 8002e90:	0312      	lsls	r2, r2, #12
 8002e92:	1a1b      	subs	r3, r3, r0
 8002e94:	055b      	lsls	r3, r3, #21
 8002e96:	0b16      	lsrs	r6, r2, #12
 8002e98:	0d5b      	lsrs	r3, r3, #21
 8002e9a:	e7e1      	b.n	8002e60 <__aeabi_f2d+0x20>
 8002e9c:	2d00      	cmp	r5, #0
 8002e9e:	d009      	beq.n	8002eb4 <__aeabi_f2d+0x74>
 8002ea0:	0b32      	lsrs	r2, r6, #12
 8002ea2:	2680      	movs	r6, #128	; 0x80
 8002ea4:	0336      	lsls	r6, r6, #12
 8002ea6:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <__aeabi_f2d+0x8c>)
 8002ea8:	076d      	lsls	r5, r5, #29
 8002eaa:	4316      	orrs	r6, r2
 8002eac:	e7d8      	b.n	8002e60 <__aeabi_f2d+0x20>
 8002eae:	2300      	movs	r3, #0
 8002eb0:	2600      	movs	r6, #0
 8002eb2:	e7d5      	b.n	8002e60 <__aeabi_f2d+0x20>
 8002eb4:	2600      	movs	r6, #0
 8002eb6:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <__aeabi_f2d+0x8c>)
 8002eb8:	e7d2      	b.n	8002e60 <__aeabi_f2d+0x20>
 8002eba:	0003      	movs	r3, r0
 8002ebc:	002a      	movs	r2, r5
 8002ebe:	3b0b      	subs	r3, #11
 8002ec0:	409a      	lsls	r2, r3
 8002ec2:	2500      	movs	r5, #0
 8002ec4:	e7e3      	b.n	8002e8e <__aeabi_f2d+0x4e>
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	00000389 	.word	0x00000389
 8002ecc:	000007ff 	.word	0x000007ff

08002ed0 <__aeabi_d2f>:
 8002ed0:	0002      	movs	r2, r0
 8002ed2:	004b      	lsls	r3, r1, #1
 8002ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ed6:	0308      	lsls	r0, r1, #12
 8002ed8:	0d5b      	lsrs	r3, r3, #21
 8002eda:	4e3d      	ldr	r6, [pc, #244]	; (8002fd0 <__aeabi_d2f+0x100>)
 8002edc:	0fcc      	lsrs	r4, r1, #31
 8002ede:	0a40      	lsrs	r0, r0, #9
 8002ee0:	0f51      	lsrs	r1, r2, #29
 8002ee2:	1c5f      	adds	r7, r3, #1
 8002ee4:	4308      	orrs	r0, r1
 8002ee6:	00d5      	lsls	r5, r2, #3
 8002ee8:	4237      	tst	r7, r6
 8002eea:	d00a      	beq.n	8002f02 <__aeabi_d2f+0x32>
 8002eec:	4939      	ldr	r1, [pc, #228]	; (8002fd4 <__aeabi_d2f+0x104>)
 8002eee:	185e      	adds	r6, r3, r1
 8002ef0:	2efe      	cmp	r6, #254	; 0xfe
 8002ef2:	dd16      	ble.n	8002f22 <__aeabi_d2f+0x52>
 8002ef4:	23ff      	movs	r3, #255	; 0xff
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	05db      	lsls	r3, r3, #23
 8002efa:	430b      	orrs	r3, r1
 8002efc:	07e0      	lsls	r0, r4, #31
 8002efe:	4318      	orrs	r0, r3
 8002f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d106      	bne.n	8002f14 <__aeabi_d2f+0x44>
 8002f06:	4328      	orrs	r0, r5
 8002f08:	d027      	beq.n	8002f5a <__aeabi_d2f+0x8a>
 8002f0a:	2105      	movs	r1, #5
 8002f0c:	0189      	lsls	r1, r1, #6
 8002f0e:	0a49      	lsrs	r1, r1, #9
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	e7f1      	b.n	8002ef8 <__aeabi_d2f+0x28>
 8002f14:	4305      	orrs	r5, r0
 8002f16:	d0ed      	beq.n	8002ef4 <__aeabi_d2f+0x24>
 8002f18:	2180      	movs	r1, #128	; 0x80
 8002f1a:	03c9      	lsls	r1, r1, #15
 8002f1c:	23ff      	movs	r3, #255	; 0xff
 8002f1e:	4301      	orrs	r1, r0
 8002f20:	e7ea      	b.n	8002ef8 <__aeabi_d2f+0x28>
 8002f22:	2e00      	cmp	r6, #0
 8002f24:	dd1c      	ble.n	8002f60 <__aeabi_d2f+0x90>
 8002f26:	0192      	lsls	r2, r2, #6
 8002f28:	0011      	movs	r1, r2
 8002f2a:	1e4a      	subs	r2, r1, #1
 8002f2c:	4191      	sbcs	r1, r2
 8002f2e:	00c0      	lsls	r0, r0, #3
 8002f30:	0f6d      	lsrs	r5, r5, #29
 8002f32:	4301      	orrs	r1, r0
 8002f34:	4329      	orrs	r1, r5
 8002f36:	074b      	lsls	r3, r1, #29
 8002f38:	d048      	beq.n	8002fcc <__aeabi_d2f+0xfc>
 8002f3a:	230f      	movs	r3, #15
 8002f3c:	400b      	ands	r3, r1
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d000      	beq.n	8002f44 <__aeabi_d2f+0x74>
 8002f42:	3104      	adds	r1, #4
 8002f44:	2380      	movs	r3, #128	; 0x80
 8002f46:	04db      	lsls	r3, r3, #19
 8002f48:	400b      	ands	r3, r1
 8002f4a:	d03f      	beq.n	8002fcc <__aeabi_d2f+0xfc>
 8002f4c:	1c72      	adds	r2, r6, #1
 8002f4e:	2efe      	cmp	r6, #254	; 0xfe
 8002f50:	d0d0      	beq.n	8002ef4 <__aeabi_d2f+0x24>
 8002f52:	0189      	lsls	r1, r1, #6
 8002f54:	0a49      	lsrs	r1, r1, #9
 8002f56:	b2d3      	uxtb	r3, r2
 8002f58:	e7ce      	b.n	8002ef8 <__aeabi_d2f+0x28>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	e7cb      	b.n	8002ef8 <__aeabi_d2f+0x28>
 8002f60:	0032      	movs	r2, r6
 8002f62:	3217      	adds	r2, #23
 8002f64:	db22      	blt.n	8002fac <__aeabi_d2f+0xdc>
 8002f66:	2180      	movs	r1, #128	; 0x80
 8002f68:	221e      	movs	r2, #30
 8002f6a:	0409      	lsls	r1, r1, #16
 8002f6c:	4308      	orrs	r0, r1
 8002f6e:	1b92      	subs	r2, r2, r6
 8002f70:	2a1f      	cmp	r2, #31
 8002f72:	dd1d      	ble.n	8002fb0 <__aeabi_d2f+0xe0>
 8002f74:	2102      	movs	r1, #2
 8002f76:	4249      	negs	r1, r1
 8002f78:	1b8e      	subs	r6, r1, r6
 8002f7a:	0001      	movs	r1, r0
 8002f7c:	40f1      	lsrs	r1, r6
 8002f7e:	000e      	movs	r6, r1
 8002f80:	2a20      	cmp	r2, #32
 8002f82:	d004      	beq.n	8002f8e <__aeabi_d2f+0xbe>
 8002f84:	4a14      	ldr	r2, [pc, #80]	; (8002fd8 <__aeabi_d2f+0x108>)
 8002f86:	4694      	mov	ip, r2
 8002f88:	4463      	add	r3, ip
 8002f8a:	4098      	lsls	r0, r3
 8002f8c:	4305      	orrs	r5, r0
 8002f8e:	0029      	movs	r1, r5
 8002f90:	1e4d      	subs	r5, r1, #1
 8002f92:	41a9      	sbcs	r1, r5
 8002f94:	4331      	orrs	r1, r6
 8002f96:	2600      	movs	r6, #0
 8002f98:	074b      	lsls	r3, r1, #29
 8002f9a:	d1ce      	bne.n	8002f3a <__aeabi_d2f+0x6a>
 8002f9c:	2080      	movs	r0, #128	; 0x80
 8002f9e:	000b      	movs	r3, r1
 8002fa0:	04c0      	lsls	r0, r0, #19
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	4003      	ands	r3, r0
 8002fa6:	4201      	tst	r1, r0
 8002fa8:	d1d3      	bne.n	8002f52 <__aeabi_d2f+0x82>
 8002faa:	e7af      	b.n	8002f0c <__aeabi_d2f+0x3c>
 8002fac:	2300      	movs	r3, #0
 8002fae:	e7ac      	b.n	8002f0a <__aeabi_d2f+0x3a>
 8002fb0:	490a      	ldr	r1, [pc, #40]	; (8002fdc <__aeabi_d2f+0x10c>)
 8002fb2:	468c      	mov	ip, r1
 8002fb4:	0029      	movs	r1, r5
 8002fb6:	4463      	add	r3, ip
 8002fb8:	40d1      	lsrs	r1, r2
 8002fba:	409d      	lsls	r5, r3
 8002fbc:	000a      	movs	r2, r1
 8002fbe:	0029      	movs	r1, r5
 8002fc0:	4098      	lsls	r0, r3
 8002fc2:	1e4d      	subs	r5, r1, #1
 8002fc4:	41a9      	sbcs	r1, r5
 8002fc6:	4301      	orrs	r1, r0
 8002fc8:	4311      	orrs	r1, r2
 8002fca:	e7e4      	b.n	8002f96 <__aeabi_d2f+0xc6>
 8002fcc:	0033      	movs	r3, r6
 8002fce:	e79d      	b.n	8002f0c <__aeabi_d2f+0x3c>
 8002fd0:	000007fe 	.word	0x000007fe
 8002fd4:	fffffc80 	.word	0xfffffc80
 8002fd8:	fffffca2 	.word	0xfffffca2
 8002fdc:	fffffc82 	.word	0xfffffc82

08002fe0 <__clzsi2>:
 8002fe0:	211c      	movs	r1, #28
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	041b      	lsls	r3, r3, #16
 8002fe6:	4298      	cmp	r0, r3
 8002fe8:	d301      	bcc.n	8002fee <__clzsi2+0xe>
 8002fea:	0c00      	lsrs	r0, r0, #16
 8002fec:	3910      	subs	r1, #16
 8002fee:	0a1b      	lsrs	r3, r3, #8
 8002ff0:	4298      	cmp	r0, r3
 8002ff2:	d301      	bcc.n	8002ff8 <__clzsi2+0x18>
 8002ff4:	0a00      	lsrs	r0, r0, #8
 8002ff6:	3908      	subs	r1, #8
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	4298      	cmp	r0, r3
 8002ffc:	d301      	bcc.n	8003002 <__clzsi2+0x22>
 8002ffe:	0900      	lsrs	r0, r0, #4
 8003000:	3904      	subs	r1, #4
 8003002:	a202      	add	r2, pc, #8	; (adr r2, 800300c <__clzsi2+0x2c>)
 8003004:	5c10      	ldrb	r0, [r2, r0]
 8003006:	1840      	adds	r0, r0, r1
 8003008:	4770      	bx	lr
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	02020304 	.word	0x02020304
 8003010:	01010101 	.word	0x01010101
	...

0800301c <__clzdi2>:
 800301c:	b510      	push	{r4, lr}
 800301e:	2900      	cmp	r1, #0
 8003020:	d103      	bne.n	800302a <__clzdi2+0xe>
 8003022:	f7ff ffdd 	bl	8002fe0 <__clzsi2>
 8003026:	3020      	adds	r0, #32
 8003028:	e002      	b.n	8003030 <__clzdi2+0x14>
 800302a:	1c08      	adds	r0, r1, #0
 800302c:	f7ff ffd8 	bl	8002fe0 <__clzsi2>
 8003030:	bd10      	pop	{r4, pc}
 8003032:	46c0      	nop			; (mov r8, r8)

08003034 <operation>:
#include "stdio.h"
#include "string.h"


void operation()
{
 8003034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003036:	46ce      	mov	lr, r9
 8003038:	4647      	mov	r7, r8
 800303a:	b580      	push	{r7, lr}
 800303c:	b091      	sub	sp, #68	; 0x44
 800303e:	af0a      	add	r7, sp, #40	; 0x28
	if(HAL_GetTick()>tickSec)
 8003040:	f001 f9bc 	bl	80043bc <HAL_GetTick>
 8003044:	0002      	movs	r2, r0
 8003046:	4b51      	ldr	r3, [pc, #324]	; (800318c <operation+0x158>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d911      	bls.n	8003072 <operation+0x3e>
	{
		tickSec = HAL_GetTick()+990;
 800304e:	f001 f9b5 	bl	80043bc <HAL_GetTick>
 8003052:	0003      	movs	r3, r0
 8003054:	4a4e      	ldr	r2, [pc, #312]	; (8003190 <operation+0x15c>)
 8003056:	189a      	adds	r2, r3, r2
 8003058:	4b4c      	ldr	r3, [pc, #304]	; (800318c <operation+0x158>)
 800305a:	601a      	str	r2, [r3, #0]
		Sec++;
 800305c:	4b4d      	ldr	r3, [pc, #308]	; (8003194 <operation+0x160>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	4b4c      	ldr	r3, [pc, #304]	; (8003194 <operation+0x160>)
 8003064:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8003066:	23a0      	movs	r3, #160	; 0xa0
 8003068:	05db      	lsls	r3, r3, #23
 800306a:	2120      	movs	r1, #32
 800306c:	0018      	movs	r0, r3
 800306e:	f002 f927 	bl	80052c0 <HAL_GPIO_TogglePin>
	}

	for(int i = 0;i<sizeof(BUFFER_SIZE3);i++)
 8003072:	2300      	movs	r3, #0
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	e039      	b.n	80030ec <operation+0xb8>
	{
		Com_buf[i] = " ";
 8003078:	4b47      	ldr	r3, [pc, #284]	; (8003198 <operation+0x164>)
 800307a:	b2d9      	uxtb	r1, r3
 800307c:	4a47      	ldr	r2, [pc, #284]	; (800319c <operation+0x168>)
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	18d3      	adds	r3, r2, r3
 8003082:	1c0a      	adds	r2, r1, #0
 8003084:	701a      	strb	r2, [r3, #0]
		if(i<sizeof(BUFFER_SIZE1))
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	2b03      	cmp	r3, #3
 800308a:	d81b      	bhi.n	80030c4 <operation+0x90>
		{
			AD101_Status[i] = " ";
 800308c:	4b42      	ldr	r3, [pc, #264]	; (8003198 <operation+0x164>)
 800308e:	b2d9      	uxtb	r1, r3
 8003090:	4a43      	ldr	r2, [pc, #268]	; (80031a0 <operation+0x16c>)
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	18d3      	adds	r3, r2, r3
 8003096:	1c0a      	adds	r2, r1, #0
 8003098:	701a      	strb	r2, [r3, #0]
			AD101_Test[i] = " ";
 800309a:	4b3f      	ldr	r3, [pc, #252]	; (8003198 <operation+0x164>)
 800309c:	b2d9      	uxtb	r1, r3
 800309e:	4a41      	ldr	r2, [pc, #260]	; (80031a4 <operation+0x170>)
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	18d3      	adds	r3, r2, r3
 80030a4:	1c0a      	adds	r2, r1, #0
 80030a6:	701a      	strb	r2, [r3, #0]
			FMA1[i] = " ";
 80030a8:	4b3b      	ldr	r3, [pc, #236]	; (8003198 <operation+0x164>)
 80030aa:	b2d9      	uxtb	r1, r3
 80030ac:	4a3e      	ldr	r2, [pc, #248]	; (80031a8 <operation+0x174>)
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	18d3      	adds	r3, r2, r3
 80030b2:	1c0a      	adds	r2, r1, #0
 80030b4:	701a      	strb	r2, [r3, #0]
			FMA2[i] = " ";
 80030b6:	4b38      	ldr	r3, [pc, #224]	; (8003198 <operation+0x164>)
 80030b8:	b2d9      	uxtb	r1, r3
 80030ba:	4a3c      	ldr	r2, [pc, #240]	; (80031ac <operation+0x178>)
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	18d3      	adds	r3, r2, r3
 80030c0:	1c0a      	adds	r2, r1, #0
 80030c2:	701a      	strb	r2, [r3, #0]
		}
		if(i<sizeof(BUFFER_SIZE2))
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	2b03      	cmp	r3, #3
 80030c8:	d80d      	bhi.n	80030e6 <operation+0xb2>
		{
			AD101_Str[i] = " ";
 80030ca:	4b33      	ldr	r3, [pc, #204]	; (8003198 <operation+0x164>)
 80030cc:	b2d9      	uxtb	r1, r3
 80030ce:	4a38      	ldr	r2, [pc, #224]	; (80031b0 <operation+0x17c>)
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	18d3      	adds	r3, r2, r3
 80030d4:	1c0a      	adds	r2, r1, #0
 80030d6:	701a      	strb	r2, [r3, #0]
			FMA_Str[i] = " ";
 80030d8:	4b2f      	ldr	r3, [pc, #188]	; (8003198 <operation+0x164>)
 80030da:	b2d9      	uxtb	r1, r3
 80030dc:	4a35      	ldr	r2, [pc, #212]	; (80031b4 <operation+0x180>)
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	18d3      	adds	r3, r2, r3
 80030e2:	1c0a      	adds	r2, r1, #0
 80030e4:	701a      	strb	r2, [r3, #0]
	for(int i = 0;i<sizeof(BUFFER_SIZE3);i++)
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	3301      	adds	r3, #1
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	2b03      	cmp	r3, #3
 80030f0:	d9c2      	bls.n	8003078 <operation+0x44>
		}
	}


	AD101();
 80030f2:	f000 f873 	bl	80031dc <AD101>
	FMA();
 80030f6:	f000 f8cb 	bl	8003290 <FMA>
	PWM();
 80030fa:	f000 fae5 	bl	80036c8 <PWM>


	//sprintf(Com_buf,"\r\n%d %s | %s",Sec,AD101_Str,FMA_Str);
	sprintf(Com_buf,"\r\n%d\t%d\t%d\t%.3f\t%.3f\t%.3f\t%.3f",Sec,AD101T,AD101S,Force1,Temp1,Force2,Temp2);
 80030fe:	4b25      	ldr	r3, [pc, #148]	; (8003194 <operation+0x160>)
 8003100:	681e      	ldr	r6, [r3, #0]
 8003102:	4b2d      	ldr	r3, [pc, #180]	; (80031b8 <operation+0x184>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	4699      	mov	r9, r3
 8003108:	4b2c      	ldr	r3, [pc, #176]	; (80031bc <operation+0x188>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	4698      	mov	r8, r3
 800310e:	4b2c      	ldr	r3, [pc, #176]	; (80031c0 <operation+0x18c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	1c18      	adds	r0, r3, #0
 8003114:	f7ff fe94 	bl	8002e40 <__aeabi_f2d>
 8003118:	0004      	movs	r4, r0
 800311a:	000d      	movs	r5, r1
 800311c:	4b29      	ldr	r3, [pc, #164]	; (80031c4 <operation+0x190>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	1c18      	adds	r0, r3, #0
 8003122:	f7ff fe8d 	bl	8002e40 <__aeabi_f2d>
 8003126:	60b8      	str	r0, [r7, #8]
 8003128:	60f9      	str	r1, [r7, #12]
 800312a:	4b27      	ldr	r3, [pc, #156]	; (80031c8 <operation+0x194>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	1c18      	adds	r0, r3, #0
 8003130:	f7ff fe86 	bl	8002e40 <__aeabi_f2d>
 8003134:	6038      	str	r0, [r7, #0]
 8003136:	6079      	str	r1, [r7, #4]
 8003138:	4b24      	ldr	r3, [pc, #144]	; (80031cc <operation+0x198>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	1c18      	adds	r0, r3, #0
 800313e:	f7ff fe7f 	bl	8002e40 <__aeabi_f2d>
 8003142:	0002      	movs	r2, r0
 8003144:	000b      	movs	r3, r1
 8003146:	4922      	ldr	r1, [pc, #136]	; (80031d0 <operation+0x19c>)
 8003148:	4814      	ldr	r0, [pc, #80]	; (800319c <operation+0x168>)
 800314a:	9208      	str	r2, [sp, #32]
 800314c:	9309      	str	r3, [sp, #36]	; 0x24
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	9206      	str	r2, [sp, #24]
 8003154:	9307      	str	r3, [sp, #28]
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	9204      	str	r2, [sp, #16]
 800315c:	9305      	str	r3, [sp, #20]
 800315e:	9402      	str	r4, [sp, #8]
 8003160:	9503      	str	r5, [sp, #12]
 8003162:	4643      	mov	r3, r8
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	464b      	mov	r3, r9
 8003168:	0032      	movs	r2, r6
 800316a:	f005 fabf 	bl	80086ec <siprintf>
	HAL_UART_Transmit(&huart2, Com_buf, sizeof(Com_buf), HAL_MAX_DELAY);
 800316e:	2301      	movs	r3, #1
 8003170:	425b      	negs	r3, r3
 8003172:	4a18      	ldr	r2, [pc, #96]	; (80031d4 <operation+0x1a0>)
 8003174:	4909      	ldr	r1, [pc, #36]	; (800319c <operation+0x168>)
 8003176:	4818      	ldr	r0, [pc, #96]	; (80031d8 <operation+0x1a4>)
 8003178:	f004 f92c 	bl	80073d4 <HAL_UART_Transmit>

}
 800317c:	46c0      	nop			; (mov r8, r8)
 800317e:	46bd      	mov	sp, r7
 8003180:	b007      	add	sp, #28
 8003182:	bcc0      	pop	{r6, r7}
 8003184:	46b9      	mov	r9, r7
 8003186:	46b0      	mov	r8, r6
 8003188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	2000041c 	.word	0x2000041c
 8003190:	000003de 	.word	0x000003de
 8003194:	200003b0 	.word	0x200003b0
 8003198:	0800aca8 	.word	0x0800aca8
 800319c:	20000498 	.word	0x20000498
 80031a0:	200003b8 	.word	0x200003b8
 80031a4:	200007dc 	.word	0x200007dc
 80031a8:	2000042c 	.word	0x2000042c
 80031ac:	20000340 	.word	0x20000340
 80031b0:	20000240 	.word	0x20000240
 80031b4:	200006c4 	.word	0x200006c4
 80031b8:	200007c6 	.word	0x200007c6
 80031bc:	20000844 	.word	0x20000844
 80031c0:	2000023c 	.word	0x2000023c
 80031c4:	200007d8 	.word	0x200007d8
 80031c8:	200003b4 	.word	0x200003b4
 80031cc:	20000490 	.word	0x20000490
 80031d0:	0800acac 	.word	0x0800acac
 80031d4:	00000226 	.word	0x00000226
 80031d8:	200009c4 	.word	0x200009c4

080031dc <AD101>:

void AD101()
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0

	AD101S = HAL_GPIO_ReadPin(AD101_O_GPIO_Port, AD101_O_Pin);
 80031e0:	2380      	movs	r3, #128	; 0x80
 80031e2:	009a      	lsls	r2, r3, #2
 80031e4:	23a0      	movs	r3, #160	; 0xa0
 80031e6:	05db      	lsls	r3, r3, #23
 80031e8:	0011      	movs	r1, r2
 80031ea:	0018      	movs	r0, r3
 80031ec:	f002 f82e 	bl	800524c <HAL_GPIO_ReadPin>
 80031f0:	0003      	movs	r3, r0
 80031f2:	001a      	movs	r2, r3
 80031f4:	4b1c      	ldr	r3, [pc, #112]	; (8003268 <AD101+0x8c>)
 80031f6:	701a      	strb	r2, [r3, #0]
	AD101T = HAL_GPIO_ReadPin(AD101_S_GPIO_Port, AD101_S_Pin);
 80031f8:	2380      	movs	r3, #128	; 0x80
 80031fa:	005a      	lsls	r2, r3, #1
 80031fc:	23a0      	movs	r3, #160	; 0xa0
 80031fe:	05db      	lsls	r3, r3, #23
 8003200:	0011      	movs	r1, r2
 8003202:	0018      	movs	r0, r3
 8003204:	f002 f822 	bl	800524c <HAL_GPIO_ReadPin>
 8003208:	0003      	movs	r3, r0
 800320a:	001a      	movs	r2, r3
 800320c:	4b17      	ldr	r3, [pc, #92]	; (800326c <AD101+0x90>)
 800320e:	701a      	strb	r2, [r3, #0]

	if(!AD101S) sprintf(AD101_Status,"Liquid"); else sprintf(AD101_Status,"Bubble");
 8003210:	4b15      	ldr	r3, [pc, #84]	; (8003268 <AD101+0x8c>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d106      	bne.n	8003226 <AD101+0x4a>
 8003218:	4a15      	ldr	r2, [pc, #84]	; (8003270 <AD101+0x94>)
 800321a:	4b16      	ldr	r3, [pc, #88]	; (8003274 <AD101+0x98>)
 800321c:	0011      	movs	r1, r2
 800321e:	0018      	movs	r0, r3
 8003220:	f005 fa64 	bl	80086ec <siprintf>
 8003224:	e005      	b.n	8003232 <AD101+0x56>
 8003226:	4a14      	ldr	r2, [pc, #80]	; (8003278 <AD101+0x9c>)
 8003228:	4b12      	ldr	r3, [pc, #72]	; (8003274 <AD101+0x98>)
 800322a:	0011      	movs	r1, r2
 800322c:	0018      	movs	r0, r3
 800322e:	f005 fa5d 	bl	80086ec <siprintf>
	if(!AD101T) sprintf(AD101_Test,"Fault"); else sprintf(AD101_Test,"Pass");
 8003232:	4b0e      	ldr	r3, [pc, #56]	; (800326c <AD101+0x90>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d106      	bne.n	8003248 <AD101+0x6c>
 800323a:	4a10      	ldr	r2, [pc, #64]	; (800327c <AD101+0xa0>)
 800323c:	4b10      	ldr	r3, [pc, #64]	; (8003280 <AD101+0xa4>)
 800323e:	0011      	movs	r1, r2
 8003240:	0018      	movs	r0, r3
 8003242:	f005 fa53 	bl	80086ec <siprintf>
 8003246:	e005      	b.n	8003254 <AD101+0x78>
 8003248:	4a0e      	ldr	r2, [pc, #56]	; (8003284 <AD101+0xa8>)
 800324a:	4b0d      	ldr	r3, [pc, #52]	; (8003280 <AD101+0xa4>)
 800324c:	0011      	movs	r1, r2
 800324e:	0018      	movs	r0, r3
 8003250:	f005 fa4c 	bl	80086ec <siprintf>

	sprintf(AD101_Str,"AD101 Self : %s Status : %s",AD101_Test,AD101_Status);
 8003254:	4b07      	ldr	r3, [pc, #28]	; (8003274 <AD101+0x98>)
 8003256:	4a0a      	ldr	r2, [pc, #40]	; (8003280 <AD101+0xa4>)
 8003258:	490b      	ldr	r1, [pc, #44]	; (8003288 <AD101+0xac>)
 800325a:	480c      	ldr	r0, [pc, #48]	; (800328c <AD101+0xb0>)
 800325c:	f005 fa46 	bl	80086ec <siprintf>
}
 8003260:	46c0      	nop			; (mov r8, r8)
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	46c0      	nop			; (mov r8, r8)
 8003268:	20000844 	.word	0x20000844
 800326c:	200007c6 	.word	0x200007c6
 8003270:	0800accc 	.word	0x0800accc
 8003274:	200003b8 	.word	0x200003b8
 8003278:	0800acd4 	.word	0x0800acd4
 800327c:	0800acdc 	.word	0x0800acdc
 8003280:	200007dc 	.word	0x200007dc
 8003284:	0800ace4 	.word	0x0800ace4
 8003288:	0800acec 	.word	0x0800acec
 800328c:	20000240 	.word	0x20000240

08003290 <FMA>:

void FMA()
{
 8003290:	b5b0      	push	{r4, r5, r7, lr}
 8003292:	b08a      	sub	sp, #40	; 0x28
 8003294:	af06      	add	r7, sp, #24
	  ST1 = HAL_I2C_Master_Receive(&hi2c3, ADDR, FMA_buf1, sizeof(FMA_buf1), 5000);
 8003296:	4a9e      	ldr	r2, [pc, #632]	; (8003510 <FMA+0x280>)
 8003298:	489e      	ldr	r0, [pc, #632]	; (8003514 <FMA+0x284>)
 800329a:	4b9f      	ldr	r3, [pc, #636]	; (8003518 <FMA+0x288>)
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	2304      	movs	r3, #4
 80032a0:	2150      	movs	r1, #80	; 0x50
 80032a2:	f002 f8bf 	bl	8005424 <HAL_I2C_Master_Receive>
 80032a6:	0003      	movs	r3, r0
 80032a8:	001a      	movs	r2, r3
 80032aa:	4b9c      	ldr	r3, [pc, #624]	; (800351c <FMA+0x28c>)
 80032ac:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(5);
 80032ae:	2005      	movs	r0, #5
 80032b0:	f001 f88e 	bl	80043d0 <HAL_Delay>
	  ST2 = HAL_I2C_Master_Receive(&hi2c1, ADDR, FMA_buf2, sizeof(FMA_buf2), 5000);
 80032b4:	4a9a      	ldr	r2, [pc, #616]	; (8003520 <FMA+0x290>)
 80032b6:	489b      	ldr	r0, [pc, #620]	; (8003524 <FMA+0x294>)
 80032b8:	4b97      	ldr	r3, [pc, #604]	; (8003518 <FMA+0x288>)
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	2304      	movs	r3, #4
 80032be:	2150      	movs	r1, #80	; 0x50
 80032c0:	f002 f8b0 	bl	8005424 <HAL_I2C_Master_Receive>
 80032c4:	0003      	movs	r3, r0
 80032c6:	001a      	movs	r2, r3
 80032c8:	4b97      	ldr	r3, [pc, #604]	; (8003528 <FMA+0x298>)
 80032ca:	701a      	strb	r2, [r3, #0]

	  ADC_Force1.H = FMA_buf1[0];//Set ADC_Force Bit High
 80032cc:	4b90      	ldr	r3, [pc, #576]	; (8003510 <FMA+0x280>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	b25a      	sxtb	r2, r3
 80032d2:	4b96      	ldr	r3, [pc, #600]	; (800352c <FMA+0x29c>)
 80032d4:	705a      	strb	r2, [r3, #1]
	  ADC_Force1.L = FMA_buf1[1];//Set ADC_Force Bit Low
 80032d6:	4b8e      	ldr	r3, [pc, #568]	; (8003510 <FMA+0x280>)
 80032d8:	785b      	ldrb	r3, [r3, #1]
 80032da:	b25a      	sxtb	r2, r3
 80032dc:	4b93      	ldr	r3, [pc, #588]	; (800352c <FMA+0x29c>)
 80032de:	701a      	strb	r2, [r3, #0]
	  ADC_Temp1.H = FMA_buf1[2];//Set ADC_Temp Bit High
 80032e0:	4b8b      	ldr	r3, [pc, #556]	; (8003510 <FMA+0x280>)
 80032e2:	789b      	ldrb	r3, [r3, #2]
 80032e4:	b25a      	sxtb	r2, r3
 80032e6:	4b92      	ldr	r3, [pc, #584]	; (8003530 <FMA+0x2a0>)
 80032e8:	705a      	strb	r2, [r3, #1]
	  ADC_Temp1.L = FMA_buf1[3];//Set ADC_Temp Bit Low
 80032ea:	4b89      	ldr	r3, [pc, #548]	; (8003510 <FMA+0x280>)
 80032ec:	78db      	ldrb	r3, [r3, #3]
 80032ee:	b25a      	sxtb	r2, r3
 80032f0:	4b8f      	ldr	r3, [pc, #572]	; (8003530 <FMA+0x2a0>)
 80032f2:	701a      	strb	r2, [r3, #0]

	  ADC_Force_Bit1 = ADC_Force1.Word & 0x3FFF ;// AND Bit Status
 80032f4:	4b8d      	ldr	r3, [pc, #564]	; (800352c <FMA+0x29c>)
 80032f6:	881b      	ldrh	r3, [r3, #0]
 80032f8:	049b      	lsls	r3, r3, #18
 80032fa:	0c9b      	lsrs	r3, r3, #18
 80032fc:	0018      	movs	r0, r3
 80032fe:	f7fd ff05 	bl	800110c <__aeabi_i2f>
 8003302:	1c02      	adds	r2, r0, #0
 8003304:	4b8b      	ldr	r3, [pc, #556]	; (8003534 <FMA+0x2a4>)
 8003306:	601a      	str	r2, [r3, #0]
	  Force1 = (((ADC_Force_Bit1-Force_Min)*Force_N)/(Force_Max-Force_Min));//Calculate Force
 8003308:	4b8a      	ldr	r3, [pc, #552]	; (8003534 <FMA+0x2a4>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	498a      	ldr	r1, [pc, #552]	; (8003538 <FMA+0x2a8>)
 800330e:	1c18      	adds	r0, r3, #0
 8003310:	f7fd fd14 	bl	8000d3c <__aeabi_fsub>
 8003314:	1c03      	adds	r3, r0, #0
 8003316:	4989      	ldr	r1, [pc, #548]	; (800353c <FMA+0x2ac>)
 8003318:	1c18      	adds	r0, r3, #0
 800331a:	f7fd fbf5 	bl	8000b08 <__aeabi_fmul>
 800331e:	1c03      	adds	r3, r0, #0
 8003320:	4987      	ldr	r1, [pc, #540]	; (8003540 <FMA+0x2b0>)
 8003322:	1c18      	adds	r0, r3, #0
 8003324:	f7fd fa26 	bl	8000774 <__aeabi_fdiv>
 8003328:	1c03      	adds	r3, r0, #0
 800332a:	1c1a      	adds	r2, r3, #0
 800332c:	4b85      	ldr	r3, [pc, #532]	; (8003544 <FMA+0x2b4>)
 800332e:	601a      	str	r2, [r3, #0]

	  ADC_Temp_Bit1 = ADC_Temp1.Word>>5;//Shift Bit ignored 5 Bit
 8003330:	4b7f      	ldr	r3, [pc, #508]	; (8003530 <FMA+0x2a0>)
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	095b      	lsrs	r3, r3, #5
 8003336:	b29b      	uxth	r3, r3
 8003338:	0018      	movs	r0, r3
 800333a:	f7fd fee7 	bl	800110c <__aeabi_i2f>
 800333e:	1c02      	adds	r2, r0, #0
 8003340:	4b81      	ldr	r3, [pc, #516]	; (8003548 <FMA+0x2b8>)
 8003342:	601a      	str	r2, [r3, #0]
	  Temp1 = ((ADC_Temp_Bit1/2047)*200)-50;//Calculate Temp
 8003344:	4b80      	ldr	r3, [pc, #512]	; (8003548 <FMA+0x2b8>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4980      	ldr	r1, [pc, #512]	; (800354c <FMA+0x2bc>)
 800334a:	1c18      	adds	r0, r3, #0
 800334c:	f7fd fa12 	bl	8000774 <__aeabi_fdiv>
 8003350:	1c03      	adds	r3, r0, #0
 8003352:	497f      	ldr	r1, [pc, #508]	; (8003550 <FMA+0x2c0>)
 8003354:	1c18      	adds	r0, r3, #0
 8003356:	f7fd fbd7 	bl	8000b08 <__aeabi_fmul>
 800335a:	1c03      	adds	r3, r0, #0
 800335c:	497d      	ldr	r1, [pc, #500]	; (8003554 <FMA+0x2c4>)
 800335e:	1c18      	adds	r0, r3, #0
 8003360:	f7fd fcec 	bl	8000d3c <__aeabi_fsub>
 8003364:	1c03      	adds	r3, r0, #0
 8003366:	1c1a      	adds	r2, r3, #0
 8003368:	4b7b      	ldr	r3, [pc, #492]	; (8003558 <FMA+0x2c8>)
 800336a:	601a      	str	r2, [r3, #0]

	  Status1 = ADC_Force1.Word>>14;//Shift Bit Data Force 14 Bit
 800336c:	4b6f      	ldr	r3, [pc, #444]	; (800352c <FMA+0x29c>)
 800336e:	881b      	ldrh	r3, [r3, #0]
 8003370:	0b9b      	lsrs	r3, r3, #14
 8003372:	b29b      	uxth	r3, r3
 8003374:	b2da      	uxtb	r2, r3
 8003376:	4b79      	ldr	r3, [pc, #484]	; (800355c <FMA+0x2cc>)
 8003378:	701a      	strb	r2, [r3, #0]

	  ADC_Force2.H = FMA_buf2[0];//Set ADC_Force Bit High
 800337a:	4b69      	ldr	r3, [pc, #420]	; (8003520 <FMA+0x290>)
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	b25a      	sxtb	r2, r3
 8003380:	4b77      	ldr	r3, [pc, #476]	; (8003560 <FMA+0x2d0>)
 8003382:	705a      	strb	r2, [r3, #1]
	  ADC_Force2.L = FMA_buf2[1];//Set ADC_Force Bit Low
 8003384:	4b66      	ldr	r3, [pc, #408]	; (8003520 <FMA+0x290>)
 8003386:	785b      	ldrb	r3, [r3, #1]
 8003388:	b25a      	sxtb	r2, r3
 800338a:	4b75      	ldr	r3, [pc, #468]	; (8003560 <FMA+0x2d0>)
 800338c:	701a      	strb	r2, [r3, #0]
	  ADC_Temp2.H = FMA_buf2[2];//Set ADC_Temp Bit High
 800338e:	4b64      	ldr	r3, [pc, #400]	; (8003520 <FMA+0x290>)
 8003390:	789b      	ldrb	r3, [r3, #2]
 8003392:	b25a      	sxtb	r2, r3
 8003394:	4b73      	ldr	r3, [pc, #460]	; (8003564 <FMA+0x2d4>)
 8003396:	705a      	strb	r2, [r3, #1]
	  ADC_Temp2.L = FMA_buf2[3];//Set ADC_Temp Bit Low
 8003398:	4b61      	ldr	r3, [pc, #388]	; (8003520 <FMA+0x290>)
 800339a:	78db      	ldrb	r3, [r3, #3]
 800339c:	b25a      	sxtb	r2, r3
 800339e:	4b71      	ldr	r3, [pc, #452]	; (8003564 <FMA+0x2d4>)
 80033a0:	701a      	strb	r2, [r3, #0]

	  ADC_Force_Bit2 = ADC_Force2.Word & 0x3FFF ;// AND Bit Status
 80033a2:	4b6f      	ldr	r3, [pc, #444]	; (8003560 <FMA+0x2d0>)
 80033a4:	881b      	ldrh	r3, [r3, #0]
 80033a6:	049b      	lsls	r3, r3, #18
 80033a8:	0c9b      	lsrs	r3, r3, #18
 80033aa:	0018      	movs	r0, r3
 80033ac:	f7fd feae 	bl	800110c <__aeabi_i2f>
 80033b0:	1c02      	adds	r2, r0, #0
 80033b2:	4b6d      	ldr	r3, [pc, #436]	; (8003568 <FMA+0x2d8>)
 80033b4:	601a      	str	r2, [r3, #0]
	  Force2 = (((ADC_Force_Bit2-Force_Min)*Force_N)/(Force_Max-Force_Min));//Calculate Force
 80033b6:	4b6c      	ldr	r3, [pc, #432]	; (8003568 <FMA+0x2d8>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	495f      	ldr	r1, [pc, #380]	; (8003538 <FMA+0x2a8>)
 80033bc:	1c18      	adds	r0, r3, #0
 80033be:	f7fd fcbd 	bl	8000d3c <__aeabi_fsub>
 80033c2:	1c03      	adds	r3, r0, #0
 80033c4:	495d      	ldr	r1, [pc, #372]	; (800353c <FMA+0x2ac>)
 80033c6:	1c18      	adds	r0, r3, #0
 80033c8:	f7fd fb9e 	bl	8000b08 <__aeabi_fmul>
 80033cc:	1c03      	adds	r3, r0, #0
 80033ce:	495c      	ldr	r1, [pc, #368]	; (8003540 <FMA+0x2b0>)
 80033d0:	1c18      	adds	r0, r3, #0
 80033d2:	f7fd f9cf 	bl	8000774 <__aeabi_fdiv>
 80033d6:	1c03      	adds	r3, r0, #0
 80033d8:	1c1a      	adds	r2, r3, #0
 80033da:	4b64      	ldr	r3, [pc, #400]	; (800356c <FMA+0x2dc>)
 80033dc:	601a      	str	r2, [r3, #0]

	  ADC_Temp_Bit2 = ADC_Temp2.Word>>5;//Shift Bit ignored 5 Bit
 80033de:	4b61      	ldr	r3, [pc, #388]	; (8003564 <FMA+0x2d4>)
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	095b      	lsrs	r3, r3, #5
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	0018      	movs	r0, r3
 80033e8:	f7fd fe90 	bl	800110c <__aeabi_i2f>
 80033ec:	1c02      	adds	r2, r0, #0
 80033ee:	4b60      	ldr	r3, [pc, #384]	; (8003570 <FMA+0x2e0>)
 80033f0:	601a      	str	r2, [r3, #0]
	  Temp2 = ((ADC_Temp_Bit2/2047)*200)-50;//Calculate Temp
 80033f2:	4b5f      	ldr	r3, [pc, #380]	; (8003570 <FMA+0x2e0>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4955      	ldr	r1, [pc, #340]	; (800354c <FMA+0x2bc>)
 80033f8:	1c18      	adds	r0, r3, #0
 80033fa:	f7fd f9bb 	bl	8000774 <__aeabi_fdiv>
 80033fe:	1c03      	adds	r3, r0, #0
 8003400:	4953      	ldr	r1, [pc, #332]	; (8003550 <FMA+0x2c0>)
 8003402:	1c18      	adds	r0, r3, #0
 8003404:	f7fd fb80 	bl	8000b08 <__aeabi_fmul>
 8003408:	1c03      	adds	r3, r0, #0
 800340a:	4952      	ldr	r1, [pc, #328]	; (8003554 <FMA+0x2c4>)
 800340c:	1c18      	adds	r0, r3, #0
 800340e:	f7fd fc95 	bl	8000d3c <__aeabi_fsub>
 8003412:	1c03      	adds	r3, r0, #0
 8003414:	1c1a      	adds	r2, r3, #0
 8003416:	4b57      	ldr	r3, [pc, #348]	; (8003574 <FMA+0x2e4>)
 8003418:	601a      	str	r2, [r3, #0]

	  Status2 = ADC_Force2.Word>>14;//Shift Bit Data Force 14 Bit
 800341a:	4b51      	ldr	r3, [pc, #324]	; (8003560 <FMA+0x2d0>)
 800341c:	881b      	ldrh	r3, [r3, #0]
 800341e:	0b9b      	lsrs	r3, r3, #14
 8003420:	b29b      	uxth	r3, r3
 8003422:	b2da      	uxtb	r2, r3
 8003424:	4b54      	ldr	r3, [pc, #336]	; (8003578 <FMA+0x2e8>)
 8003426:	701a      	strb	r2, [r3, #0]


	  if(ST1 != HAL_OK )sprintf(FMA1,"FMA1 : Fault");
 8003428:	4b3c      	ldr	r3, [pc, #240]	; (800351c <FMA+0x28c>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d006      	beq.n	800343e <FMA+0x1ae>
 8003430:	4a52      	ldr	r2, [pc, #328]	; (800357c <FMA+0x2ec>)
 8003432:	4b53      	ldr	r3, [pc, #332]	; (8003580 <FMA+0x2f0>)
 8003434:	0011      	movs	r1, r2
 8003436:	0018      	movs	r0, r3
 8003438:	f005 f958 	bl	80086ec <siprintf>
 800343c:	e029      	b.n	8003492 <FMA+0x202>
	  else sprintf(FMA1,"FMA1 F.ADC : %.0f F. : %.3f T.ADC : %.0f T. : %.3f",ADC_Force_Bit1,Force1,ADC_Temp_Bit1,Temp1);
 800343e:	4b3d      	ldr	r3, [pc, #244]	; (8003534 <FMA+0x2a4>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	1c18      	adds	r0, r3, #0
 8003444:	f7ff fcfc 	bl	8002e40 <__aeabi_f2d>
 8003448:	60b8      	str	r0, [r7, #8]
 800344a:	60f9      	str	r1, [r7, #12]
 800344c:	4b3d      	ldr	r3, [pc, #244]	; (8003544 <FMA+0x2b4>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	1c18      	adds	r0, r3, #0
 8003452:	f7ff fcf5 	bl	8002e40 <__aeabi_f2d>
 8003456:	0004      	movs	r4, r0
 8003458:	000d      	movs	r5, r1
 800345a:	4b3b      	ldr	r3, [pc, #236]	; (8003548 <FMA+0x2b8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	1c18      	adds	r0, r3, #0
 8003460:	f7ff fcee 	bl	8002e40 <__aeabi_f2d>
 8003464:	6038      	str	r0, [r7, #0]
 8003466:	6079      	str	r1, [r7, #4]
 8003468:	4b3b      	ldr	r3, [pc, #236]	; (8003558 <FMA+0x2c8>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	1c18      	adds	r0, r3, #0
 800346e:	f7ff fce7 	bl	8002e40 <__aeabi_f2d>
 8003472:	0002      	movs	r2, r0
 8003474:	000b      	movs	r3, r1
 8003476:	4943      	ldr	r1, [pc, #268]	; (8003584 <FMA+0x2f4>)
 8003478:	4841      	ldr	r0, [pc, #260]	; (8003580 <FMA+0x2f0>)
 800347a:	9204      	str	r2, [sp, #16]
 800347c:	9305      	str	r3, [sp, #20]
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	9202      	str	r2, [sp, #8]
 8003484:	9303      	str	r3, [sp, #12]
 8003486:	9400      	str	r4, [sp, #0]
 8003488:	9501      	str	r5, [sp, #4]
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f005 f92d 	bl	80086ec <siprintf>

	  if(ST2 != HAL_OK )sprintf(FMA2,"FMA2 : Fault");
 8003492:	4b25      	ldr	r3, [pc, #148]	; (8003528 <FMA+0x298>)
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d006      	beq.n	80034a8 <FMA+0x218>
 800349a:	4a3b      	ldr	r2, [pc, #236]	; (8003588 <FMA+0x2f8>)
 800349c:	4b3b      	ldr	r3, [pc, #236]	; (800358c <FMA+0x2fc>)
 800349e:	0011      	movs	r1, r2
 80034a0:	0018      	movs	r0, r3
 80034a2:	f005 f923 	bl	80086ec <siprintf>
 80034a6:	e029      	b.n	80034fc <FMA+0x26c>
	  else sprintf(FMA2,"FMA2 F.ADC : %.0f F. : %.3f T.ADC : %.0f T. : %.3f",ADC_Force_Bit2,Force2,ADC_Temp_Bit2,Temp2);
 80034a8:	4b2f      	ldr	r3, [pc, #188]	; (8003568 <FMA+0x2d8>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	1c18      	adds	r0, r3, #0
 80034ae:	f7ff fcc7 	bl	8002e40 <__aeabi_f2d>
 80034b2:	60b8      	str	r0, [r7, #8]
 80034b4:	60f9      	str	r1, [r7, #12]
 80034b6:	4b2d      	ldr	r3, [pc, #180]	; (800356c <FMA+0x2dc>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	1c18      	adds	r0, r3, #0
 80034bc:	f7ff fcc0 	bl	8002e40 <__aeabi_f2d>
 80034c0:	0004      	movs	r4, r0
 80034c2:	000d      	movs	r5, r1
 80034c4:	4b2a      	ldr	r3, [pc, #168]	; (8003570 <FMA+0x2e0>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	1c18      	adds	r0, r3, #0
 80034ca:	f7ff fcb9 	bl	8002e40 <__aeabi_f2d>
 80034ce:	6038      	str	r0, [r7, #0]
 80034d0:	6079      	str	r1, [r7, #4]
 80034d2:	4b28      	ldr	r3, [pc, #160]	; (8003574 <FMA+0x2e4>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	1c18      	adds	r0, r3, #0
 80034d8:	f7ff fcb2 	bl	8002e40 <__aeabi_f2d>
 80034dc:	0002      	movs	r2, r0
 80034de:	000b      	movs	r3, r1
 80034e0:	492b      	ldr	r1, [pc, #172]	; (8003590 <FMA+0x300>)
 80034e2:	482a      	ldr	r0, [pc, #168]	; (800358c <FMA+0x2fc>)
 80034e4:	9204      	str	r2, [sp, #16]
 80034e6:	9305      	str	r3, [sp, #20]
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	9202      	str	r2, [sp, #8]
 80034ee:	9303      	str	r3, [sp, #12]
 80034f0:	9400      	str	r4, [sp, #0]
 80034f2:	9501      	str	r5, [sp, #4]
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f005 f8f8 	bl	80086ec <siprintf>

	  sprintf(FMA_Str,"%s | %s",FMA1,FMA2);
 80034fc:	4b23      	ldr	r3, [pc, #140]	; (800358c <FMA+0x2fc>)
 80034fe:	4a20      	ldr	r2, [pc, #128]	; (8003580 <FMA+0x2f0>)
 8003500:	4924      	ldr	r1, [pc, #144]	; (8003594 <FMA+0x304>)
 8003502:	4825      	ldr	r0, [pc, #148]	; (8003598 <FMA+0x308>)
 8003504:	f005 f8f2 	bl	80086ec <siprintf>
}
 8003508:	46c0      	nop			; (mov r8, r8)
 800350a:	46bd      	mov	sp, r7
 800350c:	b004      	add	sp, #16
 800350e:	bdb0      	pop	{r4, r5, r7, pc}
 8003510:	20000428 	.word	0x20000428
 8003514:	200008ec 	.word	0x200008ec
 8003518:	00001388 	.word	0x00001388
 800351c:	200003ac 	.word	0x200003ac
 8003520:	200007d0 	.word	0x200007d0
 8003524:	20000938 	.word	0x20000938
 8003528:	200007d6 	.word	0x200007d6
 800352c:	200006c0 	.word	0x200006c0
 8003530:	200007c0 	.word	0x200007c0
 8003534:	200007cc 	.word	0x200007cc
 8003538:	454cd000 	.word	0x454cd000
 800353c:	40a00000 	.word	0x40a00000
 8003540:	46199400 	.word	0x46199400
 8003544:	2000023c 	.word	0x2000023c
 8003548:	200003a8 	.word	0x200003a8
 800354c:	44ffe000 	.word	0x44ffe000
 8003550:	43480000 	.word	0x43480000
 8003554:	42480000 	.word	0x42480000
 8003558:	200007d8 	.word	0x200007d8
 800355c:	200003a4 	.word	0x200003a4
 8003560:	200007c8 	.word	0x200007c8
 8003564:	2000033c 	.word	0x2000033c
 8003568:	20000840 	.word	0x20000840
 800356c:	200003b4 	.word	0x200003b4
 8003570:	20000424 	.word	0x20000424
 8003574:	20000490 	.word	0x20000490
 8003578:	200007ca 	.word	0x200007ca
 800357c:	0800ad08 	.word	0x0800ad08
 8003580:	2000042c 	.word	0x2000042c
 8003584:	0800ad18 	.word	0x0800ad18
 8003588:	0800ad4c 	.word	0x0800ad4c
 800358c:	20000340 	.word	0x20000340
 8003590:	0800ad5c 	.word	0x0800ad5c
 8003594:	0800ad90 	.word	0x0800ad90
 8003598:	200006c4 	.word	0x200006c4

0800359c <Map>:

uint16_t Map(uint16_t val,uint16_t Minval,uint16_t Maxval,uint16_t Minrange,uint16_t Maxrange)
{
 800359c:	b5b0      	push	{r4, r5, r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	0005      	movs	r5, r0
 80035a4:	000c      	movs	r4, r1
 80035a6:	0010      	movs	r0, r2
 80035a8:	0019      	movs	r1, r3
 80035aa:	1dbb      	adds	r3, r7, #6
 80035ac:	1c2a      	adds	r2, r5, #0
 80035ae:	801a      	strh	r2, [r3, #0]
 80035b0:	1d3b      	adds	r3, r7, #4
 80035b2:	1c22      	adds	r2, r4, #0
 80035b4:	801a      	strh	r2, [r3, #0]
 80035b6:	1cbb      	adds	r3, r7, #2
 80035b8:	1c02      	adds	r2, r0, #0
 80035ba:	801a      	strh	r2, [r3, #0]
 80035bc:	003b      	movs	r3, r7
 80035be:	1c0a      	adds	r2, r1, #0
 80035c0:	801a      	strh	r2, [r3, #0]
	float Value;
	Value = ((val-Minval)*100.0)/(Maxval-Minval);
 80035c2:	1dbb      	adds	r3, r7, #6
 80035c4:	881a      	ldrh	r2, [r3, #0]
 80035c6:	1d3b      	adds	r3, r7, #4
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	0018      	movs	r0, r3
 80035ce:	f7ff fbe1 	bl	8002d94 <__aeabi_i2d>
 80035d2:	2200      	movs	r2, #0
 80035d4:	4b3b      	ldr	r3, [pc, #236]	; (80036c4 <Map+0x128>)
 80035d6:	f7fe fd8b 	bl	80020f0 <__aeabi_dmul>
 80035da:	0002      	movs	r2, r0
 80035dc:	000b      	movs	r3, r1
 80035de:	0014      	movs	r4, r2
 80035e0:	001d      	movs	r5, r3
 80035e2:	1cbb      	adds	r3, r7, #2
 80035e4:	881a      	ldrh	r2, [r3, #0]
 80035e6:	1d3b      	adds	r3, r7, #4
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	0018      	movs	r0, r3
 80035ee:	f7ff fbd1 	bl	8002d94 <__aeabi_i2d>
 80035f2:	0002      	movs	r2, r0
 80035f4:	000b      	movs	r3, r1
 80035f6:	0020      	movs	r0, r4
 80035f8:	0029      	movs	r1, r5
 80035fa:	f7fe f973 	bl	80018e4 <__aeabi_ddiv>
 80035fe:	0002      	movs	r2, r0
 8003600:	000b      	movs	r3, r1
 8003602:	0010      	movs	r0, r2
 8003604:	0019      	movs	r1, r3
 8003606:	f7ff fc63 	bl	8002ed0 <__aeabi_d2f>
 800360a:	1c03      	adds	r3, r0, #0
 800360c:	60fb      	str	r3, [r7, #12]
	Value = Minrange+((Value*(Maxrange-Minrange))/100.0);
 800360e:	003b      	movs	r3, r7
 8003610:	881b      	ldrh	r3, [r3, #0]
 8003612:	0018      	movs	r0, r3
 8003614:	f7ff fbbe 	bl	8002d94 <__aeabi_i2d>
 8003618:	0004      	movs	r4, r0
 800361a:	000d      	movs	r5, r1
 800361c:	2320      	movs	r3, #32
 800361e:	18fb      	adds	r3, r7, r3
 8003620:	881a      	ldrh	r2, [r3, #0]
 8003622:	003b      	movs	r3, r7
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	0018      	movs	r0, r3
 800362a:	f7fd fd6f 	bl	800110c <__aeabi_i2f>
 800362e:	1c03      	adds	r3, r0, #0
 8003630:	68f9      	ldr	r1, [r7, #12]
 8003632:	1c18      	adds	r0, r3, #0
 8003634:	f7fd fa68 	bl	8000b08 <__aeabi_fmul>
 8003638:	1c03      	adds	r3, r0, #0
 800363a:	1c18      	adds	r0, r3, #0
 800363c:	f7ff fc00 	bl	8002e40 <__aeabi_f2d>
 8003640:	2200      	movs	r2, #0
 8003642:	4b20      	ldr	r3, [pc, #128]	; (80036c4 <Map+0x128>)
 8003644:	f7fe f94e 	bl	80018e4 <__aeabi_ddiv>
 8003648:	0002      	movs	r2, r0
 800364a:	000b      	movs	r3, r1
 800364c:	0020      	movs	r0, r4
 800364e:	0029      	movs	r1, r5
 8003650:	f7fd fdde 	bl	8001210 <__aeabi_dadd>
 8003654:	0002      	movs	r2, r0
 8003656:	000b      	movs	r3, r1
 8003658:	0010      	movs	r0, r2
 800365a:	0019      	movs	r1, r3
 800365c:	f7ff fc38 	bl	8002ed0 <__aeabi_d2f>
 8003660:	1c03      	adds	r3, r0, #0
 8003662:	60fb      	str	r3, [r7, #12]

	if(Value < Minrange)Value = Minrange;
 8003664:	003b      	movs	r3, r7
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	0018      	movs	r0, r3
 800366a:	f7fd fd4f 	bl	800110c <__aeabi_i2f>
 800366e:	1c03      	adds	r3, r0, #0
 8003670:	1c19      	adds	r1, r3, #0
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f7fc ff2a 	bl	80004cc <__aeabi_fcmplt>
 8003678:	1e03      	subs	r3, r0, #0
 800367a:	d006      	beq.n	800368a <Map+0xee>
 800367c:	003b      	movs	r3, r7
 800367e:	881b      	ldrh	r3, [r3, #0]
 8003680:	0018      	movs	r0, r3
 8003682:	f7fd fd89 	bl	8001198 <__aeabi_ui2f>
 8003686:	1c03      	adds	r3, r0, #0
 8003688:	60fb      	str	r3, [r7, #12]
	if(Value > Maxrange)Value = Maxrange;
 800368a:	2420      	movs	r4, #32
 800368c:	193b      	adds	r3, r7, r4
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	0018      	movs	r0, r3
 8003692:	f7fd fd3b 	bl	800110c <__aeabi_i2f>
 8003696:	1c03      	adds	r3, r0, #0
 8003698:	1c19      	adds	r1, r3, #0
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f7fc ff2a 	bl	80004f4 <__aeabi_fcmpgt>
 80036a0:	1e03      	subs	r3, r0, #0
 80036a2:	d006      	beq.n	80036b2 <Map+0x116>
 80036a4:	193b      	adds	r3, r7, r4
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	0018      	movs	r0, r3
 80036aa:	f7fd fd75 	bl	8001198 <__aeabi_ui2f>
 80036ae:	1c03      	adds	r3, r0, #0
 80036b0:	60fb      	str	r3, [r7, #12]

	return(Value);
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f7fc ff7a 	bl	80005ac <__aeabi_f2uiz>
 80036b8:	0003      	movs	r3, r0
 80036ba:	b29b      	uxth	r3, r3
}
 80036bc:	0018      	movs	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	b004      	add	sp, #16
 80036c2:	bdb0      	pop	{r4, r5, r7, pc}
 80036c4:	40590000 	.word	0x40590000

080036c8 <PWM>:

void PWM()
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af02      	add	r7, sp, #8

	Ena = HAL_GPIO_ReadPin(S_ENA_GPIO_Port, S_ENA_Pin);
 80036ce:	4b2f      	ldr	r3, [pc, #188]	; (800378c <PWM+0xc4>)
 80036d0:	2120      	movs	r1, #32
 80036d2:	0018      	movs	r0, r3
 80036d4:	f001 fdba 	bl	800524c <HAL_GPIO_ReadPin>
 80036d8:	0003      	movs	r3, r0
 80036da:	001a      	movs	r2, r3
 80036dc:	4b2c      	ldr	r3, [pc, #176]	; (8003790 <PWM+0xc8>)
 80036de:	701a      	strb	r2, [r3, #0]
	Dir = HAL_GPIO_ReadPin(S_DIR_GPIO_Port, S_DIR_Pin);
 80036e0:	4b2a      	ldr	r3, [pc, #168]	; (800378c <PWM+0xc4>)
 80036e2:	2110      	movs	r1, #16
 80036e4:	0018      	movs	r0, r3
 80036e6:	f001 fdb1 	bl	800524c <HAL_GPIO_ReadPin>
 80036ea:	0003      	movs	r3, r0
 80036ec:	001a      	movs	r2, r3
 80036ee:	4b29      	ldr	r3, [pc, #164]	; (8003794 <PWM+0xcc>)
 80036f0:	701a      	strb	r2, [r3, #0]

	if(!Ena && !Lock){ Lock = 1;HAL_GPIO_TogglePin(ENA_GPIO_Port, ENA_Pin); }
 80036f2:	4b27      	ldr	r3, [pc, #156]	; (8003790 <PWM+0xc8>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10b      	bne.n	8003712 <PWM+0x4a>
 80036fa:	4b27      	ldr	r3, [pc, #156]	; (8003798 <PWM+0xd0>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d107      	bne.n	8003712 <PWM+0x4a>
 8003702:	4b25      	ldr	r3, [pc, #148]	; (8003798 <PWM+0xd0>)
 8003704:	2201      	movs	r2, #1
 8003706:	701a      	strb	r2, [r3, #0]
 8003708:	4b20      	ldr	r3, [pc, #128]	; (800378c <PWM+0xc4>)
 800370a:	2101      	movs	r1, #1
 800370c:	0018      	movs	r0, r3
 800370e:	f001 fdd7 	bl	80052c0 <HAL_GPIO_TogglePin>
	if(!Dir && !Lock){ Lock = 1;HAL_GPIO_TogglePin(DIR_GPIO_Port, DIR_Pin); }
 8003712:	4b20      	ldr	r3, [pc, #128]	; (8003794 <PWM+0xcc>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10c      	bne.n	8003734 <PWM+0x6c>
 800371a:	4b1f      	ldr	r3, [pc, #124]	; (8003798 <PWM+0xd0>)
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d108      	bne.n	8003734 <PWM+0x6c>
 8003722:	4b1d      	ldr	r3, [pc, #116]	; (8003798 <PWM+0xd0>)
 8003724:	2201      	movs	r2, #1
 8003726:	701a      	strb	r2, [r3, #0]
 8003728:	23a0      	movs	r3, #160	; 0xa0
 800372a:	05db      	lsls	r3, r3, #23
 800372c:	2110      	movs	r1, #16
 800372e:	0018      	movs	r0, r3
 8003730:	f001 fdc6 	bl	80052c0 <HAL_GPIO_TogglePin>

	if(Ena && Dir) Lock = 0;
 8003734:	4b16      	ldr	r3, [pc, #88]	; (8003790 <PWM+0xc8>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d006      	beq.n	800374a <PWM+0x82>
 800373c:	4b15      	ldr	r3, [pc, #84]	; (8003794 <PWM+0xcc>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d002      	beq.n	800374a <PWM+0x82>
 8003744:	4b14      	ldr	r3, [pc, #80]	; (8003798 <PWM+0xd0>)
 8003746:	2200      	movs	r2, #0
 8003748:	701a      	strb	r2, [r3, #0]

	vADC =  aADCxConvertedData[0];
 800374a:	4b14      	ldr	r3, [pc, #80]	; (800379c <PWM+0xd4>)
 800374c:	881a      	ldrh	r2, [r3, #0]
 800374e:	4b14      	ldr	r3, [pc, #80]	; (80037a0 <PWM+0xd8>)
 8003750:	801a      	strh	r2, [r3, #0]
	Data = Map(vADC,vMin,vMax,rMin,rMax);
 8003752:	4b13      	ldr	r3, [pc, #76]	; (80037a0 <PWM+0xd8>)
 8003754:	8818      	ldrh	r0, [r3, #0]
 8003756:	4913      	ldr	r1, [pc, #76]	; (80037a4 <PWM+0xdc>)
 8003758:	4a13      	ldr	r2, [pc, #76]	; (80037a8 <PWM+0xe0>)
 800375a:	4b14      	ldr	r3, [pc, #80]	; (80037ac <PWM+0xe4>)
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	000b      	movs	r3, r1
 8003760:	2100      	movs	r1, #0
 8003762:	f7ff ff1b 	bl	800359c <Map>
 8003766:	0003      	movs	r3, r0
 8003768:	001a      	movs	r2, r3
 800376a:	4b11      	ldr	r3, [pc, #68]	; (80037b0 <PWM+0xe8>)
 800376c:	801a      	strh	r2, [r3, #0]
	htim2.Instance->ARR = Data;
 800376e:	4b10      	ldr	r3, [pc, #64]	; (80037b0 <PWM+0xe8>)
 8003770:	881a      	ldrh	r2, [r3, #0]
 8003772:	4b10      	ldr	r3, [pc, #64]	; (80037b4 <PWM+0xec>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	62da      	str	r2, [r3, #44]	; 0x2c
	htim2.Instance->CCR1 = Data/2;
 8003778:	4b0d      	ldr	r3, [pc, #52]	; (80037b0 <PWM+0xe8>)
 800377a:	881b      	ldrh	r3, [r3, #0]
 800377c:	085b      	lsrs	r3, r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	4b0c      	ldr	r3, [pc, #48]	; (80037b4 <PWM+0xec>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	50000400 	.word	0x50000400
 8003790:	200006be 	.word	0x200006be
 8003794:	200007c2 	.word	0x200007c2
 8003798:	20000420 	.word	0x20000420
 800379c:	200007d4 	.word	0x200007d4
 80037a0:	200007c4 	.word	0x200007c4
 80037a4:	000059d8 	.word	0x000059d8
 80037a8:	00000fff 	.word	0x00000fff
 80037ac:	0000c350 	.word	0x0000c350
 80037b0:	20000494 	.word	0x20000494
 80037b4:	20000984 	.word	0x20000984

080037b8 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80037be:	003b      	movs	r3, r7
 80037c0:	0018      	movs	r0, r3
 80037c2:	2308      	movs	r3, #8
 80037c4:	001a      	movs	r2, r3
 80037c6:	2100      	movs	r1, #0
 80037c8:	f004 fb0e 	bl	8007de8 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80037cc:	4b2a      	ldr	r3, [pc, #168]	; (8003878 <MX_ADC_Init+0xc0>)
 80037ce:	4a2b      	ldr	r2, [pc, #172]	; (800387c <MX_ADC_Init+0xc4>)
 80037d0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80037d2:	4b29      	ldr	r3, [pc, #164]	; (8003878 <MX_ADC_Init+0xc0>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80037d8:	4b27      	ldr	r3, [pc, #156]	; (8003878 <MX_ADC_Init+0xc0>)
 80037da:	2280      	movs	r2, #128	; 0x80
 80037dc:	05d2      	lsls	r2, r2, #23
 80037de:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80037e0:	4b25      	ldr	r3, [pc, #148]	; (8003878 <MX_ADC_Init+0xc0>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 80037e6:	4b24      	ldr	r3, [pc, #144]	; (8003878 <MX_ADC_Init+0xc0>)
 80037e8:	2204      	movs	r2, #4
 80037ea:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80037ec:	4b22      	ldr	r3, [pc, #136]	; (8003878 <MX_ADC_Init+0xc0>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80037f2:	4b21      	ldr	r3, [pc, #132]	; (8003878 <MX_ADC_Init+0xc0>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 80037f8:	4b1f      	ldr	r3, [pc, #124]	; (8003878 <MX_ADC_Init+0xc0>)
 80037fa:	2220      	movs	r2, #32
 80037fc:	2101      	movs	r1, #1
 80037fe:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003800:	4b1d      	ldr	r3, [pc, #116]	; (8003878 <MX_ADC_Init+0xc0>)
 8003802:	2221      	movs	r2, #33	; 0x21
 8003804:	2100      	movs	r1, #0
 8003806:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003808:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <MX_ADC_Init+0xc0>)
 800380a:	2200      	movs	r2, #0
 800380c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800380e:	4b1a      	ldr	r3, [pc, #104]	; (8003878 <MX_ADC_Init+0xc0>)
 8003810:	22c2      	movs	r2, #194	; 0xc2
 8003812:	32ff      	adds	r2, #255	; 0xff
 8003814:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 8003816:	4b18      	ldr	r3, [pc, #96]	; (8003878 <MX_ADC_Init+0xc0>)
 8003818:	222c      	movs	r2, #44	; 0x2c
 800381a:	2101      	movs	r1, #1
 800381c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800381e:	4b16      	ldr	r3, [pc, #88]	; (8003878 <MX_ADC_Init+0xc0>)
 8003820:	2204      	movs	r2, #4
 8003822:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003824:	4b14      	ldr	r3, [pc, #80]	; (8003878 <MX_ADC_Init+0xc0>)
 8003826:	2200      	movs	r2, #0
 8003828:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800382a:	4b13      	ldr	r3, [pc, #76]	; (8003878 <MX_ADC_Init+0xc0>)
 800382c:	2200      	movs	r2, #0
 800382e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8003830:	4b11      	ldr	r3, [pc, #68]	; (8003878 <MX_ADC_Init+0xc0>)
 8003832:	2200      	movs	r2, #0
 8003834:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003836:	4b10      	ldr	r3, [pc, #64]	; (8003878 <MX_ADC_Init+0xc0>)
 8003838:	2200      	movs	r2, #0
 800383a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800383c:	4b0e      	ldr	r3, [pc, #56]	; (8003878 <MX_ADC_Init+0xc0>)
 800383e:	0018      	movs	r0, r3
 8003840:	f000 fdea 	bl	8004418 <HAL_ADC_Init>
 8003844:	1e03      	subs	r3, r0, #0
 8003846:	d001      	beq.n	800384c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8003848:	f000 faf6 	bl	8003e38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800384c:	003b      	movs	r3, r7
 800384e:	4a0c      	ldr	r2, [pc, #48]	; (8003880 <MX_ADC_Init+0xc8>)
 8003850:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003852:	003b      	movs	r3, r7
 8003854:	2280      	movs	r2, #128	; 0x80
 8003856:	0152      	lsls	r2, r2, #5
 8003858:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800385a:	003a      	movs	r2, r7
 800385c:	4b06      	ldr	r3, [pc, #24]	; (8003878 <MX_ADC_Init+0xc0>)
 800385e:	0011      	movs	r1, r2
 8003860:	0018      	movs	r0, r3
 8003862:	f000 ffe7 	bl	8004834 <HAL_ADC_ConfigChannel>
 8003866:	1e03      	subs	r3, r0, #0
 8003868:	d001      	beq.n	800386e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800386a:	f000 fae5 	bl	8003e38 <Error_Handler>
  }

}
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	46bd      	mov	sp, r7
 8003872:	b002      	add	sp, #8
 8003874:	bd80      	pop	{r7, pc}
 8003876:	46c0      	nop			; (mov r8, r8)
 8003878:	20000890 	.word	0x20000890
 800387c:	40012400 	.word	0x40012400
 8003880:	04000002 	.word	0x04000002

08003884 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003884:	b590      	push	{r4, r7, lr}
 8003886:	b089      	sub	sp, #36	; 0x24
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800388c:	240c      	movs	r4, #12
 800388e:	193b      	adds	r3, r7, r4
 8003890:	0018      	movs	r0, r3
 8003892:	2314      	movs	r3, #20
 8003894:	001a      	movs	r2, r3
 8003896:	2100      	movs	r1, #0
 8003898:	f004 faa6 	bl	8007de8 <memset>
  if(adcHandle->Instance==ADC1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a2a      	ldr	r2, [pc, #168]	; (800394c <HAL_ADC_MspInit+0xc8>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d14d      	bne.n	8003942 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80038a6:	4b2a      	ldr	r3, [pc, #168]	; (8003950 <HAL_ADC_MspInit+0xcc>)
 80038a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038aa:	4b29      	ldr	r3, [pc, #164]	; (8003950 <HAL_ADC_MspInit+0xcc>)
 80038ac:	2180      	movs	r1, #128	; 0x80
 80038ae:	0089      	lsls	r1, r1, #2
 80038b0:	430a      	orrs	r2, r1
 80038b2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038b4:	4b26      	ldr	r3, [pc, #152]	; (8003950 <HAL_ADC_MspInit+0xcc>)
 80038b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b8:	4b25      	ldr	r3, [pc, #148]	; (8003950 <HAL_ADC_MspInit+0xcc>)
 80038ba:	2101      	movs	r1, #1
 80038bc:	430a      	orrs	r2, r1
 80038be:	62da      	str	r2, [r3, #44]	; 0x2c
 80038c0:	4b23      	ldr	r3, [pc, #140]	; (8003950 <HAL_ADC_MspInit+0xcc>)
 80038c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c4:	2201      	movs	r2, #1
 80038c6:	4013      	ands	r3, r2
 80038c8:	60bb      	str	r3, [r7, #8]
 80038ca:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80038cc:	193b      	adds	r3, r7, r4
 80038ce:	2202      	movs	r2, #2
 80038d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038d2:	193b      	adds	r3, r7, r4
 80038d4:	2203      	movs	r2, #3
 80038d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d8:	193b      	adds	r3, r7, r4
 80038da:	2200      	movs	r2, #0
 80038dc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038de:	193a      	adds	r2, r7, r4
 80038e0:	23a0      	movs	r3, #160	; 0xa0
 80038e2:	05db      	lsls	r3, r3, #23
 80038e4:	0011      	movs	r1, r2
 80038e6:	0018      	movs	r0, r3
 80038e8:	f001 fb32 	bl	8004f50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80038ec:	4b19      	ldr	r3, [pc, #100]	; (8003954 <HAL_ADC_MspInit+0xd0>)
 80038ee:	4a1a      	ldr	r2, [pc, #104]	; (8003958 <HAL_ADC_MspInit+0xd4>)
 80038f0:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 80038f2:	4b18      	ldr	r3, [pc, #96]	; (8003954 <HAL_ADC_MspInit+0xd0>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038f8:	4b16      	ldr	r3, [pc, #88]	; (8003954 <HAL_ADC_MspInit+0xd0>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80038fe:	4b15      	ldr	r3, [pc, #84]	; (8003954 <HAL_ADC_MspInit+0xd0>)
 8003900:	2200      	movs	r2, #0
 8003902:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8003904:	4b13      	ldr	r3, [pc, #76]	; (8003954 <HAL_ADC_MspInit+0xd0>)
 8003906:	2280      	movs	r2, #128	; 0x80
 8003908:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800390a:	4b12      	ldr	r3, [pc, #72]	; (8003954 <HAL_ADC_MspInit+0xd0>)
 800390c:	2280      	movs	r2, #128	; 0x80
 800390e:	0052      	lsls	r2, r2, #1
 8003910:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003912:	4b10      	ldr	r3, [pc, #64]	; (8003954 <HAL_ADC_MspInit+0xd0>)
 8003914:	2280      	movs	r2, #128	; 0x80
 8003916:	0112      	lsls	r2, r2, #4
 8003918:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800391a:	4b0e      	ldr	r3, [pc, #56]	; (8003954 <HAL_ADC_MspInit+0xd0>)
 800391c:	2220      	movs	r2, #32
 800391e:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8003920:	4b0c      	ldr	r3, [pc, #48]	; (8003954 <HAL_ADC_MspInit+0xd0>)
 8003922:	2200      	movs	r2, #0
 8003924:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8003926:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <HAL_ADC_MspInit+0xd0>)
 8003928:	0018      	movs	r0, r3
 800392a:	f001 fa05 	bl	8004d38 <HAL_DMA_Init>
 800392e:	1e03      	subs	r3, r0, #0
 8003930:	d001      	beq.n	8003936 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8003932:	f000 fa81 	bl	8003e38 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a06      	ldr	r2, [pc, #24]	; (8003954 <HAL_ADC_MspInit+0xd0>)
 800393a:	64da      	str	r2, [r3, #76]	; 0x4c
 800393c:	4b05      	ldr	r3, [pc, #20]	; (8003954 <HAL_ADC_MspInit+0xd0>)
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	46bd      	mov	sp, r7
 8003946:	b009      	add	sp, #36	; 0x24
 8003948:	bd90      	pop	{r4, r7, pc}
 800394a:	46c0      	nop			; (mov r8, r8)
 800394c:	40012400 	.word	0x40012400
 8003950:	40021000 	.word	0x40021000
 8003954:	20000848 	.word	0x20000848
 8003958:	40020008 	.word	0x40020008

0800395c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003962:	4b08      	ldr	r3, [pc, #32]	; (8003984 <MX_DMA_Init+0x28>)
 8003964:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003966:	4b07      	ldr	r3, [pc, #28]	; (8003984 <MX_DMA_Init+0x28>)
 8003968:	2101      	movs	r1, #1
 800396a:	430a      	orrs	r2, r1
 800396c:	631a      	str	r2, [r3, #48]	; 0x30
 800396e:	4b05      	ldr	r3, [pc, #20]	; (8003984 <MX_DMA_Init+0x28>)
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	2201      	movs	r2, #1
 8003974:	4013      	ands	r3, r2
 8003976:	607b      	str	r3, [r7, #4]
 8003978:	687b      	ldr	r3, [r7, #4]

}
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	46bd      	mov	sp, r7
 800397e:	b002      	add	sp, #8
 8003980:	bd80      	pop	{r7, pc}
 8003982:	46c0      	nop			; (mov r8, r8)
 8003984:	40021000 	.word	0x40021000

08003988 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003988:	b590      	push	{r4, r7, lr}
 800398a:	b08b      	sub	sp, #44	; 0x2c
 800398c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800398e:	2414      	movs	r4, #20
 8003990:	193b      	adds	r3, r7, r4
 8003992:	0018      	movs	r0, r3
 8003994:	2314      	movs	r3, #20
 8003996:	001a      	movs	r2, r3
 8003998:	2100      	movs	r1, #0
 800399a:	f004 fa25 	bl	8007de8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800399e:	4b4b      	ldr	r3, [pc, #300]	; (8003acc <MX_GPIO_Init+0x144>)
 80039a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a2:	4b4a      	ldr	r3, [pc, #296]	; (8003acc <MX_GPIO_Init+0x144>)
 80039a4:	2104      	movs	r1, #4
 80039a6:	430a      	orrs	r2, r1
 80039a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80039aa:	4b48      	ldr	r3, [pc, #288]	; (8003acc <MX_GPIO_Init+0x144>)
 80039ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ae:	2204      	movs	r2, #4
 80039b0:	4013      	ands	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]
 80039b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80039b6:	4b45      	ldr	r3, [pc, #276]	; (8003acc <MX_GPIO_Init+0x144>)
 80039b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ba:	4b44      	ldr	r3, [pc, #272]	; (8003acc <MX_GPIO_Init+0x144>)
 80039bc:	2180      	movs	r1, #128	; 0x80
 80039be:	430a      	orrs	r2, r1
 80039c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80039c2:	4b42      	ldr	r3, [pc, #264]	; (8003acc <MX_GPIO_Init+0x144>)
 80039c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c6:	2280      	movs	r2, #128	; 0x80
 80039c8:	4013      	ands	r3, r2
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ce:	4b3f      	ldr	r3, [pc, #252]	; (8003acc <MX_GPIO_Init+0x144>)
 80039d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d2:	4b3e      	ldr	r3, [pc, #248]	; (8003acc <MX_GPIO_Init+0x144>)
 80039d4:	2101      	movs	r1, #1
 80039d6:	430a      	orrs	r2, r1
 80039d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80039da:	4b3c      	ldr	r3, [pc, #240]	; (8003acc <MX_GPIO_Init+0x144>)
 80039dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039de:	2201      	movs	r2, #1
 80039e0:	4013      	ands	r3, r2
 80039e2:	60bb      	str	r3, [r7, #8]
 80039e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039e6:	4b39      	ldr	r3, [pc, #228]	; (8003acc <MX_GPIO_Init+0x144>)
 80039e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ea:	4b38      	ldr	r3, [pc, #224]	; (8003acc <MX_GPIO_Init+0x144>)
 80039ec:	2102      	movs	r1, #2
 80039ee:	430a      	orrs	r2, r1
 80039f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80039f2:	4b36      	ldr	r3, [pc, #216]	; (8003acc <MX_GPIO_Init+0x144>)
 80039f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f6:	2202      	movs	r2, #2
 80039f8:	4013      	ands	r3, r2
 80039fa:	607b      	str	r3, [r7, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_Pin|LD2_Pin, GPIO_PIN_RESET);
 80039fe:	23a0      	movs	r3, #160	; 0xa0
 8003a00:	05db      	lsls	r3, r3, #23
 8003a02:	2200      	movs	r2, #0
 8003a04:	2130      	movs	r1, #48	; 0x30
 8003a06:	0018      	movs	r0, r3
 8003a08:	f001 fc3d 	bl	8005286 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, GPIO_PIN_SET);
 8003a0c:	4b30      	ldr	r3, [pc, #192]	; (8003ad0 <MX_GPIO_Init+0x148>)
 8003a0e:	2201      	movs	r2, #1
 8003a10:	2101      	movs	r1, #1
 8003a12:	0018      	movs	r0, r3
 8003a14:	f001 fc37 	bl	8005286 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003a18:	193b      	adds	r3, r7, r4
 8003a1a:	2280      	movs	r2, #128	; 0x80
 8003a1c:	0192      	lsls	r2, r2, #6
 8003a1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003a20:	193b      	adds	r3, r7, r4
 8003a22:	4a2c      	ldr	r2, [pc, #176]	; (8003ad4 <MX_GPIO_Init+0x14c>)
 8003a24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a26:	193b      	adds	r3, r7, r4
 8003a28:	2200      	movs	r2, #0
 8003a2a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003a2c:	193b      	adds	r3, r7, r4
 8003a2e:	4a2a      	ldr	r2, [pc, #168]	; (8003ad8 <MX_GPIO_Init+0x150>)
 8003a30:	0019      	movs	r1, r3
 8003a32:	0010      	movs	r0, r2
 8003a34:	f001 fa8c 	bl	8004f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIR_Pin|LD2_Pin;
 8003a38:	193b      	adds	r3, r7, r4
 8003a3a:	2230      	movs	r2, #48	; 0x30
 8003a3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a3e:	193b      	adds	r3, r7, r4
 8003a40:	2201      	movs	r2, #1
 8003a42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a44:	193b      	adds	r3, r7, r4
 8003a46:	2200      	movs	r2, #0
 8003a48:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a4a:	193b      	adds	r3, r7, r4
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a50:	193a      	adds	r2, r7, r4
 8003a52:	23a0      	movs	r3, #160	; 0xa0
 8003a54:	05db      	lsls	r3, r3, #23
 8003a56:	0011      	movs	r1, r2
 8003a58:	0018      	movs	r0, r3
 8003a5a:	f001 fa79 	bl	8004f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENA_Pin;
 8003a5e:	193b      	adds	r3, r7, r4
 8003a60:	2201      	movs	r2, #1
 8003a62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a64:	193b      	adds	r3, r7, r4
 8003a66:	2201      	movs	r2, #1
 8003a68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6a:	193b      	adds	r3, r7, r4
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a70:	193b      	adds	r3, r7, r4
 8003a72:	2200      	movs	r2, #0
 8003a74:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ENA_GPIO_Port, &GPIO_InitStruct);
 8003a76:	193b      	adds	r3, r7, r4
 8003a78:	4a15      	ldr	r2, [pc, #84]	; (8003ad0 <MX_GPIO_Init+0x148>)
 8003a7a:	0019      	movs	r1, r3
 8003a7c:	0010      	movs	r0, r2
 8003a7e:	f001 fa67 	bl	8004f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = AD101_S_Pin|AD101_O_Pin;
 8003a82:	193b      	adds	r3, r7, r4
 8003a84:	22c0      	movs	r2, #192	; 0xc0
 8003a86:	0092      	lsls	r2, r2, #2
 8003a88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a8a:	193b      	adds	r3, r7, r4
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a90:	193b      	adds	r3, r7, r4
 8003a92:	2200      	movs	r2, #0
 8003a94:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a96:	193a      	adds	r2, r7, r4
 8003a98:	23a0      	movs	r3, #160	; 0xa0
 8003a9a:	05db      	lsls	r3, r3, #23
 8003a9c:	0011      	movs	r1, r2
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	f001 fa56 	bl	8004f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = S_DIR_Pin|S_ENA_Pin;
 8003aa4:	193b      	adds	r3, r7, r4
 8003aa6:	2230      	movs	r2, #48	; 0x30
 8003aa8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003aaa:	193b      	adds	r3, r7, r4
 8003aac:	2200      	movs	r2, #0
 8003aae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ab0:	193b      	adds	r3, r7, r4
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ab6:	193b      	adds	r3, r7, r4
 8003ab8:	4a05      	ldr	r2, [pc, #20]	; (8003ad0 <MX_GPIO_Init+0x148>)
 8003aba:	0019      	movs	r1, r3
 8003abc:	0010      	movs	r0, r2
 8003abe:	f001 fa47 	bl	8004f50 <HAL_GPIO_Init>

}
 8003ac2:	46c0      	nop			; (mov r8, r8)
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	b00b      	add	sp, #44	; 0x2c
 8003ac8:	bd90      	pop	{r4, r7, pc}
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	50000400 	.word	0x50000400
 8003ad4:	10210000 	.word	0x10210000
 8003ad8:	50000800 	.word	0x50000800

08003adc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8003ae0:	4b1b      	ldr	r3, [pc, #108]	; (8003b50 <MX_I2C1_Init+0x74>)
 8003ae2:	4a1c      	ldr	r2, [pc, #112]	; (8003b54 <MX_I2C1_Init+0x78>)
 8003ae4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8003ae6:	4b1a      	ldr	r3, [pc, #104]	; (8003b50 <MX_I2C1_Init+0x74>)
 8003ae8:	4a1b      	ldr	r2, [pc, #108]	; (8003b58 <MX_I2C1_Init+0x7c>)
 8003aea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003aec:	4b18      	ldr	r3, [pc, #96]	; (8003b50 <MX_I2C1_Init+0x74>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003af2:	4b17      	ldr	r3, [pc, #92]	; (8003b50 <MX_I2C1_Init+0x74>)
 8003af4:	2201      	movs	r2, #1
 8003af6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003af8:	4b15      	ldr	r3, [pc, #84]	; (8003b50 <MX_I2C1_Init+0x74>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003afe:	4b14      	ldr	r3, [pc, #80]	; (8003b50 <MX_I2C1_Init+0x74>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003b04:	4b12      	ldr	r3, [pc, #72]	; (8003b50 <MX_I2C1_Init+0x74>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b0a:	4b11      	ldr	r3, [pc, #68]	; (8003b50 <MX_I2C1_Init+0x74>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b10:	4b0f      	ldr	r3, [pc, #60]	; (8003b50 <MX_I2C1_Init+0x74>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003b16:	4b0e      	ldr	r3, [pc, #56]	; (8003b50 <MX_I2C1_Init+0x74>)
 8003b18:	0018      	movs	r0, r3
 8003b1a:	f001 fbed 	bl	80052f8 <HAL_I2C_Init>
 8003b1e:	1e03      	subs	r3, r0, #0
 8003b20:	d001      	beq.n	8003b26 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003b22:	f000 f989 	bl	8003e38 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003b26:	4b0a      	ldr	r3, [pc, #40]	; (8003b50 <MX_I2C1_Init+0x74>)
 8003b28:	2100      	movs	r1, #0
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	f001 ff28 	bl	8005980 <HAL_I2CEx_ConfigAnalogFilter>
 8003b30:	1e03      	subs	r3, r0, #0
 8003b32:	d001      	beq.n	8003b38 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003b34:	f000 f980 	bl	8003e38 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003b38:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <MX_I2C1_Init+0x74>)
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f001 ff6b 	bl	8005a18 <HAL_I2CEx_ConfigDigitalFilter>
 8003b42:	1e03      	subs	r3, r0, #0
 8003b44:	d001      	beq.n	8003b4a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003b46:	f000 f977 	bl	8003e38 <Error_Handler>
  }

}
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	20000938 	.word	0x20000938
 8003b54:	40005400 	.word	0x40005400
 8003b58:	00707cbb 	.word	0x00707cbb

08003b5c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8003b60:	4b1b      	ldr	r3, [pc, #108]	; (8003bd0 <MX_I2C3_Init+0x74>)
 8003b62:	4a1c      	ldr	r2, [pc, #112]	; (8003bd4 <MX_I2C3_Init+0x78>)
 8003b64:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 8003b66:	4b1a      	ldr	r3, [pc, #104]	; (8003bd0 <MX_I2C3_Init+0x74>)
 8003b68:	4a1b      	ldr	r2, [pc, #108]	; (8003bd8 <MX_I2C3_Init+0x7c>)
 8003b6a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8003b6c:	4b18      	ldr	r3, [pc, #96]	; (8003bd0 <MX_I2C3_Init+0x74>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b72:	4b17      	ldr	r3, [pc, #92]	; (8003bd0 <MX_I2C3_Init+0x74>)
 8003b74:	2201      	movs	r2, #1
 8003b76:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b78:	4b15      	ldr	r3, [pc, #84]	; (8003bd0 <MX_I2C3_Init+0x74>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8003b7e:	4b14      	ldr	r3, [pc, #80]	; (8003bd0 <MX_I2C3_Init+0x74>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003b84:	4b12      	ldr	r3, [pc, #72]	; (8003bd0 <MX_I2C3_Init+0x74>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b8a:	4b11      	ldr	r3, [pc, #68]	; (8003bd0 <MX_I2C3_Init+0x74>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b90:	4b0f      	ldr	r3, [pc, #60]	; (8003bd0 <MX_I2C3_Init+0x74>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003b96:	4b0e      	ldr	r3, [pc, #56]	; (8003bd0 <MX_I2C3_Init+0x74>)
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f001 fbad 	bl	80052f8 <HAL_I2C_Init>
 8003b9e:	1e03      	subs	r3, r0, #0
 8003ba0:	d001      	beq.n	8003ba6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8003ba2:	f000 f949 	bl	8003e38 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003ba6:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <MX_I2C3_Init+0x74>)
 8003ba8:	2100      	movs	r1, #0
 8003baa:	0018      	movs	r0, r3
 8003bac:	f001 fee8 	bl	8005980 <HAL_I2CEx_ConfigAnalogFilter>
 8003bb0:	1e03      	subs	r3, r0, #0
 8003bb2:	d001      	beq.n	8003bb8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8003bb4:	f000 f940 	bl	8003e38 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003bb8:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <MX_I2C3_Init+0x74>)
 8003bba:	2100      	movs	r1, #0
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	f001 ff2b 	bl	8005a18 <HAL_I2CEx_ConfigDigitalFilter>
 8003bc2:	1e03      	subs	r3, r0, #0
 8003bc4:	d001      	beq.n	8003bca <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8003bc6:	f000 f937 	bl	8003e38 <Error_Handler>
  }

}
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	200008ec 	.word	0x200008ec
 8003bd4:	40007800 	.word	0x40007800
 8003bd8:	00707cbb 	.word	0x00707cbb

08003bdc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003bdc:	b590      	push	{r4, r7, lr}
 8003bde:	b08b      	sub	sp, #44	; 0x2c
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be4:	2414      	movs	r4, #20
 8003be6:	193b      	adds	r3, r7, r4
 8003be8:	0018      	movs	r0, r3
 8003bea:	2314      	movs	r3, #20
 8003bec:	001a      	movs	r2, r3
 8003bee:	2100      	movs	r1, #0
 8003bf0:	f004 f8fa 	bl	8007de8 <memset>
  if(i2cHandle->Instance==I2C1)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a34      	ldr	r2, [pc, #208]	; (8003ccc <HAL_I2C_MspInit+0xf0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d134      	bne.n	8003c68 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bfe:	4b34      	ldr	r3, [pc, #208]	; (8003cd0 <HAL_I2C_MspInit+0xf4>)
 8003c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c02:	4b33      	ldr	r3, [pc, #204]	; (8003cd0 <HAL_I2C_MspInit+0xf4>)
 8003c04:	2102      	movs	r1, #2
 8003c06:	430a      	orrs	r2, r1
 8003c08:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c0a:	4b31      	ldr	r3, [pc, #196]	; (8003cd0 <HAL_I2C_MspInit+0xf4>)
 8003c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0e:	2202      	movs	r2, #2
 8003c10:	4013      	ands	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
 8003c14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003c16:	193b      	adds	r3, r7, r4
 8003c18:	22c0      	movs	r2, #192	; 0xc0
 8003c1a:	0092      	lsls	r2, r2, #2
 8003c1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c1e:	0021      	movs	r1, r4
 8003c20:	187b      	adds	r3, r7, r1
 8003c22:	2212      	movs	r2, #18
 8003c24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c26:	187b      	adds	r3, r7, r1
 8003c28:	2201      	movs	r2, #1
 8003c2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c2c:	187b      	adds	r3, r7, r1
 8003c2e:	2203      	movs	r2, #3
 8003c30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c32:	187b      	adds	r3, r7, r1
 8003c34:	2204      	movs	r2, #4
 8003c36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c38:	187b      	adds	r3, r7, r1
 8003c3a:	4a26      	ldr	r2, [pc, #152]	; (8003cd4 <HAL_I2C_MspInit+0xf8>)
 8003c3c:	0019      	movs	r1, r3
 8003c3e:	0010      	movs	r0, r2
 8003c40:	f001 f986 	bl	8004f50 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB8);
 8003c44:	2380      	movs	r3, #128	; 0x80
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	0018      	movs	r0, r3
 8003c4a:	f001 ff31 	bl	8005ab0 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB9);
 8003c4e:	2380      	movs	r3, #128	; 0x80
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	0018      	movs	r0, r3
 8003c54:	f001 ff2c 	bl	8005ab0 <HAL_I2CEx_EnableFastModePlus>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c58:	4b1d      	ldr	r3, [pc, #116]	; (8003cd0 <HAL_I2C_MspInit+0xf4>)
 8003c5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c5c:	4b1c      	ldr	r3, [pc, #112]	; (8003cd0 <HAL_I2C_MspInit+0xf4>)
 8003c5e:	2180      	movs	r1, #128	; 0x80
 8003c60:	0389      	lsls	r1, r1, #14
 8003c62:	430a      	orrs	r2, r1
 8003c64:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003c66:	e02d      	b.n	8003cc4 <HAL_I2C_MspInit+0xe8>
  else if(i2cHandle->Instance==I2C3)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a1a      	ldr	r2, [pc, #104]	; (8003cd8 <HAL_I2C_MspInit+0xfc>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d128      	bne.n	8003cc4 <HAL_I2C_MspInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c72:	4b17      	ldr	r3, [pc, #92]	; (8003cd0 <HAL_I2C_MspInit+0xf4>)
 8003c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c76:	4b16      	ldr	r3, [pc, #88]	; (8003cd0 <HAL_I2C_MspInit+0xf4>)
 8003c78:	2104      	movs	r1, #4
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c7e:	4b14      	ldr	r3, [pc, #80]	; (8003cd0 <HAL_I2C_MspInit+0xf4>)
 8003c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c82:	2204      	movs	r2, #4
 8003c84:	4013      	ands	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003c8a:	2114      	movs	r1, #20
 8003c8c:	187b      	adds	r3, r7, r1
 8003c8e:	2203      	movs	r2, #3
 8003c90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c92:	187b      	adds	r3, r7, r1
 8003c94:	2212      	movs	r2, #18
 8003c96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c98:	187b      	adds	r3, r7, r1
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c9e:	187b      	adds	r3, r7, r1
 8003ca0:	2203      	movs	r2, #3
 8003ca2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_I2C3;
 8003ca4:	187b      	adds	r3, r7, r1
 8003ca6:	2207      	movs	r2, #7
 8003ca8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003caa:	187b      	adds	r3, r7, r1
 8003cac:	4a0b      	ldr	r2, [pc, #44]	; (8003cdc <HAL_I2C_MspInit+0x100>)
 8003cae:	0019      	movs	r1, r3
 8003cb0:	0010      	movs	r0, r2
 8003cb2:	f001 f94d 	bl	8004f50 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003cb6:	4b06      	ldr	r3, [pc, #24]	; (8003cd0 <HAL_I2C_MspInit+0xf4>)
 8003cb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cba:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <HAL_I2C_MspInit+0xf4>)
 8003cbc:	2180      	movs	r1, #128	; 0x80
 8003cbe:	05c9      	lsls	r1, r1, #23
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003cc4:	46c0      	nop			; (mov r8, r8)
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	b00b      	add	sp, #44	; 0x2c
 8003cca:	bd90      	pop	{r4, r7, pc}
 8003ccc:	40005400 	.word	0x40005400
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	50000400 	.word	0x50000400
 8003cd8:	40007800 	.word	0x40007800
 8003cdc:	50000800 	.word	0x50000800

08003ce0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ce4:	f000 fb04 	bl	80042f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ce8:	f000 f82e 	bl	8003d48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003cec:	f7ff fe4c 	bl	8003988 <MX_GPIO_Init>
  MX_DMA_Init();
 8003cf0:	f7ff fe34 	bl	800395c <MX_DMA_Init>
  MX_ADC_Init();
 8003cf4:	f7ff fd60 	bl	80037b8 <MX_ADC_Init>
  MX_TIM2_Init();
 8003cf8:	f000 f9a0 	bl	800403c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8003cfc:	f000 fa5a 	bl	80041b4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003d00:	f7ff feec 	bl	8003adc <MX_I2C1_Init>
  MX_I2C3_Init();
 8003d04:	f7ff ff2a 	bl	8003b5c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8003d08:	4b09      	ldr	r3, [pc, #36]	; (8003d30 <main+0x50>)
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	f002 fe93 	bl	8006a38 <HAL_TIM_PWM_Start_IT>

  HAL_ADC_Start_DMA(&hadc,(uint32_t *)aADCxConvertedData, ADC_CONVERTED_DATA_BUFFER_SIZE);
 8003d12:	4908      	ldr	r1, [pc, #32]	; (8003d34 <main+0x54>)
 8003d14:	4b08      	ldr	r3, [pc, #32]	; (8003d38 <main+0x58>)
 8003d16:	2201      	movs	r2, #1
 8003d18:	0018      	movs	r0, r3
 8003d1a:	f000 fcf1 	bl	8004700 <HAL_ADC_Start_DMA>
  HAL_UART_Transmit(&huart2, Com_Header, sizeof(Com_Header), 10000);
 8003d1e:	4b07      	ldr	r3, [pc, #28]	; (8003d3c <main+0x5c>)
 8003d20:	4907      	ldr	r1, [pc, #28]	; (8003d40 <main+0x60>)
 8003d22:	4808      	ldr	r0, [pc, #32]	; (8003d44 <main+0x64>)
 8003d24:	2238      	movs	r2, #56	; 0x38
 8003d26:	f003 fb55 	bl	80073d4 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  operation();
 8003d2a:	f7ff f983 	bl	8003034 <operation>
 8003d2e:	e7fc      	b.n	8003d2a <main+0x4a>
 8003d30:	20000984 	.word	0x20000984
 8003d34:	200007d4 	.word	0x200007d4
 8003d38:	20000890 	.word	0x20000890
 8003d3c:	00002710 	.word	0x00002710
 8003d40:	20000000 	.word	0x20000000
 8003d44:	200009c4 	.word	0x200009c4

08003d48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d48:	b590      	push	{r4, r7, lr}
 8003d4a:	b09f      	sub	sp, #124	; 0x7c
 8003d4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d4e:	2440      	movs	r4, #64	; 0x40
 8003d50:	193b      	adds	r3, r7, r4
 8003d52:	0018      	movs	r0, r3
 8003d54:	2338      	movs	r3, #56	; 0x38
 8003d56:	001a      	movs	r2, r3
 8003d58:	2100      	movs	r1, #0
 8003d5a:	f004 f845 	bl	8007de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d5e:	232c      	movs	r3, #44	; 0x2c
 8003d60:	18fb      	adds	r3, r7, r3
 8003d62:	0018      	movs	r0, r3
 8003d64:	2314      	movs	r3, #20
 8003d66:	001a      	movs	r2, r3
 8003d68:	2100      	movs	r1, #0
 8003d6a:	f004 f83d 	bl	8007de8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d6e:	1d3b      	adds	r3, r7, #4
 8003d70:	0018      	movs	r0, r3
 8003d72:	2328      	movs	r3, #40	; 0x28
 8003d74:	001a      	movs	r2, r3
 8003d76:	2100      	movs	r1, #0
 8003d78:	f004 f836 	bl	8007de8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d7c:	4b2c      	ldr	r3, [pc, #176]	; (8003e30 <SystemClock_Config+0xe8>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a2c      	ldr	r2, [pc, #176]	; (8003e34 <SystemClock_Config+0xec>)
 8003d82:	401a      	ands	r2, r3
 8003d84:	4b2a      	ldr	r3, [pc, #168]	; (8003e30 <SystemClock_Config+0xe8>)
 8003d86:	2180      	movs	r1, #128	; 0x80
 8003d88:	0109      	lsls	r1, r1, #4
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003d8e:	0021      	movs	r1, r4
 8003d90:	187b      	adds	r3, r7, r1
 8003d92:	2201      	movs	r2, #1
 8003d94:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003d96:	187b      	adds	r3, r7, r1
 8003d98:	22a0      	movs	r2, #160	; 0xa0
 8003d9a:	02d2      	lsls	r2, r2, #11
 8003d9c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d9e:	187b      	adds	r3, r7, r1
 8003da0:	2202      	movs	r2, #2
 8003da2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003da4:	187b      	adds	r3, r7, r1
 8003da6:	2280      	movs	r2, #128	; 0x80
 8003da8:	0252      	lsls	r2, r2, #9
 8003daa:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 8003dac:	187b      	adds	r3, r7, r1
 8003dae:	22c0      	movs	r2, #192	; 0xc0
 8003db0:	0312      	lsls	r2, r2, #12
 8003db2:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8003db4:	187b      	adds	r3, r7, r1
 8003db6:	2280      	movs	r2, #128	; 0x80
 8003db8:	03d2      	lsls	r2, r2, #15
 8003dba:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003dbc:	187b      	adds	r3, r7, r1
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	f001 fe8e 	bl	8005ae0 <HAL_RCC_OscConfig>
 8003dc4:	1e03      	subs	r3, r0, #0
 8003dc6:	d001      	beq.n	8003dcc <SystemClock_Config+0x84>
  {
    Error_Handler();
 8003dc8:	f000 f836 	bl	8003e38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003dcc:	212c      	movs	r1, #44	; 0x2c
 8003dce:	187b      	adds	r3, r7, r1
 8003dd0:	220f      	movs	r2, #15
 8003dd2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003dd4:	187b      	adds	r3, r7, r1
 8003dd6:	2203      	movs	r2, #3
 8003dd8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003dda:	187b      	adds	r3, r7, r1
 8003ddc:	2200      	movs	r2, #0
 8003dde:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003de0:	187b      	adds	r3, r7, r1
 8003de2:	2200      	movs	r2, #0
 8003de4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003de6:	187b      	adds	r3, r7, r1
 8003de8:	2200      	movs	r2, #0
 8003dea:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003dec:	187b      	adds	r3, r7, r1
 8003dee:	2101      	movs	r1, #1
 8003df0:	0018      	movs	r0, r3
 8003df2:	f002 fa49 	bl	8006288 <HAL_RCC_ClockConfig>
 8003df6:	1e03      	subs	r3, r0, #0
 8003df8:	d001      	beq.n	8003dfe <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8003dfa:	f000 f81d 	bl	8003e38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8003dfe:	1d3b      	adds	r3, r7, #4
 8003e00:	2285      	movs	r2, #133	; 0x85
 8003e02:	0052      	lsls	r2, r2, #1
 8003e04:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003e06:	1d3b      	adds	r3, r7, #4
 8003e08:	2200      	movs	r2, #0
 8003e0a:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003e0c:	1d3b      	adds	r3, r7, #4
 8003e0e:	2200      	movs	r2, #0
 8003e10:	619a      	str	r2, [r3, #24]
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003e12:	1d3b      	adds	r3, r7, #4
 8003e14:	2200      	movs	r2, #0
 8003e16:	61da      	str	r2, [r3, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e18:	1d3b      	adds	r3, r7, #4
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	f002 fc58 	bl	80066d0 <HAL_RCCEx_PeriphCLKConfig>
 8003e20:	1e03      	subs	r3, r0, #0
 8003e22:	d001      	beq.n	8003e28 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8003e24:	f000 f808 	bl	8003e38 <Error_Handler>
  }
}
 8003e28:	46c0      	nop			; (mov r8, r8)
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	b01f      	add	sp, #124	; 0x7c
 8003e2e:	bd90      	pop	{r4, r7, pc}
 8003e30:	40007000 	.word	0x40007000
 8003e34:	ffffe7ff 	.word	0xffffe7ff

08003e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e3c:	b672      	cpsid	i
}
 8003e3e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e40:	e7fe      	b.n	8003e40 <Error_Handler+0x8>
	...

08003e44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e48:	4b07      	ldr	r3, [pc, #28]	; (8003e68 <HAL_MspInit+0x24>)
 8003e4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e4c:	4b06      	ldr	r3, [pc, #24]	; (8003e68 <HAL_MspInit+0x24>)
 8003e4e:	2101      	movs	r1, #1
 8003e50:	430a      	orrs	r2, r1
 8003e52:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e54:	4b04      	ldr	r3, [pc, #16]	; (8003e68 <HAL_MspInit+0x24>)
 8003e56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e58:	4b03      	ldr	r3, [pc, #12]	; (8003e68 <HAL_MspInit+0x24>)
 8003e5a:	2180      	movs	r1, #128	; 0x80
 8003e5c:	0549      	lsls	r1, r1, #21
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e62:	46c0      	nop			; (mov r8, r8)
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	40021000 	.word	0x40021000

08003e6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e70:	e7fe      	b.n	8003e70 <NMI_Handler+0x4>

08003e72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e76:	e7fe      	b.n	8003e76 <HardFault_Handler+0x4>

08003e78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003e7c:	46c0      	nop			; (mov r8, r8)
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e90:	f000 fa82 	bl	8004398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e94:	46c0      	nop			; (mov r8, r8)
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003ea0:	4b03      	ldr	r3, [pc, #12]	; (8003eb0 <TIM2_IRQHandler+0x14>)
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f002 fe92 	bl	8006bcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003ea8:	46c0      	nop			; (mov r8, r8)
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	46c0      	nop			; (mov r8, r8)
 8003eb0:	20000984 	.word	0x20000984

08003eb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
	return 1;
 8003eb8:	2301      	movs	r3, #1
}
 8003eba:	0018      	movs	r0, r3
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <_kill>:

int _kill(int pid, int sig)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003eca:	f003 ff63 	bl	8007d94 <__errno>
 8003ece:	0003      	movs	r3, r0
 8003ed0:	2216      	movs	r2, #22
 8003ed2:	601a      	str	r2, [r3, #0]
	return -1;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	425b      	negs	r3, r3
}
 8003ed8:	0018      	movs	r0, r3
 8003eda:	46bd      	mov	sp, r7
 8003edc:	b002      	add	sp, #8
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <_exit>:

void _exit (int status)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003ee8:	2301      	movs	r3, #1
 8003eea:	425a      	negs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	0011      	movs	r1, r2
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	f7ff ffe5 	bl	8003ec0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003ef6:	e7fe      	b.n	8003ef6 <_exit+0x16>

08003ef8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f04:	2300      	movs	r3, #0
 8003f06:	617b      	str	r3, [r7, #20]
 8003f08:	e00a      	b.n	8003f20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003f0a:	e000      	b.n	8003f0e <_read+0x16>
 8003f0c:	bf00      	nop
 8003f0e:	0001      	movs	r1, r0
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	1c5a      	adds	r2, r3, #1
 8003f14:	60ba      	str	r2, [r7, #8]
 8003f16:	b2ca      	uxtb	r2, r1
 8003f18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	dbf0      	blt.n	8003f0a <_read+0x12>
	}

return len;
 8003f28:	687b      	ldr	r3, [r7, #4]
}
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	b006      	add	sp, #24
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b086      	sub	sp, #24
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	60f8      	str	r0, [r7, #12]
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f3e:	2300      	movs	r3, #0
 8003f40:	617b      	str	r3, [r7, #20]
 8003f42:	e009      	b.n	8003f58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	60ba      	str	r2, [r7, #8]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	e000      	b.n	8003f52 <_write+0x20>
 8003f50:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	3301      	adds	r3, #1
 8003f56:	617b      	str	r3, [r7, #20]
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	dbf1      	blt.n	8003f44 <_write+0x12>
	}
	return len;
 8003f60:	687b      	ldr	r3, [r7, #4]
}
 8003f62:	0018      	movs	r0, r3
 8003f64:	46bd      	mov	sp, r7
 8003f66:	b006      	add	sp, #24
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <_close>:

int _close(int file)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b082      	sub	sp, #8
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
	return -1;
 8003f72:	2301      	movs	r3, #1
 8003f74:	425b      	negs	r3, r3
}
 8003f76:	0018      	movs	r0, r3
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	b002      	add	sp, #8
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b082      	sub	sp, #8
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
 8003f86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	2280      	movs	r2, #128	; 0x80
 8003f8c:	0192      	lsls	r2, r2, #6
 8003f8e:	605a      	str	r2, [r3, #4]
	return 0;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	0018      	movs	r0, r3
 8003f94:	46bd      	mov	sp, r7
 8003f96:	b002      	add	sp, #8
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <_isatty>:

int _isatty(int file)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b082      	sub	sp, #8
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
	return 1;
 8003fa2:	2301      	movs	r3, #1
}
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	b002      	add	sp, #8
 8003faa:	bd80      	pop	{r7, pc}

08003fac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
	return 0;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	0018      	movs	r0, r3
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	b004      	add	sp, #16
 8003fc0:	bd80      	pop	{r7, pc}
	...

08003fc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fcc:	4a14      	ldr	r2, [pc, #80]	; (8004020 <_sbrk+0x5c>)
 8003fce:	4b15      	ldr	r3, [pc, #84]	; (8004024 <_sbrk+0x60>)
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fd8:	4b13      	ldr	r3, [pc, #76]	; (8004028 <_sbrk+0x64>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d102      	bne.n	8003fe6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003fe0:	4b11      	ldr	r3, [pc, #68]	; (8004028 <_sbrk+0x64>)
 8003fe2:	4a12      	ldr	r2, [pc, #72]	; (800402c <_sbrk+0x68>)
 8003fe4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fe6:	4b10      	ldr	r3, [pc, #64]	; (8004028 <_sbrk+0x64>)
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	18d3      	adds	r3, r2, r3
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d207      	bcs.n	8004004 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ff4:	f003 fece 	bl	8007d94 <__errno>
 8003ff8:	0003      	movs	r3, r0
 8003ffa:	220c      	movs	r2, #12
 8003ffc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ffe:	2301      	movs	r3, #1
 8004000:	425b      	negs	r3, r3
 8004002:	e009      	b.n	8004018 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004004:	4b08      	ldr	r3, [pc, #32]	; (8004028 <_sbrk+0x64>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800400a:	4b07      	ldr	r3, [pc, #28]	; (8004028 <_sbrk+0x64>)
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	18d2      	adds	r2, r2, r3
 8004012:	4b05      	ldr	r3, [pc, #20]	; (8004028 <_sbrk+0x64>)
 8004014:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004016:	68fb      	ldr	r3, [r7, #12]
}
 8004018:	0018      	movs	r0, r3
 800401a:	46bd      	mov	sp, r7
 800401c:	b006      	add	sp, #24
 800401e:	bd80      	pop	{r7, pc}
 8004020:	20005000 	.word	0x20005000
 8004024:	00000400 	.word	0x00000400
 8004028:	20000230 	.word	0x20000230
 800402c:	20000a60 	.word	0x20000a60

08004030 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004034:	46c0      	nop			; (mov r8, r8)
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
	...

0800403c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004042:	2310      	movs	r3, #16
 8004044:	18fb      	adds	r3, r7, r3
 8004046:	0018      	movs	r0, r3
 8004048:	2308      	movs	r3, #8
 800404a:	001a      	movs	r2, r3
 800404c:	2100      	movs	r1, #0
 800404e:	f003 fecb 	bl	8007de8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004052:	003b      	movs	r3, r7
 8004054:	0018      	movs	r0, r3
 8004056:	2310      	movs	r3, #16
 8004058:	001a      	movs	r2, r3
 800405a:	2100      	movs	r1, #0
 800405c:	f003 fec4 	bl	8007de8 <memset>

  htim2.Instance = TIM2;
 8004060:	4b24      	ldr	r3, [pc, #144]	; (80040f4 <MX_TIM2_Init+0xb8>)
 8004062:	2280      	movs	r2, #128	; 0x80
 8004064:	05d2      	lsls	r2, r2, #23
 8004066:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8004068:	4b22      	ldr	r3, [pc, #136]	; (80040f4 <MX_TIM2_Init+0xb8>)
 800406a:	2201      	movs	r2, #1
 800406c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800406e:	4b21      	ldr	r3, [pc, #132]	; (80040f4 <MX_TIM2_Init+0xb8>)
 8004070:	2200      	movs	r2, #0
 8004072:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000;
 8004074:	4b1f      	ldr	r3, [pc, #124]	; (80040f4 <MX_TIM2_Init+0xb8>)
 8004076:	4a20      	ldr	r2, [pc, #128]	; (80040f8 <MX_TIM2_Init+0xbc>)
 8004078:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800407a:	4b1e      	ldr	r3, [pc, #120]	; (80040f4 <MX_TIM2_Init+0xb8>)
 800407c:	2200      	movs	r2, #0
 800407e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004080:	4b1c      	ldr	r3, [pc, #112]	; (80040f4 <MX_TIM2_Init+0xb8>)
 8004082:	2200      	movs	r2, #0
 8004084:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004086:	4b1b      	ldr	r3, [pc, #108]	; (80040f4 <MX_TIM2_Init+0xb8>)
 8004088:	0018      	movs	r0, r3
 800408a:	f002 fc95 	bl	80069b8 <HAL_TIM_PWM_Init>
 800408e:	1e03      	subs	r3, r0, #0
 8004090:	d001      	beq.n	8004096 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8004092:	f7ff fed1 	bl	8003e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004096:	2110      	movs	r1, #16
 8004098:	187b      	adds	r3, r7, r1
 800409a:	2200      	movs	r2, #0
 800409c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800409e:	187b      	adds	r3, r7, r1
 80040a0:	2200      	movs	r2, #0
 80040a2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80040a4:	187a      	adds	r2, r7, r1
 80040a6:	4b13      	ldr	r3, [pc, #76]	; (80040f4 <MX_TIM2_Init+0xb8>)
 80040a8:	0011      	movs	r1, r2
 80040aa:	0018      	movs	r0, r3
 80040ac:	f003 f8e0 	bl	8007270 <HAL_TIMEx_MasterConfigSynchronization>
 80040b0:	1e03      	subs	r3, r0, #0
 80040b2:	d001      	beq.n	80040b8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80040b4:	f7ff fec0 	bl	8003e38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040b8:	003b      	movs	r3, r7
 80040ba:	2260      	movs	r2, #96	; 0x60
 80040bc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 25000;
 80040be:	003b      	movs	r3, r7
 80040c0:	4a0e      	ldr	r2, [pc, #56]	; (80040fc <MX_TIM2_Init+0xc0>)
 80040c2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040c4:	003b      	movs	r3, r7
 80040c6:	2200      	movs	r2, #0
 80040c8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80040ca:	003b      	movs	r3, r7
 80040cc:	2204      	movs	r2, #4
 80040ce:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80040d0:	0039      	movs	r1, r7
 80040d2:	4b08      	ldr	r3, [pc, #32]	; (80040f4 <MX_TIM2_Init+0xb8>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	0018      	movs	r0, r3
 80040d8:	f002 fe60 	bl	8006d9c <HAL_TIM_PWM_ConfigChannel>
 80040dc:	1e03      	subs	r3, r0, #0
 80040de:	d001      	beq.n	80040e4 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80040e0:	f7ff feaa 	bl	8003e38 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80040e4:	4b03      	ldr	r3, [pc, #12]	; (80040f4 <MX_TIM2_Init+0xb8>)
 80040e6:	0018      	movs	r0, r3
 80040e8:	f000 f828 	bl	800413c <HAL_TIM_MspPostInit>

}
 80040ec:	46c0      	nop			; (mov r8, r8)
 80040ee:	46bd      	mov	sp, r7
 80040f0:	b006      	add	sp, #24
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	20000984 	.word	0x20000984
 80040f8:	0000c350 	.word	0x0000c350
 80040fc:	000061a8 	.word	0x000061a8

08004100 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	2380      	movs	r3, #128	; 0x80
 800410e:	05db      	lsls	r3, r3, #23
 8004110:	429a      	cmp	r2, r3
 8004112:	d10d      	bne.n	8004130 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004114:	4b08      	ldr	r3, [pc, #32]	; (8004138 <HAL_TIM_PWM_MspInit+0x38>)
 8004116:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004118:	4b07      	ldr	r3, [pc, #28]	; (8004138 <HAL_TIM_PWM_MspInit+0x38>)
 800411a:	2101      	movs	r1, #1
 800411c:	430a      	orrs	r2, r1
 800411e:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004120:	2200      	movs	r2, #0
 8004122:	2100      	movs	r1, #0
 8004124:	200f      	movs	r0, #15
 8004126:	f000 fdd5 	bl	8004cd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800412a:	200f      	movs	r0, #15
 800412c:	f000 fde7 	bl	8004cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004130:	46c0      	nop			; (mov r8, r8)
 8004132:	46bd      	mov	sp, r7
 8004134:	b002      	add	sp, #8
 8004136:	bd80      	pop	{r7, pc}
 8004138:	40021000 	.word	0x40021000

0800413c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800413c:	b590      	push	{r4, r7, lr}
 800413e:	b089      	sub	sp, #36	; 0x24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004144:	240c      	movs	r4, #12
 8004146:	193b      	adds	r3, r7, r4
 8004148:	0018      	movs	r0, r3
 800414a:	2314      	movs	r3, #20
 800414c:	001a      	movs	r2, r3
 800414e:	2100      	movs	r1, #0
 8004150:	f003 fe4a 	bl	8007de8 <memset>
  if(timHandle->Instance==TIM2)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	2380      	movs	r3, #128	; 0x80
 800415a:	05db      	lsls	r3, r3, #23
 800415c:	429a      	cmp	r2, r3
 800415e:	d122      	bne.n	80041a6 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004160:	4b13      	ldr	r3, [pc, #76]	; (80041b0 <HAL_TIM_MspPostInit+0x74>)
 8004162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004164:	4b12      	ldr	r3, [pc, #72]	; (80041b0 <HAL_TIM_MspPostInit+0x74>)
 8004166:	2101      	movs	r1, #1
 8004168:	430a      	orrs	r2, r1
 800416a:	62da      	str	r2, [r3, #44]	; 0x2c
 800416c:	4b10      	ldr	r3, [pc, #64]	; (80041b0 <HAL_TIM_MspPostInit+0x74>)
 800416e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004170:	2201      	movs	r2, #1
 8004172:	4013      	ands	r3, r2
 8004174:	60bb      	str	r3, [r7, #8]
 8004176:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004178:	0021      	movs	r1, r4
 800417a:	187b      	adds	r3, r7, r1
 800417c:	2201      	movs	r2, #1
 800417e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004180:	187b      	adds	r3, r7, r1
 8004182:	2202      	movs	r2, #2
 8004184:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004186:	187b      	adds	r3, r7, r1
 8004188:	2200      	movs	r2, #0
 800418a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800418c:	187b      	adds	r3, r7, r1
 800418e:	2200      	movs	r2, #0
 8004190:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8004192:	187b      	adds	r3, r7, r1
 8004194:	2202      	movs	r2, #2
 8004196:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004198:	187a      	adds	r2, r7, r1
 800419a:	23a0      	movs	r3, #160	; 0xa0
 800419c:	05db      	lsls	r3, r3, #23
 800419e:	0011      	movs	r1, r2
 80041a0:	0018      	movs	r0, r3
 80041a2:	f000 fed5 	bl	8004f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80041a6:	46c0      	nop			; (mov r8, r8)
 80041a8:	46bd      	mov	sp, r7
 80041aa:	b009      	add	sp, #36	; 0x24
 80041ac:	bd90      	pop	{r4, r7, pc}
 80041ae:	46c0      	nop			; (mov r8, r8)
 80041b0:	40021000 	.word	0x40021000

080041b4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80041b8:	4b14      	ldr	r3, [pc, #80]	; (800420c <MX_USART2_UART_Init+0x58>)
 80041ba:	4a15      	ldr	r2, [pc, #84]	; (8004210 <MX_USART2_UART_Init+0x5c>)
 80041bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80041be:	4b13      	ldr	r3, [pc, #76]	; (800420c <MX_USART2_UART_Init+0x58>)
 80041c0:	22e1      	movs	r2, #225	; 0xe1
 80041c2:	0252      	lsls	r2, r2, #9
 80041c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80041c6:	4b11      	ldr	r3, [pc, #68]	; (800420c <MX_USART2_UART_Init+0x58>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80041cc:	4b0f      	ldr	r3, [pc, #60]	; (800420c <MX_USART2_UART_Init+0x58>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80041d2:	4b0e      	ldr	r3, [pc, #56]	; (800420c <MX_USART2_UART_Init+0x58>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80041d8:	4b0c      	ldr	r3, [pc, #48]	; (800420c <MX_USART2_UART_Init+0x58>)
 80041da:	220c      	movs	r2, #12
 80041dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041de:	4b0b      	ldr	r3, [pc, #44]	; (800420c <MX_USART2_UART_Init+0x58>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80041e4:	4b09      	ldr	r3, [pc, #36]	; (800420c <MX_USART2_UART_Init+0x58>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80041ea:	4b08      	ldr	r3, [pc, #32]	; (800420c <MX_USART2_UART_Init+0x58>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80041f0:	4b06      	ldr	r3, [pc, #24]	; (800420c <MX_USART2_UART_Init+0x58>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80041f6:	4b05      	ldr	r3, [pc, #20]	; (800420c <MX_USART2_UART_Init+0x58>)
 80041f8:	0018      	movs	r0, r3
 80041fa:	f003 f897 	bl	800732c <HAL_UART_Init>
 80041fe:	1e03      	subs	r3, r0, #0
 8004200:	d001      	beq.n	8004206 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004202:	f7ff fe19 	bl	8003e38 <Error_Handler>
  }

}
 8004206:	46c0      	nop			; (mov r8, r8)
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	200009c4 	.word	0x200009c4
 8004210:	40004400 	.word	0x40004400

08004214 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004214:	b590      	push	{r4, r7, lr}
 8004216:	b089      	sub	sp, #36	; 0x24
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800421c:	240c      	movs	r4, #12
 800421e:	193b      	adds	r3, r7, r4
 8004220:	0018      	movs	r0, r3
 8004222:	2314      	movs	r3, #20
 8004224:	001a      	movs	r2, r3
 8004226:	2100      	movs	r1, #0
 8004228:	f003 fdde 	bl	8007de8 <memset>
  if(uartHandle->Instance==USART2)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a18      	ldr	r2, [pc, #96]	; (8004294 <HAL_UART_MspInit+0x80>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d129      	bne.n	800428a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004236:	4b18      	ldr	r3, [pc, #96]	; (8004298 <HAL_UART_MspInit+0x84>)
 8004238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800423a:	4b17      	ldr	r3, [pc, #92]	; (8004298 <HAL_UART_MspInit+0x84>)
 800423c:	2180      	movs	r1, #128	; 0x80
 800423e:	0289      	lsls	r1, r1, #10
 8004240:	430a      	orrs	r2, r1
 8004242:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004244:	4b14      	ldr	r3, [pc, #80]	; (8004298 <HAL_UART_MspInit+0x84>)
 8004246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004248:	4b13      	ldr	r3, [pc, #76]	; (8004298 <HAL_UART_MspInit+0x84>)
 800424a:	2101      	movs	r1, #1
 800424c:	430a      	orrs	r2, r1
 800424e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004250:	4b11      	ldr	r3, [pc, #68]	; (8004298 <HAL_UART_MspInit+0x84>)
 8004252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004254:	2201      	movs	r2, #1
 8004256:	4013      	ands	r3, r2
 8004258:	60bb      	str	r3, [r7, #8]
 800425a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800425c:	0021      	movs	r1, r4
 800425e:	187b      	adds	r3, r7, r1
 8004260:	220c      	movs	r2, #12
 8004262:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004264:	187b      	adds	r3, r7, r1
 8004266:	2202      	movs	r2, #2
 8004268:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800426a:	187b      	adds	r3, r7, r1
 800426c:	2200      	movs	r2, #0
 800426e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004270:	187b      	adds	r3, r7, r1
 8004272:	2203      	movs	r2, #3
 8004274:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8004276:	187b      	adds	r3, r7, r1
 8004278:	2204      	movs	r2, #4
 800427a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800427c:	187a      	adds	r2, r7, r1
 800427e:	23a0      	movs	r3, #160	; 0xa0
 8004280:	05db      	lsls	r3, r3, #23
 8004282:	0011      	movs	r1, r2
 8004284:	0018      	movs	r0, r3
 8004286:	f000 fe63 	bl	8004f50 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800428a:	46c0      	nop			; (mov r8, r8)
 800428c:	46bd      	mov	sp, r7
 800428e:	b009      	add	sp, #36	; 0x24
 8004290:	bd90      	pop	{r4, r7, pc}
 8004292:	46c0      	nop			; (mov r8, r8)
 8004294:	40004400 	.word	0x40004400
 8004298:	40021000 	.word	0x40021000

0800429c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800429c:	480d      	ldr	r0, [pc, #52]	; (80042d4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800429e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80042a0:	480d      	ldr	r0, [pc, #52]	; (80042d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80042a2:	490e      	ldr	r1, [pc, #56]	; (80042dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80042a4:	4a0e      	ldr	r2, [pc, #56]	; (80042e0 <LoopForever+0xe>)
  movs r3, #0
 80042a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042a8:	e002      	b.n	80042b0 <LoopCopyDataInit>

080042aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042ae:	3304      	adds	r3, #4

080042b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042b4:	d3f9      	bcc.n	80042aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042b6:	4a0b      	ldr	r2, [pc, #44]	; (80042e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80042b8:	4c0b      	ldr	r4, [pc, #44]	; (80042e8 <LoopForever+0x16>)
  movs r3, #0
 80042ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042bc:	e001      	b.n	80042c2 <LoopFillZerobss>

080042be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042c0:	3204      	adds	r2, #4

080042c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042c4:	d3fb      	bcc.n	80042be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80042c6:	f7ff feb3 	bl	8004030 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80042ca:	f003 fd69 	bl	8007da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042ce:	f7ff fd07 	bl	8003ce0 <main>

080042d2 <LoopForever>:

LoopForever:
    b LoopForever
 80042d2:	e7fe      	b.n	80042d2 <LoopForever>
   ldr   r0, =_estack
 80042d4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80042d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042dc:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 80042e0:	0800b334 	.word	0x0800b334
  ldr r2, =_sbss
 80042e4:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 80042e8:	20000a5c 	.word	0x20000a5c

080042ec <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042ec:	e7fe      	b.n	80042ec <ADC1_COMP_IRQHandler>
	...

080042f0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80042f6:	1dfb      	adds	r3, r7, #7
 80042f8:	2200      	movs	r2, #0
 80042fa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80042fc:	4b0b      	ldr	r3, [pc, #44]	; (800432c <HAL_Init+0x3c>)
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	4b0a      	ldr	r3, [pc, #40]	; (800432c <HAL_Init+0x3c>)
 8004302:	2140      	movs	r1, #64	; 0x40
 8004304:	430a      	orrs	r2, r1
 8004306:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004308:	2000      	movs	r0, #0
 800430a:	f000 f811 	bl	8004330 <HAL_InitTick>
 800430e:	1e03      	subs	r3, r0, #0
 8004310:	d003      	beq.n	800431a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8004312:	1dfb      	adds	r3, r7, #7
 8004314:	2201      	movs	r2, #1
 8004316:	701a      	strb	r2, [r3, #0]
 8004318:	e001      	b.n	800431e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800431a:	f7ff fd93 	bl	8003e44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800431e:	1dfb      	adds	r3, r7, #7
 8004320:	781b      	ldrb	r3, [r3, #0]
}
 8004322:	0018      	movs	r0, r3
 8004324:	46bd      	mov	sp, r7
 8004326:	b002      	add	sp, #8
 8004328:	bd80      	pop	{r7, pc}
 800432a:	46c0      	nop			; (mov r8, r8)
 800432c:	40022000 	.word	0x40022000

08004330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004330:	b590      	push	{r4, r7, lr}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004338:	4b14      	ldr	r3, [pc, #80]	; (800438c <HAL_InitTick+0x5c>)
 800433a:	681c      	ldr	r4, [r3, #0]
 800433c:	4b14      	ldr	r3, [pc, #80]	; (8004390 <HAL_InitTick+0x60>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	0019      	movs	r1, r3
 8004342:	23fa      	movs	r3, #250	; 0xfa
 8004344:	0098      	lsls	r0, r3, #2
 8004346:	f7fb fefb 	bl	8000140 <__udivsi3>
 800434a:	0003      	movs	r3, r0
 800434c:	0019      	movs	r1, r3
 800434e:	0020      	movs	r0, r4
 8004350:	f7fb fef6 	bl	8000140 <__udivsi3>
 8004354:	0003      	movs	r3, r0
 8004356:	0018      	movs	r0, r3
 8004358:	f000 fce1 	bl	8004d1e <HAL_SYSTICK_Config>
 800435c:	1e03      	subs	r3, r0, #0
 800435e:	d001      	beq.n	8004364 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e00f      	b.n	8004384 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b03      	cmp	r3, #3
 8004368:	d80b      	bhi.n	8004382 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	2301      	movs	r3, #1
 800436e:	425b      	negs	r3, r3
 8004370:	2200      	movs	r2, #0
 8004372:	0018      	movs	r0, r3
 8004374:	f000 fcae 	bl	8004cd4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004378:	4b06      	ldr	r3, [pc, #24]	; (8004394 <HAL_InitTick+0x64>)
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800437e:	2300      	movs	r3, #0
 8004380:	e000      	b.n	8004384 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
}
 8004384:	0018      	movs	r0, r3
 8004386:	46bd      	mov	sp, r7
 8004388:	b003      	add	sp, #12
 800438a:	bd90      	pop	{r4, r7, pc}
 800438c:	20000038 	.word	0x20000038
 8004390:	20000040 	.word	0x20000040
 8004394:	2000003c 	.word	0x2000003c

08004398 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800439c:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <HAL_IncTick+0x1c>)
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	001a      	movs	r2, r3
 80043a2:	4b05      	ldr	r3, [pc, #20]	; (80043b8 <HAL_IncTick+0x20>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	18d2      	adds	r2, r2, r3
 80043a8:	4b03      	ldr	r3, [pc, #12]	; (80043b8 <HAL_IncTick+0x20>)
 80043aa:	601a      	str	r2, [r3, #0]
}
 80043ac:	46c0      	nop			; (mov r8, r8)
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	20000040 	.word	0x20000040
 80043b8:	20000a48 	.word	0x20000a48

080043bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	af00      	add	r7, sp, #0
  return uwTick;
 80043c0:	4b02      	ldr	r3, [pc, #8]	; (80043cc <HAL_GetTick+0x10>)
 80043c2:	681b      	ldr	r3, [r3, #0]
}
 80043c4:	0018      	movs	r0, r3
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	20000a48 	.word	0x20000a48

080043d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043d8:	f7ff fff0 	bl	80043bc <HAL_GetTick>
 80043dc:	0003      	movs	r3, r0
 80043de:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	3301      	adds	r3, #1
 80043e8:	d005      	beq.n	80043f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043ea:	4b0a      	ldr	r3, [pc, #40]	; (8004414 <HAL_Delay+0x44>)
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	001a      	movs	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	189b      	adds	r3, r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80043f6:	46c0      	nop			; (mov r8, r8)
 80043f8:	f7ff ffe0 	bl	80043bc <HAL_GetTick>
 80043fc:	0002      	movs	r2, r0
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	429a      	cmp	r2, r3
 8004406:	d8f7      	bhi.n	80043f8 <HAL_Delay+0x28>
  {
  }
}
 8004408:	46c0      	nop			; (mov r8, r8)
 800440a:	46c0      	nop			; (mov r8, r8)
 800440c:	46bd      	mov	sp, r7
 800440e:	b004      	add	sp, #16
 8004410:	bd80      	pop	{r7, pc}
 8004412:	46c0      	nop			; (mov r8, r8)
 8004414:	20000040 	.word	0x20000040

08004418 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e159      	b.n	80046de <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10a      	bne.n	8004448 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2250      	movs	r2, #80	; 0x50
 800443c:	2100      	movs	r1, #0
 800443e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	0018      	movs	r0, r3
 8004444:	f7ff fa1e 	bl	8003884 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444c:	2210      	movs	r2, #16
 800444e:	4013      	ands	r3, r2
 8004450:	2b10      	cmp	r3, #16
 8004452:	d005      	beq.n	8004460 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	2204      	movs	r2, #4
 800445c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800445e:	d00b      	beq.n	8004478 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004464:	2210      	movs	r2, #16
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2250      	movs	r2, #80	; 0x50
 8004470:	2100      	movs	r1, #0
 8004472:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e132      	b.n	80046de <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447c:	4a9a      	ldr	r2, [pc, #616]	; (80046e8 <HAL_ADC_Init+0x2d0>)
 800447e:	4013      	ands	r3, r2
 8004480:	2202      	movs	r2, #2
 8004482:	431a      	orrs	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	2203      	movs	r2, #3
 8004490:	4013      	ands	r3, r2
 8004492:	2b01      	cmp	r3, #1
 8004494:	d108      	bne.n	80044a8 <HAL_ADC_Init+0x90>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2201      	movs	r2, #1
 800449e:	4013      	ands	r3, r2
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d101      	bne.n	80044a8 <HAL_ADC_Init+0x90>
 80044a4:	2301      	movs	r3, #1
 80044a6:	e000      	b.n	80044aa <HAL_ADC_Init+0x92>
 80044a8:	2300      	movs	r3, #0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d149      	bne.n	8004542 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	23c0      	movs	r3, #192	; 0xc0
 80044b4:	061b      	lsls	r3, r3, #24
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d00b      	beq.n	80044d2 <HAL_ADC_Init+0xba>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	2380      	movs	r3, #128	; 0x80
 80044c0:	05db      	lsls	r3, r3, #23
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d005      	beq.n	80044d2 <HAL_ADC_Init+0xba>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	2380      	movs	r3, #128	; 0x80
 80044cc:	061b      	lsls	r3, r3, #24
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d111      	bne.n	80044f6 <HAL_ADC_Init+0xde>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	0092      	lsls	r2, r2, #2
 80044de:	0892      	lsrs	r2, r2, #2
 80044e0:	611a      	str	r2, [r3, #16]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6919      	ldr	r1, [r3, #16]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	611a      	str	r2, [r3, #16]
 80044f4:	e014      	b.n	8004520 <HAL_ADC_Init+0x108>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	691a      	ldr	r2, [r3, #16]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	0092      	lsls	r2, r2, #2
 8004502:	0892      	lsrs	r2, r2, #2
 8004504:	611a      	str	r2, [r3, #16]
 8004506:	4b79      	ldr	r3, [pc, #484]	; (80046ec <HAL_ADC_Init+0x2d4>)
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	4b78      	ldr	r3, [pc, #480]	; (80046ec <HAL_ADC_Init+0x2d4>)
 800450c:	4978      	ldr	r1, [pc, #480]	; (80046f0 <HAL_ADC_Init+0x2d8>)
 800450e:	400a      	ands	r2, r1
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	4b76      	ldr	r3, [pc, #472]	; (80046ec <HAL_ADC_Init+0x2d4>)
 8004514:	6819      	ldr	r1, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	4b74      	ldr	r3, [pc, #464]	; (80046ec <HAL_ADC_Init+0x2d4>)
 800451c:	430a      	orrs	r2, r1
 800451e:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68da      	ldr	r2, [r3, #12]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2118      	movs	r1, #24
 800452c:	438a      	bics	r2, r1
 800452e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68d9      	ldr	r1, [r3, #12]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689a      	ldr	r2, [r3, #8]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8004542:	4b6a      	ldr	r3, [pc, #424]	; (80046ec <HAL_ADC_Init+0x2d4>)
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	4b69      	ldr	r3, [pc, #420]	; (80046ec <HAL_ADC_Init+0x2d4>)
 8004548:	496a      	ldr	r1, [pc, #424]	; (80046f4 <HAL_ADC_Init+0x2dc>)
 800454a:	400a      	ands	r2, r1
 800454c:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800454e:	4b67      	ldr	r3, [pc, #412]	; (80046ec <HAL_ADC_Init+0x2d4>)
 8004550:	6819      	ldr	r1, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004556:	065a      	lsls	r2, r3, #25
 8004558:	4b64      	ldr	r3, [pc, #400]	; (80046ec <HAL_ADC_Init+0x2d4>)
 800455a:	430a      	orrs	r2, r1
 800455c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	2380      	movs	r3, #128	; 0x80
 8004566:	055b      	lsls	r3, r3, #21
 8004568:	4013      	ands	r3, r2
 800456a:	d108      	bne.n	800457e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689a      	ldr	r2, [r3, #8]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2180      	movs	r1, #128	; 0x80
 8004578:	0549      	lsls	r1, r1, #21
 800457a:	430a      	orrs	r2, r1
 800457c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68da      	ldr	r2, [r3, #12]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	495b      	ldr	r1, [pc, #364]	; (80046f8 <HAL_ADC_Init+0x2e0>)
 800458a:	400a      	ands	r2, r1
 800458c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68d9      	ldr	r1, [r3, #12]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	2b02      	cmp	r3, #2
 800459e:	d101      	bne.n	80045a4 <HAL_ADC_Init+0x18c>
 80045a0:	2304      	movs	r3, #4
 80045a2:	e000      	b.n	80045a6 <HAL_ADC_Init+0x18e>
 80045a4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80045a6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2020      	movs	r0, #32
 80045ac:	5c1b      	ldrb	r3, [r3, r0]
 80045ae:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80045b0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	202c      	movs	r0, #44	; 0x2c
 80045b6:	5c1b      	ldrb	r3, [r3, r0]
 80045b8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80045ba:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80045c0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80045c8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80045d0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045de:	23c2      	movs	r3, #194	; 0xc2
 80045e0:	33ff      	adds	r3, #255	; 0xff
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d00b      	beq.n	80045fe <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68d9      	ldr	r1, [r3, #12]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80045f4:	431a      	orrs	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2221      	movs	r2, #33	; 0x21
 8004602:	5c9b      	ldrb	r3, [r3, r2]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d11a      	bne.n	800463e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2220      	movs	r2, #32
 800460c:	5c9b      	ldrb	r3, [r3, r2]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d109      	bne.n	8004626 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2180      	movs	r1, #128	; 0x80
 800461e:	0249      	lsls	r1, r1, #9
 8004620:	430a      	orrs	r2, r1
 8004622:	60da      	str	r2, [r3, #12]
 8004624:	e00b      	b.n	800463e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462a:	2220      	movs	r2, #32
 800462c:	431a      	orrs	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004636:	2201      	movs	r2, #1
 8004638:	431a      	orrs	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004642:	2b01      	cmp	r3, #1
 8004644:	d11f      	bne.n	8004686 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	691a      	ldr	r2, [r3, #16]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	492a      	ldr	r1, [pc, #168]	; (80046fc <HAL_ADC_Init+0x2e4>)
 8004652:	400a      	ands	r2, r1
 8004654:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	6919      	ldr	r1, [r3, #16]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004664:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 800466a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	430a      	orrs	r2, r1
 8004672:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	691a      	ldr	r2, [r3, #16]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2101      	movs	r1, #1
 8004680:	430a      	orrs	r2, r1
 8004682:	611a      	str	r2, [r3, #16]
 8004684:	e00e      	b.n	80046a4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	2201      	movs	r2, #1
 800468e:	4013      	ands	r3, r2
 8004690:	2b01      	cmp	r3, #1
 8004692:	d107      	bne.n	80046a4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	691a      	ldr	r2, [r3, #16]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2101      	movs	r1, #1
 80046a0:	438a      	bics	r2, r1
 80046a2:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	695a      	ldr	r2, [r3, #20]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2107      	movs	r1, #7
 80046b0:	438a      	bics	r2, r1
 80046b2:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6959      	ldr	r1, [r3, #20]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d0:	2203      	movs	r2, #3
 80046d2:	4393      	bics	r3, r2
 80046d4:	2201      	movs	r2, #1
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	0018      	movs	r0, r3
 80046e0:	46bd      	mov	sp, r7
 80046e2:	b002      	add	sp, #8
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	46c0      	nop			; (mov r8, r8)
 80046e8:	fffffefd 	.word	0xfffffefd
 80046ec:	40012708 	.word	0x40012708
 80046f0:	ffc3ffff 	.word	0xffc3ffff
 80046f4:	fdffffff 	.word	0xfdffffff
 80046f8:	fffe0219 	.word	0xfffe0219
 80046fc:	fffffc03 	.word	0xfffffc03

08004700 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004700:	b590      	push	{r4, r7, lr}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800470c:	2317      	movs	r3, #23
 800470e:	18fb      	adds	r3, r7, r3
 8004710:	2200      	movs	r2, #0
 8004712:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2204      	movs	r2, #4
 800471c:	4013      	ands	r3, r2
 800471e:	d15e      	bne.n	80047de <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2250      	movs	r2, #80	; 0x50
 8004724:	5c9b      	ldrb	r3, [r3, r2]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d101      	bne.n	800472e <HAL_ADC_Start_DMA+0x2e>
 800472a:	2302      	movs	r3, #2
 800472c:	e05e      	b.n	80047ec <HAL_ADC_Start_DMA+0xec>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2250      	movs	r2, #80	; 0x50
 8004732:	2101      	movs	r1, #1
 8004734:	5499      	strb	r1, [r3, r2]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68da      	ldr	r2, [r3, #12]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2101      	movs	r1, #1
 8004742:	430a      	orrs	r2, r1
 8004744:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d007      	beq.n	800475e <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800474e:	2317      	movs	r3, #23
 8004750:	18fc      	adds	r4, r7, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	0018      	movs	r0, r3
 8004756:	f000 f90d 	bl	8004974 <ADC_Enable>
 800475a:	0003      	movs	r3, r0
 800475c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800475e:	2317      	movs	r3, #23
 8004760:	18fb      	adds	r3, r7, r3
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d13e      	bne.n	80047e6 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800476c:	4a21      	ldr	r2, [pc, #132]	; (80047f4 <HAL_ADC_Start_DMA+0xf4>)
 800476e:	4013      	ands	r3, r2
 8004770:	2280      	movs	r2, #128	; 0x80
 8004772:	0052      	lsls	r2, r2, #1
 8004774:	431a      	orrs	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2250      	movs	r2, #80	; 0x50
 8004784:	2100      	movs	r1, #0
 8004786:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800478c:	4a1a      	ldr	r2, [pc, #104]	; (80047f8 <HAL_ADC_Start_DMA+0xf8>)
 800478e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004794:	4a19      	ldr	r2, [pc, #100]	; (80047fc <HAL_ADC_Start_DMA+0xfc>)
 8004796:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800479c:	4a18      	ldr	r2, [pc, #96]	; (8004800 <HAL_ADC_Start_DMA+0x100>)
 800479e:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	221c      	movs	r2, #28
 80047a6:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2110      	movs	r1, #16
 80047b4:	430a      	orrs	r2, r1
 80047b6:	605a      	str	r2, [r3, #4]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	3340      	adds	r3, #64	; 0x40
 80047c2:	0019      	movs	r1, r3
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f000 fb2e 	bl	8004e28 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2104      	movs	r1, #4
 80047d8:	430a      	orrs	r2, r1
 80047da:	609a      	str	r2, [r3, #8]
 80047dc:	e003      	b.n	80047e6 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80047de:	2317      	movs	r3, #23
 80047e0:	18fb      	adds	r3, r7, r3
 80047e2:	2202      	movs	r2, #2
 80047e4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80047e6:	2317      	movs	r3, #23
 80047e8:	18fb      	adds	r3, r7, r3
 80047ea:	781b      	ldrb	r3, [r3, #0]
}
 80047ec:	0018      	movs	r0, r3
 80047ee:	46bd      	mov	sp, r7
 80047f0:	b007      	add	sp, #28
 80047f2:	bd90      	pop	{r4, r7, pc}
 80047f4:	fffff0fe 	.word	0xfffff0fe
 80047f8:	08004a35 	.word	0x08004a35
 80047fc:	08004ae9 	.word	0x08004ae9
 8004800:	08004b07 	.word	0x08004b07

08004804 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800480c:	46c0      	nop			; (mov r8, r8)
 800480e:	46bd      	mov	sp, r7
 8004810:	b002      	add	sp, #8
 8004812:	bd80      	pop	{r7, pc}

08004814 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800481c:	46c0      	nop			; (mov r8, r8)
 800481e:	46bd      	mov	sp, r7
 8004820:	b002      	add	sp, #8
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800482c:	46c0      	nop			; (mov r8, r8)
 800482e:	46bd      	mov	sp, r7
 8004830:	b002      	add	sp, #8
 8004832:	bd80      	pop	{r7, pc}

08004834 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2250      	movs	r2, #80	; 0x50
 8004842:	5c9b      	ldrb	r3, [r3, r2]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d101      	bne.n	800484c <HAL_ADC_ConfigChannel+0x18>
 8004848:	2302      	movs	r3, #2
 800484a:	e085      	b.n	8004958 <HAL_ADC_ConfigChannel+0x124>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2250      	movs	r2, #80	; 0x50
 8004850:	2101      	movs	r1, #1
 8004852:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	2204      	movs	r2, #4
 800485c:	4013      	ands	r3, r2
 800485e:	d00b      	beq.n	8004878 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004864:	2220      	movs	r2, #32
 8004866:	431a      	orrs	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2250      	movs	r2, #80	; 0x50
 8004870:	2100      	movs	r1, #0
 8004872:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e06f      	b.n	8004958 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	4a38      	ldr	r2, [pc, #224]	; (8004960 <HAL_ADC_ConfigChannel+0x12c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d035      	beq.n	80048ee <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	035b      	lsls	r3, r3, #13
 800488e:	0b5a      	lsrs	r2, r3, #13
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	2380      	movs	r3, #128	; 0x80
 800489e:	02db      	lsls	r3, r3, #11
 80048a0:	4013      	ands	r3, r2
 80048a2:	d009      	beq.n	80048b8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80048a4:	4b2f      	ldr	r3, [pc, #188]	; (8004964 <HAL_ADC_ConfigChannel+0x130>)
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	4b2e      	ldr	r3, [pc, #184]	; (8004964 <HAL_ADC_ConfigChannel+0x130>)
 80048aa:	2180      	movs	r1, #128	; 0x80
 80048ac:	0409      	lsls	r1, r1, #16
 80048ae:	430a      	orrs	r2, r1
 80048b0:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80048b2:	200a      	movs	r0, #10
 80048b4:	f000 f942 	bl	8004b3c <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	2380      	movs	r3, #128	; 0x80
 80048be:	029b      	lsls	r3, r3, #10
 80048c0:	4013      	ands	r3, r2
 80048c2:	d006      	beq.n	80048d2 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80048c4:	4b27      	ldr	r3, [pc, #156]	; (8004964 <HAL_ADC_ConfigChannel+0x130>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	4b26      	ldr	r3, [pc, #152]	; (8004964 <HAL_ADC_ConfigChannel+0x130>)
 80048ca:	2180      	movs	r1, #128	; 0x80
 80048cc:	03c9      	lsls	r1, r1, #15
 80048ce:	430a      	orrs	r2, r1
 80048d0:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	2380      	movs	r3, #128	; 0x80
 80048d8:	025b      	lsls	r3, r3, #9
 80048da:	4013      	ands	r3, r2
 80048dc:	d037      	beq.n	800494e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 80048de:	4b21      	ldr	r3, [pc, #132]	; (8004964 <HAL_ADC_ConfigChannel+0x130>)
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	4b20      	ldr	r3, [pc, #128]	; (8004964 <HAL_ADC_ConfigChannel+0x130>)
 80048e4:	2180      	movs	r1, #128	; 0x80
 80048e6:	0449      	lsls	r1, r1, #17
 80048e8:	430a      	orrs	r2, r1
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	e02f      	b.n	800494e <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	035b      	lsls	r3, r3, #13
 80048fa:	0b5b      	lsrs	r3, r3, #13
 80048fc:	43d9      	mvns	r1, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	400a      	ands	r2, r1
 8004904:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	2380      	movs	r3, #128	; 0x80
 800490c:	02db      	lsls	r3, r3, #11
 800490e:	4013      	ands	r3, r2
 8004910:	d005      	beq.n	800491e <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8004912:	4b14      	ldr	r3, [pc, #80]	; (8004964 <HAL_ADC_ConfigChannel+0x130>)
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	4b13      	ldr	r3, [pc, #76]	; (8004964 <HAL_ADC_ConfigChannel+0x130>)
 8004918:	4913      	ldr	r1, [pc, #76]	; (8004968 <HAL_ADC_ConfigChannel+0x134>)
 800491a:	400a      	ands	r2, r1
 800491c:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	2380      	movs	r3, #128	; 0x80
 8004924:	029b      	lsls	r3, r3, #10
 8004926:	4013      	ands	r3, r2
 8004928:	d005      	beq.n	8004936 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800492a:	4b0e      	ldr	r3, [pc, #56]	; (8004964 <HAL_ADC_ConfigChannel+0x130>)
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	4b0d      	ldr	r3, [pc, #52]	; (8004964 <HAL_ADC_ConfigChannel+0x130>)
 8004930:	490e      	ldr	r1, [pc, #56]	; (800496c <HAL_ADC_ConfigChannel+0x138>)
 8004932:	400a      	ands	r2, r1
 8004934:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	2380      	movs	r3, #128	; 0x80
 800493c:	025b      	lsls	r3, r3, #9
 800493e:	4013      	ands	r3, r2
 8004940:	d005      	beq.n	800494e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8004942:	4b08      	ldr	r3, [pc, #32]	; (8004964 <HAL_ADC_ConfigChannel+0x130>)
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	4b07      	ldr	r3, [pc, #28]	; (8004964 <HAL_ADC_ConfigChannel+0x130>)
 8004948:	4909      	ldr	r1, [pc, #36]	; (8004970 <HAL_ADC_ConfigChannel+0x13c>)
 800494a:	400a      	ands	r2, r1
 800494c:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2250      	movs	r2, #80	; 0x50
 8004952:	2100      	movs	r1, #0
 8004954:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	0018      	movs	r0, r3
 800495a:	46bd      	mov	sp, r7
 800495c:	b002      	add	sp, #8
 800495e:	bd80      	pop	{r7, pc}
 8004960:	00001001 	.word	0x00001001
 8004964:	40012708 	.word	0x40012708
 8004968:	ff7fffff 	.word	0xff7fffff
 800496c:	ffbfffff 	.word	0xffbfffff
 8004970:	feffffff 	.word	0xfeffffff

08004974 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800497c:	2300      	movs	r3, #0
 800497e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	2203      	movs	r2, #3
 8004988:	4013      	ands	r3, r2
 800498a:	2b01      	cmp	r3, #1
 800498c:	d108      	bne.n	80049a0 <ADC_Enable+0x2c>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2201      	movs	r2, #1
 8004996:	4013      	ands	r3, r2
 8004998:	2b01      	cmp	r3, #1
 800499a:	d101      	bne.n	80049a0 <ADC_Enable+0x2c>
 800499c:	2301      	movs	r3, #1
 800499e:	e000      	b.n	80049a2 <ADC_Enable+0x2e>
 80049a0:	2300      	movs	r3, #0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d13f      	bne.n	8004a26 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	4a20      	ldr	r2, [pc, #128]	; (8004a30 <ADC_Enable+0xbc>)
 80049ae:	4013      	ands	r3, r2
 80049b0:	d00d      	beq.n	80049ce <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b6:	2210      	movs	r2, #16
 80049b8:	431a      	orrs	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c2:	2201      	movs	r2, #1
 80049c4:	431a      	orrs	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e02c      	b.n	8004a28 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2101      	movs	r1, #1
 80049da:	430a      	orrs	r2, r1
 80049dc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80049de:	2001      	movs	r0, #1
 80049e0:	f000 f8ac 	bl	8004b3c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80049e4:	f7ff fcea 	bl	80043bc <HAL_GetTick>
 80049e8:	0003      	movs	r3, r0
 80049ea:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80049ec:	e014      	b.n	8004a18 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80049ee:	f7ff fce5 	bl	80043bc <HAL_GetTick>
 80049f2:	0002      	movs	r2, r0
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	2b0a      	cmp	r3, #10
 80049fa:	d90d      	bls.n	8004a18 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a00:	2210      	movs	r2, #16
 8004a02:	431a      	orrs	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e007      	b.n	8004a28 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	4013      	ands	r3, r2
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d1e3      	bne.n	80049ee <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	0018      	movs	r0, r3
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	b004      	add	sp, #16
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	80000017 	.word	0x80000017

08004a34 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a40:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a46:	2250      	movs	r2, #80	; 0x50
 8004a48:	4013      	ands	r3, r2
 8004a4a:	d141      	bne.n	8004ad0 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a50:	2280      	movs	r2, #128	; 0x80
 8004a52:	0092      	lsls	r2, r2, #2
 8004a54:	431a      	orrs	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68da      	ldr	r2, [r3, #12]
 8004a60:	23c0      	movs	r3, #192	; 0xc0
 8004a62:	011b      	lsls	r3, r3, #4
 8004a64:	4013      	ands	r3, r2
 8004a66:	d12e      	bne.n	8004ac6 <ADC_DMAConvCplt+0x92>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d129      	bne.n	8004ac6 <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2208      	movs	r2, #8
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d122      	bne.n	8004ac6 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	2204      	movs	r2, #4
 8004a88:	4013      	ands	r3, r2
 8004a8a:	d110      	bne.n	8004aae <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	210c      	movs	r1, #12
 8004a98:	438a      	bics	r2, r1
 8004a9a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa0:	4a10      	ldr	r2, [pc, #64]	; (8004ae4 <ADC_DMAConvCplt+0xb0>)
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	655a      	str	r2, [r3, #84]	; 0x54
 8004aac:	e00b      	b.n	8004ac6 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004abe:	2201      	movs	r2, #1
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	0018      	movs	r0, r3
 8004aca:	f7ff fe9b 	bl	8004804 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004ace:	e005      	b.n	8004adc <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	0010      	movs	r0, r2
 8004ada:	4798      	blx	r3
}
 8004adc:	46c0      	nop			; (mov r8, r8)
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	b004      	add	sp, #16
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	fffffefe 	.word	0xfffffefe

08004ae8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	0018      	movs	r0, r3
 8004afa:	f7ff fe8b 	bl	8004814 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004afe:	46c0      	nop			; (mov r8, r8)
 8004b00:	46bd      	mov	sp, r7
 8004b02:	b004      	add	sp, #16
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b084      	sub	sp, #16
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b12:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b18:	2240      	movs	r2, #64	; 0x40
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b24:	2204      	movs	r2, #4
 8004b26:	431a      	orrs	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	0018      	movs	r0, r3
 8004b30:	f7ff fe78 	bl	8004824 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b34:	46c0      	nop			; (mov r8, r8)
 8004b36:	46bd      	mov	sp, r7
 8004b38:	b004      	add	sp, #16
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8004b44:	4b0b      	ldr	r3, [pc, #44]	; (8004b74 <ADC_DelayMicroSecond+0x38>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	490b      	ldr	r1, [pc, #44]	; (8004b78 <ADC_DelayMicroSecond+0x3c>)
 8004b4a:	0018      	movs	r0, r3
 8004b4c:	f7fb faf8 	bl	8000140 <__udivsi3>
 8004b50:	0003      	movs	r3, r0
 8004b52:	001a      	movs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4353      	muls	r3, r2
 8004b58:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8004b5a:	e002      	b.n	8004b62 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1f9      	bne.n	8004b5c <ADC_DelayMicroSecond+0x20>
  } 
}
 8004b68:	46c0      	nop			; (mov r8, r8)
 8004b6a:	46c0      	nop			; (mov r8, r8)
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	b004      	add	sp, #16
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	46c0      	nop			; (mov r8, r8)
 8004b74:	20000038 	.word	0x20000038
 8004b78:	000f4240 	.word	0x000f4240

08004b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	0002      	movs	r2, r0
 8004b84:	1dfb      	adds	r3, r7, #7
 8004b86:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004b88:	1dfb      	adds	r3, r7, #7
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	2b7f      	cmp	r3, #127	; 0x7f
 8004b8e:	d809      	bhi.n	8004ba4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b90:	1dfb      	adds	r3, r7, #7
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	001a      	movs	r2, r3
 8004b96:	231f      	movs	r3, #31
 8004b98:	401a      	ands	r2, r3
 8004b9a:	4b04      	ldr	r3, [pc, #16]	; (8004bac <__NVIC_EnableIRQ+0x30>)
 8004b9c:	2101      	movs	r1, #1
 8004b9e:	4091      	lsls	r1, r2
 8004ba0:	000a      	movs	r2, r1
 8004ba2:	601a      	str	r2, [r3, #0]
  }
}
 8004ba4:	46c0      	nop			; (mov r8, r8)
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	b002      	add	sp, #8
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	e000e100 	.word	0xe000e100

08004bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bb0:	b590      	push	{r4, r7, lr}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	0002      	movs	r2, r0
 8004bb8:	6039      	str	r1, [r7, #0]
 8004bba:	1dfb      	adds	r3, r7, #7
 8004bbc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004bbe:	1dfb      	adds	r3, r7, #7
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	2b7f      	cmp	r3, #127	; 0x7f
 8004bc4:	d828      	bhi.n	8004c18 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004bc6:	4a2f      	ldr	r2, [pc, #188]	; (8004c84 <__NVIC_SetPriority+0xd4>)
 8004bc8:	1dfb      	adds	r3, r7, #7
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	b25b      	sxtb	r3, r3
 8004bce:	089b      	lsrs	r3, r3, #2
 8004bd0:	33c0      	adds	r3, #192	; 0xc0
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	589b      	ldr	r3, [r3, r2]
 8004bd6:	1dfa      	adds	r2, r7, #7
 8004bd8:	7812      	ldrb	r2, [r2, #0]
 8004bda:	0011      	movs	r1, r2
 8004bdc:	2203      	movs	r2, #3
 8004bde:	400a      	ands	r2, r1
 8004be0:	00d2      	lsls	r2, r2, #3
 8004be2:	21ff      	movs	r1, #255	; 0xff
 8004be4:	4091      	lsls	r1, r2
 8004be6:	000a      	movs	r2, r1
 8004be8:	43d2      	mvns	r2, r2
 8004bea:	401a      	ands	r2, r3
 8004bec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	019b      	lsls	r3, r3, #6
 8004bf2:	22ff      	movs	r2, #255	; 0xff
 8004bf4:	401a      	ands	r2, r3
 8004bf6:	1dfb      	adds	r3, r7, #7
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	0018      	movs	r0, r3
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	4003      	ands	r3, r0
 8004c00:	00db      	lsls	r3, r3, #3
 8004c02:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c04:	481f      	ldr	r0, [pc, #124]	; (8004c84 <__NVIC_SetPriority+0xd4>)
 8004c06:	1dfb      	adds	r3, r7, #7
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	b25b      	sxtb	r3, r3
 8004c0c:	089b      	lsrs	r3, r3, #2
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	33c0      	adds	r3, #192	; 0xc0
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004c16:	e031      	b.n	8004c7c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c18:	4a1b      	ldr	r2, [pc, #108]	; (8004c88 <__NVIC_SetPriority+0xd8>)
 8004c1a:	1dfb      	adds	r3, r7, #7
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	0019      	movs	r1, r3
 8004c20:	230f      	movs	r3, #15
 8004c22:	400b      	ands	r3, r1
 8004c24:	3b08      	subs	r3, #8
 8004c26:	089b      	lsrs	r3, r3, #2
 8004c28:	3306      	adds	r3, #6
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	18d3      	adds	r3, r2, r3
 8004c2e:	3304      	adds	r3, #4
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	1dfa      	adds	r2, r7, #7
 8004c34:	7812      	ldrb	r2, [r2, #0]
 8004c36:	0011      	movs	r1, r2
 8004c38:	2203      	movs	r2, #3
 8004c3a:	400a      	ands	r2, r1
 8004c3c:	00d2      	lsls	r2, r2, #3
 8004c3e:	21ff      	movs	r1, #255	; 0xff
 8004c40:	4091      	lsls	r1, r2
 8004c42:	000a      	movs	r2, r1
 8004c44:	43d2      	mvns	r2, r2
 8004c46:	401a      	ands	r2, r3
 8004c48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	019b      	lsls	r3, r3, #6
 8004c4e:	22ff      	movs	r2, #255	; 0xff
 8004c50:	401a      	ands	r2, r3
 8004c52:	1dfb      	adds	r3, r7, #7
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	0018      	movs	r0, r3
 8004c58:	2303      	movs	r3, #3
 8004c5a:	4003      	ands	r3, r0
 8004c5c:	00db      	lsls	r3, r3, #3
 8004c5e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c60:	4809      	ldr	r0, [pc, #36]	; (8004c88 <__NVIC_SetPriority+0xd8>)
 8004c62:	1dfb      	adds	r3, r7, #7
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	001c      	movs	r4, r3
 8004c68:	230f      	movs	r3, #15
 8004c6a:	4023      	ands	r3, r4
 8004c6c:	3b08      	subs	r3, #8
 8004c6e:	089b      	lsrs	r3, r3, #2
 8004c70:	430a      	orrs	r2, r1
 8004c72:	3306      	adds	r3, #6
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	18c3      	adds	r3, r0, r3
 8004c78:	3304      	adds	r3, #4
 8004c7a:	601a      	str	r2, [r3, #0]
}
 8004c7c:	46c0      	nop			; (mov r8, r8)
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	b003      	add	sp, #12
 8004c82:	bd90      	pop	{r4, r7, pc}
 8004c84:	e000e100 	.word	0xe000e100
 8004c88:	e000ed00 	.word	0xe000ed00

08004c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	1e5a      	subs	r2, r3, #1
 8004c98:	2380      	movs	r3, #128	; 0x80
 8004c9a:	045b      	lsls	r3, r3, #17
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d301      	bcc.n	8004ca4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e010      	b.n	8004cc6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ca4:	4b0a      	ldr	r3, [pc, #40]	; (8004cd0 <SysTick_Config+0x44>)
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	3a01      	subs	r2, #1
 8004caa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cac:	2301      	movs	r3, #1
 8004cae:	425b      	negs	r3, r3
 8004cb0:	2103      	movs	r1, #3
 8004cb2:	0018      	movs	r0, r3
 8004cb4:	f7ff ff7c 	bl	8004bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cb8:	4b05      	ldr	r3, [pc, #20]	; (8004cd0 <SysTick_Config+0x44>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cbe:	4b04      	ldr	r3, [pc, #16]	; (8004cd0 <SysTick_Config+0x44>)
 8004cc0:	2207      	movs	r2, #7
 8004cc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	0018      	movs	r0, r3
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	b002      	add	sp, #8
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	46c0      	nop			; (mov r8, r8)
 8004cd0:	e000e010 	.word	0xe000e010

08004cd4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60b9      	str	r1, [r7, #8]
 8004cdc:	607a      	str	r2, [r7, #4]
 8004cde:	210f      	movs	r1, #15
 8004ce0:	187b      	adds	r3, r7, r1
 8004ce2:	1c02      	adds	r2, r0, #0
 8004ce4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	187b      	adds	r3, r7, r1
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	b25b      	sxtb	r3, r3
 8004cee:	0011      	movs	r1, r2
 8004cf0:	0018      	movs	r0, r3
 8004cf2:	f7ff ff5d 	bl	8004bb0 <__NVIC_SetPriority>
}
 8004cf6:	46c0      	nop			; (mov r8, r8)
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	b004      	add	sp, #16
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b082      	sub	sp, #8
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	0002      	movs	r2, r0
 8004d06:	1dfb      	adds	r3, r7, #7
 8004d08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d0a:	1dfb      	adds	r3, r7, #7
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	b25b      	sxtb	r3, r3
 8004d10:	0018      	movs	r0, r3
 8004d12:	f7ff ff33 	bl	8004b7c <__NVIC_EnableIRQ>
}
 8004d16:	46c0      	nop			; (mov r8, r8)
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	b002      	add	sp, #8
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b082      	sub	sp, #8
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	0018      	movs	r0, r3
 8004d2a:	f7ff ffaf 	bl	8004c8c <SysTick_Config>
 8004d2e:	0003      	movs	r3, r0
}
 8004d30:	0018      	movs	r0, r3
 8004d32:	46bd      	mov	sp, r7
 8004d34:	b002      	add	sp, #8
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e061      	b.n	8004e0e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a32      	ldr	r2, [pc, #200]	; (8004e18 <HAL_DMA_Init+0xe0>)
 8004d50:	4694      	mov	ip, r2
 8004d52:	4463      	add	r3, ip
 8004d54:	2114      	movs	r1, #20
 8004d56:	0018      	movs	r0, r3
 8004d58:	f7fb f9f2 	bl	8000140 <__udivsi3>
 8004d5c:	0003      	movs	r3, r0
 8004d5e:	009a      	lsls	r2, r3, #2
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a2d      	ldr	r2, [pc, #180]	; (8004e1c <HAL_DMA_Init+0xe4>)
 8004d68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2225      	movs	r2, #37	; 0x25
 8004d6e:	2102      	movs	r1, #2
 8004d70:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	4a28      	ldr	r2, [pc, #160]	; (8004e20 <HAL_DMA_Init+0xe8>)
 8004d7e:	4013      	ands	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004d8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004da2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	2380      	movs	r3, #128	; 0x80
 8004dbe:	01db      	lsls	r3, r3, #7
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d018      	beq.n	8004df6 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004dc4:	4b17      	ldr	r3, [pc, #92]	; (8004e24 <HAL_DMA_Init+0xec>)
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dcc:	211c      	movs	r1, #28
 8004dce:	400b      	ands	r3, r1
 8004dd0:	210f      	movs	r1, #15
 8004dd2:	4099      	lsls	r1, r3
 8004dd4:	000b      	movs	r3, r1
 8004dd6:	43d9      	mvns	r1, r3
 8004dd8:	4b12      	ldr	r3, [pc, #72]	; (8004e24 <HAL_DMA_Init+0xec>)
 8004dda:	400a      	ands	r2, r1
 8004ddc:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004dde:	4b11      	ldr	r3, [pc, #68]	; (8004e24 <HAL_DMA_Init+0xec>)
 8004de0:	6819      	ldr	r1, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dea:	201c      	movs	r0, #28
 8004dec:	4003      	ands	r3, r0
 8004dee:	409a      	lsls	r2, r3
 8004df0:	4b0c      	ldr	r3, [pc, #48]	; (8004e24 <HAL_DMA_Init+0xec>)
 8004df2:	430a      	orrs	r2, r1
 8004df4:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2225      	movs	r2, #37	; 0x25
 8004e00:	2101      	movs	r1, #1
 8004e02:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2224      	movs	r2, #36	; 0x24
 8004e08:	2100      	movs	r1, #0
 8004e0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	0018      	movs	r0, r3
 8004e10:	46bd      	mov	sp, r7
 8004e12:	b004      	add	sp, #16
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	46c0      	nop			; (mov r8, r8)
 8004e18:	bffdfff8 	.word	0xbffdfff8
 8004e1c:	40020000 	.word	0x40020000
 8004e20:	ffff800f 	.word	0xffff800f
 8004e24:	400200a8 	.word	0x400200a8

08004e28 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
 8004e34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e36:	2317      	movs	r3, #23
 8004e38:	18fb      	adds	r3, r7, r3
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2224      	movs	r2, #36	; 0x24
 8004e42:	5c9b      	ldrb	r3, [r3, r2]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d101      	bne.n	8004e4c <HAL_DMA_Start_IT+0x24>
 8004e48:	2302      	movs	r3, #2
 8004e4a:	e04f      	b.n	8004eec <HAL_DMA_Start_IT+0xc4>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2224      	movs	r2, #36	; 0x24
 8004e50:	2101      	movs	r1, #1
 8004e52:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2225      	movs	r2, #37	; 0x25
 8004e58:	5c9b      	ldrb	r3, [r3, r2]
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d13a      	bne.n	8004ed6 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2225      	movs	r2, #37	; 0x25
 8004e64:	2102      	movs	r1, #2
 8004e66:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2101      	movs	r1, #1
 8004e7a:	438a      	bics	r2, r1
 8004e7c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	68b9      	ldr	r1, [r7, #8]
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 f835 	bl	8004ef4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d008      	beq.n	8004ea4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	210e      	movs	r1, #14
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	e00f      	b.n	8004ec4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2104      	movs	r1, #4
 8004eb0:	438a      	bics	r2, r1
 8004eb2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	210a      	movs	r1, #10
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2101      	movs	r1, #1
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	e007      	b.n	8004ee6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2224      	movs	r2, #36	; 0x24
 8004eda:	2100      	movs	r1, #0
 8004edc:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004ede:	2317      	movs	r3, #23
 8004ee0:	18fb      	adds	r3, r7, r3
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8004ee6:	2317      	movs	r3, #23
 8004ee8:	18fb      	adds	r3, r7, r3
 8004eea:	781b      	ldrb	r3, [r3, #0]
}
 8004eec:	0018      	movs	r0, r3
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	b006      	add	sp, #24
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f06:	221c      	movs	r2, #28
 8004f08:	401a      	ands	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	2101      	movs	r1, #1
 8004f10:	4091      	lsls	r1, r2
 8004f12:	000a      	movs	r2, r1
 8004f14:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	2b10      	cmp	r3, #16
 8004f24:	d108      	bne.n	8004f38 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004f36:	e007      	b.n	8004f48 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	60da      	str	r2, [r3, #12]
}
 8004f48:	46c0      	nop			; (mov r8, r8)
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	b004      	add	sp, #16
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004f66:	e155      	b.n	8005214 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	4091      	lsls	r1, r2
 8004f72:	000a      	movs	r2, r1
 8004f74:	4013      	ands	r3, r2
 8004f76:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d100      	bne.n	8004f80 <HAL_GPIO_Init+0x30>
 8004f7e:	e146      	b.n	800520e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d00b      	beq.n	8004fa0 <HAL_GPIO_Init+0x50>
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d007      	beq.n	8004fa0 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f94:	2b11      	cmp	r3, #17
 8004f96:	d003      	beq.n	8004fa0 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	2b12      	cmp	r3, #18
 8004f9e:	d130      	bne.n	8005002 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	2203      	movs	r2, #3
 8004fac:	409a      	lsls	r2, r3
 8004fae:	0013      	movs	r3, r2
 8004fb0:	43da      	mvns	r2, r3
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	68da      	ldr	r2, [r3, #12]
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	005b      	lsls	r3, r3, #1
 8004fc0:	409a      	lsls	r2, r3
 8004fc2:	0013      	movs	r3, r2
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	409a      	lsls	r2, r3
 8004fdc:	0013      	movs	r3, r2
 8004fde:	43da      	mvns	r2, r3
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	091b      	lsrs	r3, r3, #4
 8004fec:	2201      	movs	r2, #1
 8004fee:	401a      	ands	r2, r3
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	409a      	lsls	r2, r3
 8004ff4:	0013      	movs	r3, r2
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	005b      	lsls	r3, r3, #1
 800500c:	2203      	movs	r2, #3
 800500e:	409a      	lsls	r2, r3
 8005010:	0013      	movs	r3, r2
 8005012:	43da      	mvns	r2, r3
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	4013      	ands	r3, r2
 8005018:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	689a      	ldr	r2, [r3, #8]
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	409a      	lsls	r2, r3
 8005024:	0013      	movs	r3, r2
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	4313      	orrs	r3, r2
 800502a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	2b02      	cmp	r3, #2
 8005038:	d003      	beq.n	8005042 <HAL_GPIO_Init+0xf2>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2b12      	cmp	r3, #18
 8005040:	d123      	bne.n	800508a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	08da      	lsrs	r2, r3, #3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	3208      	adds	r2, #8
 800504a:	0092      	lsls	r2, r2, #2
 800504c:	58d3      	ldr	r3, [r2, r3]
 800504e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	2207      	movs	r2, #7
 8005054:	4013      	ands	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	220f      	movs	r2, #15
 800505a:	409a      	lsls	r2, r3
 800505c:	0013      	movs	r3, r2
 800505e:	43da      	mvns	r2, r3
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	4013      	ands	r3, r2
 8005064:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	691a      	ldr	r2, [r3, #16]
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2107      	movs	r1, #7
 800506e:	400b      	ands	r3, r1
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	409a      	lsls	r2, r3
 8005074:	0013      	movs	r3, r2
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	4313      	orrs	r3, r2
 800507a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	08da      	lsrs	r2, r3, #3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	3208      	adds	r2, #8
 8005084:	0092      	lsls	r2, r2, #2
 8005086:	6939      	ldr	r1, [r7, #16]
 8005088:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	005b      	lsls	r3, r3, #1
 8005094:	2203      	movs	r2, #3
 8005096:	409a      	lsls	r2, r3
 8005098:	0013      	movs	r3, r2
 800509a:	43da      	mvns	r2, r3
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	4013      	ands	r3, r2
 80050a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2203      	movs	r2, #3
 80050a8:	401a      	ands	r2, r3
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	005b      	lsls	r3, r3, #1
 80050ae:	409a      	lsls	r2, r3
 80050b0:	0013      	movs	r3, r2
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	2380      	movs	r3, #128	; 0x80
 80050c4:	055b      	lsls	r3, r3, #21
 80050c6:	4013      	ands	r3, r2
 80050c8:	d100      	bne.n	80050cc <HAL_GPIO_Init+0x17c>
 80050ca:	e0a0      	b.n	800520e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050cc:	4b57      	ldr	r3, [pc, #348]	; (800522c <HAL_GPIO_Init+0x2dc>)
 80050ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050d0:	4b56      	ldr	r3, [pc, #344]	; (800522c <HAL_GPIO_Init+0x2dc>)
 80050d2:	2101      	movs	r1, #1
 80050d4:	430a      	orrs	r2, r1
 80050d6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80050d8:	4a55      	ldr	r2, [pc, #340]	; (8005230 <HAL_GPIO_Init+0x2e0>)
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	089b      	lsrs	r3, r3, #2
 80050de:	3302      	adds	r3, #2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	589b      	ldr	r3, [r3, r2]
 80050e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2203      	movs	r2, #3
 80050ea:	4013      	ands	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	220f      	movs	r2, #15
 80050f0:	409a      	lsls	r2, r3
 80050f2:	0013      	movs	r3, r2
 80050f4:	43da      	mvns	r2, r3
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	4013      	ands	r3, r2
 80050fa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	23a0      	movs	r3, #160	; 0xa0
 8005100:	05db      	lsls	r3, r3, #23
 8005102:	429a      	cmp	r2, r3
 8005104:	d01f      	beq.n	8005146 <HAL_GPIO_Init+0x1f6>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a4a      	ldr	r2, [pc, #296]	; (8005234 <HAL_GPIO_Init+0x2e4>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d019      	beq.n	8005142 <HAL_GPIO_Init+0x1f2>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a49      	ldr	r2, [pc, #292]	; (8005238 <HAL_GPIO_Init+0x2e8>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d013      	beq.n	800513e <HAL_GPIO_Init+0x1ee>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a48      	ldr	r2, [pc, #288]	; (800523c <HAL_GPIO_Init+0x2ec>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d00d      	beq.n	800513a <HAL_GPIO_Init+0x1ea>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a47      	ldr	r2, [pc, #284]	; (8005240 <HAL_GPIO_Init+0x2f0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d007      	beq.n	8005136 <HAL_GPIO_Init+0x1e6>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a46      	ldr	r2, [pc, #280]	; (8005244 <HAL_GPIO_Init+0x2f4>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d101      	bne.n	8005132 <HAL_GPIO_Init+0x1e2>
 800512e:	2305      	movs	r3, #5
 8005130:	e00a      	b.n	8005148 <HAL_GPIO_Init+0x1f8>
 8005132:	2306      	movs	r3, #6
 8005134:	e008      	b.n	8005148 <HAL_GPIO_Init+0x1f8>
 8005136:	2304      	movs	r3, #4
 8005138:	e006      	b.n	8005148 <HAL_GPIO_Init+0x1f8>
 800513a:	2303      	movs	r3, #3
 800513c:	e004      	b.n	8005148 <HAL_GPIO_Init+0x1f8>
 800513e:	2302      	movs	r3, #2
 8005140:	e002      	b.n	8005148 <HAL_GPIO_Init+0x1f8>
 8005142:	2301      	movs	r3, #1
 8005144:	e000      	b.n	8005148 <HAL_GPIO_Init+0x1f8>
 8005146:	2300      	movs	r3, #0
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	2103      	movs	r1, #3
 800514c:	400a      	ands	r2, r1
 800514e:	0092      	lsls	r2, r2, #2
 8005150:	4093      	lsls	r3, r2
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	4313      	orrs	r3, r2
 8005156:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005158:	4935      	ldr	r1, [pc, #212]	; (8005230 <HAL_GPIO_Init+0x2e0>)
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	089b      	lsrs	r3, r3, #2
 800515e:	3302      	adds	r3, #2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005166:	4b38      	ldr	r3, [pc, #224]	; (8005248 <HAL_GPIO_Init+0x2f8>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	43da      	mvns	r2, r3
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	4013      	ands	r3, r2
 8005174:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	2380      	movs	r3, #128	; 0x80
 800517c:	025b      	lsls	r3, r3, #9
 800517e:	4013      	ands	r3, r2
 8005180:	d003      	beq.n	800518a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4313      	orrs	r3, r2
 8005188:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800518a:	4b2f      	ldr	r3, [pc, #188]	; (8005248 <HAL_GPIO_Init+0x2f8>)
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8005190:	4b2d      	ldr	r3, [pc, #180]	; (8005248 <HAL_GPIO_Init+0x2f8>)
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	43da      	mvns	r2, r3
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	4013      	ands	r3, r2
 800519e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	2380      	movs	r3, #128	; 0x80
 80051a6:	029b      	lsls	r3, r3, #10
 80051a8:	4013      	ands	r3, r2
 80051aa:	d003      	beq.n	80051b4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80051b4:	4b24      	ldr	r3, [pc, #144]	; (8005248 <HAL_GPIO_Init+0x2f8>)
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80051ba:	4b23      	ldr	r3, [pc, #140]	; (8005248 <HAL_GPIO_Init+0x2f8>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	43da      	mvns	r2, r3
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	4013      	ands	r3, r2
 80051c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	2380      	movs	r3, #128	; 0x80
 80051d0:	035b      	lsls	r3, r3, #13
 80051d2:	4013      	ands	r3, r2
 80051d4:	d003      	beq.n	80051de <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4313      	orrs	r3, r2
 80051dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80051de:	4b1a      	ldr	r3, [pc, #104]	; (8005248 <HAL_GPIO_Init+0x2f8>)
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80051e4:	4b18      	ldr	r3, [pc, #96]	; (8005248 <HAL_GPIO_Init+0x2f8>)
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	43da      	mvns	r2, r3
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	4013      	ands	r3, r2
 80051f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	2380      	movs	r3, #128	; 0x80
 80051fa:	039b      	lsls	r3, r3, #14
 80051fc:	4013      	ands	r3, r2
 80051fe:	d003      	beq.n	8005208 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	4313      	orrs	r3, r2
 8005206:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005208:	4b0f      	ldr	r3, [pc, #60]	; (8005248 <HAL_GPIO_Init+0x2f8>)
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	3301      	adds	r3, #1
 8005212:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	40da      	lsrs	r2, r3
 800521c:	1e13      	subs	r3, r2, #0
 800521e:	d000      	beq.n	8005222 <HAL_GPIO_Init+0x2d2>
 8005220:	e6a2      	b.n	8004f68 <HAL_GPIO_Init+0x18>
  }
}
 8005222:	46c0      	nop			; (mov r8, r8)
 8005224:	46c0      	nop			; (mov r8, r8)
 8005226:	46bd      	mov	sp, r7
 8005228:	b006      	add	sp, #24
 800522a:	bd80      	pop	{r7, pc}
 800522c:	40021000 	.word	0x40021000
 8005230:	40010000 	.word	0x40010000
 8005234:	50000400 	.word	0x50000400
 8005238:	50000800 	.word	0x50000800
 800523c:	50000c00 	.word	0x50000c00
 8005240:	50001000 	.word	0x50001000
 8005244:	50001c00 	.word	0x50001c00
 8005248:	40010400 	.word	0x40010400

0800524c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	000a      	movs	r2, r1
 8005256:	1cbb      	adds	r3, r7, #2
 8005258:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	1cba      	adds	r2, r7, #2
 8005260:	8812      	ldrh	r2, [r2, #0]
 8005262:	4013      	ands	r3, r2
 8005264:	d004      	beq.n	8005270 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005266:	230f      	movs	r3, #15
 8005268:	18fb      	adds	r3, r7, r3
 800526a:	2201      	movs	r2, #1
 800526c:	701a      	strb	r2, [r3, #0]
 800526e:	e003      	b.n	8005278 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005270:	230f      	movs	r3, #15
 8005272:	18fb      	adds	r3, r7, r3
 8005274:	2200      	movs	r2, #0
 8005276:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005278:	230f      	movs	r3, #15
 800527a:	18fb      	adds	r3, r7, r3
 800527c:	781b      	ldrb	r3, [r3, #0]
}
 800527e:	0018      	movs	r0, r3
 8005280:	46bd      	mov	sp, r7
 8005282:	b004      	add	sp, #16
 8005284:	bd80      	pop	{r7, pc}

08005286 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b082      	sub	sp, #8
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
 800528e:	0008      	movs	r0, r1
 8005290:	0011      	movs	r1, r2
 8005292:	1cbb      	adds	r3, r7, #2
 8005294:	1c02      	adds	r2, r0, #0
 8005296:	801a      	strh	r2, [r3, #0]
 8005298:	1c7b      	adds	r3, r7, #1
 800529a:	1c0a      	adds	r2, r1, #0
 800529c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800529e:	1c7b      	adds	r3, r7, #1
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d004      	beq.n	80052b0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052a6:	1cbb      	adds	r3, r7, #2
 80052a8:	881a      	ldrh	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80052ae:	e003      	b.n	80052b8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80052b0:	1cbb      	adds	r3, r7, #2
 80052b2:	881a      	ldrh	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80052b8:	46c0      	nop			; (mov r8, r8)
 80052ba:	46bd      	mov	sp, r7
 80052bc:	b002      	add	sp, #8
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	000a      	movs	r2, r1
 80052ca:	1cbb      	adds	r3, r7, #2
 80052cc:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80052d4:	1cbb      	adds	r3, r7, #2
 80052d6:	881b      	ldrh	r3, [r3, #0]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	4013      	ands	r3, r2
 80052dc:	041a      	lsls	r2, r3, #16
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	43db      	mvns	r3, r3
 80052e2:	1cb9      	adds	r1, r7, #2
 80052e4:	8809      	ldrh	r1, [r1, #0]
 80052e6:	400b      	ands	r3, r1
 80052e8:	431a      	orrs	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	619a      	str	r2, [r3, #24]
}
 80052ee:	46c0      	nop			; (mov r8, r8)
 80052f0:	46bd      	mov	sp, r7
 80052f2:	b004      	add	sp, #16
 80052f4:	bd80      	pop	{r7, pc}
	...

080052f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e082      	b.n	8005410 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2241      	movs	r2, #65	; 0x41
 800530e:	5c9b      	ldrb	r3, [r3, r2]
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d107      	bne.n	8005326 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2240      	movs	r2, #64	; 0x40
 800531a:	2100      	movs	r1, #0
 800531c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	0018      	movs	r0, r3
 8005322:	f7fe fc5b 	bl	8003bdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2241      	movs	r2, #65	; 0x41
 800532a:	2124      	movs	r1, #36	; 0x24
 800532c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2101      	movs	r1, #1
 800533a:	438a      	bics	r2, r1
 800533c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4934      	ldr	r1, [pc, #208]	; (8005418 <HAL_I2C_Init+0x120>)
 8005348:	400a      	ands	r2, r1
 800534a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689a      	ldr	r2, [r3, #8]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4931      	ldr	r1, [pc, #196]	; (800541c <HAL_I2C_Init+0x124>)
 8005358:	400a      	ands	r2, r1
 800535a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d108      	bne.n	8005376 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2180      	movs	r1, #128	; 0x80
 800536e:	0209      	lsls	r1, r1, #8
 8005370:	430a      	orrs	r2, r1
 8005372:	609a      	str	r2, [r3, #8]
 8005374:	e007      	b.n	8005386 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	689a      	ldr	r2, [r3, #8]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2184      	movs	r1, #132	; 0x84
 8005380:	0209      	lsls	r1, r1, #8
 8005382:	430a      	orrs	r2, r1
 8005384:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	2b02      	cmp	r3, #2
 800538c:	d104      	bne.n	8005398 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2280      	movs	r2, #128	; 0x80
 8005394:	0112      	lsls	r2, r2, #4
 8005396:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685a      	ldr	r2, [r3, #4]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	491f      	ldr	r1, [pc, #124]	; (8005420 <HAL_I2C_Init+0x128>)
 80053a4:	430a      	orrs	r2, r1
 80053a6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68da      	ldr	r2, [r3, #12]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	491a      	ldr	r1, [pc, #104]	; (800541c <HAL_I2C_Init+0x124>)
 80053b4:	400a      	ands	r2, r1
 80053b6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	691a      	ldr	r2, [r3, #16]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	431a      	orrs	r2, r3
 80053c2:	0011      	movs	r1, r2
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	021a      	lsls	r2, r3, #8
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69d9      	ldr	r1, [r3, #28]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a1a      	ldr	r2, [r3, #32]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2101      	movs	r1, #1
 80053ee:	430a      	orrs	r2, r1
 80053f0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2241      	movs	r2, #65	; 0x41
 80053fc:	2120      	movs	r1, #32
 80053fe:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2242      	movs	r2, #66	; 0x42
 800540a:	2100      	movs	r1, #0
 800540c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	0018      	movs	r0, r3
 8005412:	46bd      	mov	sp, r7
 8005414:	b002      	add	sp, #8
 8005416:	bd80      	pop	{r7, pc}
 8005418:	f0ffffff 	.word	0xf0ffffff
 800541c:	ffff7fff 	.word	0xffff7fff
 8005420:	02008000 	.word	0x02008000

08005424 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8005424:	b590      	push	{r4, r7, lr}
 8005426:	b089      	sub	sp, #36	; 0x24
 8005428:	af02      	add	r7, sp, #8
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	0008      	movs	r0, r1
 800542e:	607a      	str	r2, [r7, #4]
 8005430:	0019      	movs	r1, r3
 8005432:	230a      	movs	r3, #10
 8005434:	18fb      	adds	r3, r7, r3
 8005436:	1c02      	adds	r2, r0, #0
 8005438:	801a      	strh	r2, [r3, #0]
 800543a:	2308      	movs	r3, #8
 800543c:	18fb      	adds	r3, r7, r3
 800543e:	1c0a      	adds	r2, r1, #0
 8005440:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2241      	movs	r2, #65	; 0x41
 8005446:	5c9b      	ldrb	r3, [r3, r2]
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b20      	cmp	r3, #32
 800544c:	d000      	beq.n	8005450 <HAL_I2C_Master_Receive+0x2c>
 800544e:	e0e8      	b.n	8005622 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2240      	movs	r2, #64	; 0x40
 8005454:	5c9b      	ldrb	r3, [r3, r2]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d101      	bne.n	800545e <HAL_I2C_Master_Receive+0x3a>
 800545a:	2302      	movs	r3, #2
 800545c:	e0e2      	b.n	8005624 <HAL_I2C_Master_Receive+0x200>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2240      	movs	r2, #64	; 0x40
 8005462:	2101      	movs	r1, #1
 8005464:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005466:	f7fe ffa9 	bl	80043bc <HAL_GetTick>
 800546a:	0003      	movs	r3, r0
 800546c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800546e:	2380      	movs	r3, #128	; 0x80
 8005470:	0219      	lsls	r1, r3, #8
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	2319      	movs	r3, #25
 800547a:	2201      	movs	r2, #1
 800547c:	f000 f8fc 	bl	8005678 <I2C_WaitOnFlagUntilTimeout>
 8005480:	1e03      	subs	r3, r0, #0
 8005482:	d001      	beq.n	8005488 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e0cd      	b.n	8005624 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2241      	movs	r2, #65	; 0x41
 800548c:	2122      	movs	r1, #34	; 0x22
 800548e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2242      	movs	r2, #66	; 0x42
 8005494:	2110      	movs	r1, #16
 8005496:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2208      	movs	r2, #8
 80054a8:	18ba      	adds	r2, r7, r2
 80054aa:	8812      	ldrh	r2, [r2, #0]
 80054ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	2bff      	cmp	r3, #255	; 0xff
 80054bc:	d911      	bls.n	80054e2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	22ff      	movs	r2, #255	; 0xff
 80054c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	2380      	movs	r3, #128	; 0x80
 80054cc:	045c      	lsls	r4, r3, #17
 80054ce:	230a      	movs	r3, #10
 80054d0:	18fb      	adds	r3, r7, r3
 80054d2:	8819      	ldrh	r1, [r3, #0]
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	4b55      	ldr	r3, [pc, #340]	; (800562c <HAL_I2C_Master_Receive+0x208>)
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	0023      	movs	r3, r4
 80054dc:	f000 fa1a 	bl	8005914 <I2C_TransferConfig>
 80054e0:	e076      	b.n	80055d0 <HAL_I2C_Master_Receive+0x1ac>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054f0:	b2da      	uxtb	r2, r3
 80054f2:	2380      	movs	r3, #128	; 0x80
 80054f4:	049c      	lsls	r4, r3, #18
 80054f6:	230a      	movs	r3, #10
 80054f8:	18fb      	adds	r3, r7, r3
 80054fa:	8819      	ldrh	r1, [r3, #0]
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	4b4b      	ldr	r3, [pc, #300]	; (800562c <HAL_I2C_Master_Receive+0x208>)
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	0023      	movs	r3, r4
 8005504:	f000 fa06 	bl	8005914 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005508:	e062      	b.n	80055d0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	0018      	movs	r0, r3
 8005512:	f000 f92d 	bl	8005770 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005516:	1e03      	subs	r3, r0, #0
 8005518:	d001      	beq.n	800551e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e082      	b.n	8005624 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	b2d2      	uxtb	r2, r2
 800552a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005530:	1c5a      	adds	r2, r3, #1
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800553a:	3b01      	subs	r3, #1
 800553c:	b29a      	uxth	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005546:	b29b      	uxth	r3, r3
 8005548:	3b01      	subs	r3, #1
 800554a:	b29a      	uxth	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005554:	b29b      	uxth	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d03a      	beq.n	80055d0 <HAL_I2C_Master_Receive+0x1ac>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800555e:	2b00      	cmp	r3, #0
 8005560:	d136      	bne.n	80055d0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	0013      	movs	r3, r2
 800556c:	2200      	movs	r2, #0
 800556e:	2180      	movs	r1, #128	; 0x80
 8005570:	f000 f882 	bl	8005678 <I2C_WaitOnFlagUntilTimeout>
 8005574:	1e03      	subs	r3, r0, #0
 8005576:	d001      	beq.n	800557c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e053      	b.n	8005624 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005580:	b29b      	uxth	r3, r3
 8005582:	2bff      	cmp	r3, #255	; 0xff
 8005584:	d911      	bls.n	80055aa <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	22ff      	movs	r2, #255	; 0xff
 800558a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005590:	b2da      	uxtb	r2, r3
 8005592:	2380      	movs	r3, #128	; 0x80
 8005594:	045c      	lsls	r4, r3, #17
 8005596:	230a      	movs	r3, #10
 8005598:	18fb      	adds	r3, r7, r3
 800559a:	8819      	ldrh	r1, [r3, #0]
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	2300      	movs	r3, #0
 80055a0:	9300      	str	r3, [sp, #0]
 80055a2:	0023      	movs	r3, r4
 80055a4:	f000 f9b6 	bl	8005914 <I2C_TransferConfig>
 80055a8:	e012      	b.n	80055d0 <HAL_I2C_Master_Receive+0x1ac>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055b8:	b2da      	uxtb	r2, r3
 80055ba:	2380      	movs	r3, #128	; 0x80
 80055bc:	049c      	lsls	r4, r3, #18
 80055be:	230a      	movs	r3, #10
 80055c0:	18fb      	adds	r3, r7, r3
 80055c2:	8819      	ldrh	r1, [r3, #0]
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	2300      	movs	r3, #0
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	0023      	movs	r3, r4
 80055cc:	f000 f9a2 	bl	8005914 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d197      	bne.n	800550a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	0018      	movs	r0, r3
 80055e2:	f000 f888 	bl	80056f6 <I2C_WaitOnSTOPFlagUntilTimeout>
 80055e6:	1e03      	subs	r3, r0, #0
 80055e8:	d001      	beq.n	80055ee <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e01a      	b.n	8005624 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2220      	movs	r2, #32
 80055f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	490b      	ldr	r1, [pc, #44]	; (8005630 <HAL_I2C_Master_Receive+0x20c>)
 8005602:	400a      	ands	r2, r1
 8005604:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2241      	movs	r2, #65	; 0x41
 800560a:	2120      	movs	r1, #32
 800560c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2242      	movs	r2, #66	; 0x42
 8005612:	2100      	movs	r1, #0
 8005614:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2240      	movs	r2, #64	; 0x40
 800561a:	2100      	movs	r1, #0
 800561c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800561e:	2300      	movs	r3, #0
 8005620:	e000      	b.n	8005624 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8005622:	2302      	movs	r3, #2
  }
}
 8005624:	0018      	movs	r0, r3
 8005626:	46bd      	mov	sp, r7
 8005628:	b007      	add	sp, #28
 800562a:	bd90      	pop	{r4, r7, pc}
 800562c:	80002400 	.word	0x80002400
 8005630:	fe00e800 	.word	0xfe00e800

08005634 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	2202      	movs	r2, #2
 8005644:	4013      	ands	r3, r2
 8005646:	2b02      	cmp	r3, #2
 8005648:	d103      	bne.n	8005652 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2200      	movs	r2, #0
 8005650:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	2201      	movs	r2, #1
 800565a:	4013      	ands	r3, r2
 800565c:	2b01      	cmp	r3, #1
 800565e:	d007      	beq.n	8005670 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	699a      	ldr	r2, [r3, #24]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2101      	movs	r1, #1
 800566c:	430a      	orrs	r2, r1
 800566e:	619a      	str	r2, [r3, #24]
  }
}
 8005670:	46c0      	nop			; (mov r8, r8)
 8005672:	46bd      	mov	sp, r7
 8005674:	b002      	add	sp, #8
 8005676:	bd80      	pop	{r7, pc}

08005678 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	603b      	str	r3, [r7, #0]
 8005684:	1dfb      	adds	r3, r7, #7
 8005686:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005688:	e021      	b.n	80056ce <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	3301      	adds	r3, #1
 800568e:	d01e      	beq.n	80056ce <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005690:	f7fe fe94 	bl	80043bc <HAL_GetTick>
 8005694:	0002      	movs	r2, r0
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	429a      	cmp	r2, r3
 800569e:	d302      	bcc.n	80056a6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d113      	bne.n	80056ce <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056aa:	2220      	movs	r2, #32
 80056ac:	431a      	orrs	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2241      	movs	r2, #65	; 0x41
 80056b6:	2120      	movs	r1, #32
 80056b8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2242      	movs	r2, #66	; 0x42
 80056be:	2100      	movs	r1, #0
 80056c0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2240      	movs	r2, #64	; 0x40
 80056c6:	2100      	movs	r1, #0
 80056c8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e00f      	b.n	80056ee <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	4013      	ands	r3, r2
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	425a      	negs	r2, r3
 80056de:	4153      	adcs	r3, r2
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	001a      	movs	r2, r3
 80056e4:	1dfb      	adds	r3, r7, #7
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d0ce      	beq.n	800568a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	0018      	movs	r0, r3
 80056f0:	46bd      	mov	sp, r7
 80056f2:	b004      	add	sp, #16
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b084      	sub	sp, #16
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	60f8      	str	r0, [r7, #12]
 80056fe:	60b9      	str	r1, [r7, #8]
 8005700:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005702:	e028      	b.n	8005756 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	68b9      	ldr	r1, [r7, #8]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	0018      	movs	r0, r3
 800570c:	f000 f89c 	bl	8005848 <I2C_IsAcknowledgeFailed>
 8005710:	1e03      	subs	r3, r0, #0
 8005712:	d001      	beq.n	8005718 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e026      	b.n	8005766 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005718:	f7fe fe50 	bl	80043bc <HAL_GetTick>
 800571c:	0002      	movs	r2, r0
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	429a      	cmp	r2, r3
 8005726:	d302      	bcc.n	800572e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d113      	bne.n	8005756 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005732:	2220      	movs	r2, #32
 8005734:	431a      	orrs	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2241      	movs	r2, #65	; 0x41
 800573e:	2120      	movs	r1, #32
 8005740:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2242      	movs	r2, #66	; 0x42
 8005746:	2100      	movs	r1, #0
 8005748:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2240      	movs	r2, #64	; 0x40
 800574e:	2100      	movs	r1, #0
 8005750:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e007      	b.n	8005766 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	2220      	movs	r2, #32
 800575e:	4013      	ands	r3, r2
 8005760:	2b20      	cmp	r3, #32
 8005762:	d1cf      	bne.n	8005704 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	0018      	movs	r0, r3
 8005768:	46bd      	mov	sp, r7
 800576a:	b004      	add	sp, #16
 800576c:	bd80      	pop	{r7, pc}
	...

08005770 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800577c:	e055      	b.n	800582a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	68b9      	ldr	r1, [r7, #8]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	0018      	movs	r0, r3
 8005786:	f000 f85f 	bl	8005848 <I2C_IsAcknowledgeFailed>
 800578a:	1e03      	subs	r3, r0, #0
 800578c:	d001      	beq.n	8005792 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e053      	b.n	800583a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	2220      	movs	r2, #32
 800579a:	4013      	ands	r3, r2
 800579c:	2b20      	cmp	r3, #32
 800579e:	d129      	bne.n	80057f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	2204      	movs	r2, #4
 80057a8:	4013      	ands	r3, r2
 80057aa:	2b04      	cmp	r3, #4
 80057ac:	d105      	bne.n	80057ba <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80057b6:	2300      	movs	r3, #0
 80057b8:	e03f      	b.n	800583a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2220      	movs	r2, #32
 80057c0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	491d      	ldr	r1, [pc, #116]	; (8005844 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80057ce:	400a      	ands	r2, r1
 80057d0:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2241      	movs	r2, #65	; 0x41
 80057dc:	2120      	movs	r1, #32
 80057de:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2242      	movs	r2, #66	; 0x42
 80057e4:	2100      	movs	r1, #0
 80057e6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2240      	movs	r2, #64	; 0x40
 80057ec:	2100      	movs	r1, #0
 80057ee:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e022      	b.n	800583a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057f4:	f7fe fde2 	bl	80043bc <HAL_GetTick>
 80057f8:	0002      	movs	r2, r0
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	429a      	cmp	r2, r3
 8005802:	d302      	bcc.n	800580a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10f      	bne.n	800582a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800580e:	2220      	movs	r2, #32
 8005810:	431a      	orrs	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2241      	movs	r2, #65	; 0x41
 800581a:	2120      	movs	r1, #32
 800581c:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2240      	movs	r2, #64	; 0x40
 8005822:	2100      	movs	r1, #0
 8005824:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e007      	b.n	800583a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	2204      	movs	r2, #4
 8005832:	4013      	ands	r3, r2
 8005834:	2b04      	cmp	r3, #4
 8005836:	d1a2      	bne.n	800577e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	0018      	movs	r0, r3
 800583c:	46bd      	mov	sp, r7
 800583e:	b004      	add	sp, #16
 8005840:	bd80      	pop	{r7, pc}
 8005842:	46c0      	nop			; (mov r8, r8)
 8005844:	fe00e800 	.word	0xfe00e800

08005848 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	2210      	movs	r2, #16
 800585c:	4013      	ands	r3, r2
 800585e:	2b10      	cmp	r3, #16
 8005860:	d151      	bne.n	8005906 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005862:	e021      	b.n	80058a8 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	3301      	adds	r3, #1
 8005868:	d01e      	beq.n	80058a8 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800586a:	f7fe fda7 	bl	80043bc <HAL_GetTick>
 800586e:	0002      	movs	r2, r0
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	429a      	cmp	r2, r3
 8005878:	d302      	bcc.n	8005880 <I2C_IsAcknowledgeFailed+0x38>
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d113      	bne.n	80058a8 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005884:	2220      	movs	r2, #32
 8005886:	431a      	orrs	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2241      	movs	r2, #65	; 0x41
 8005890:	2120      	movs	r1, #32
 8005892:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2242      	movs	r2, #66	; 0x42
 8005898:	2100      	movs	r1, #0
 800589a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2240      	movs	r2, #64	; 0x40
 80058a0:	2100      	movs	r1, #0
 80058a2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e02f      	b.n	8005908 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	2220      	movs	r2, #32
 80058b0:	4013      	ands	r3, r2
 80058b2:	2b20      	cmp	r3, #32
 80058b4:	d1d6      	bne.n	8005864 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2210      	movs	r2, #16
 80058bc:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2220      	movs	r2, #32
 80058c4:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	0018      	movs	r0, r3
 80058ca:	f7ff feb3 	bl	8005634 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	490d      	ldr	r1, [pc, #52]	; (8005910 <I2C_IsAcknowledgeFailed+0xc8>)
 80058da:	400a      	ands	r2, r1
 80058dc:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e2:	2204      	movs	r2, #4
 80058e4:	431a      	orrs	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2241      	movs	r2, #65	; 0x41
 80058ee:	2120      	movs	r1, #32
 80058f0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2242      	movs	r2, #66	; 0x42
 80058f6:	2100      	movs	r1, #0
 80058f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2240      	movs	r2, #64	; 0x40
 80058fe:	2100      	movs	r1, #0
 8005900:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e000      	b.n	8005908 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	0018      	movs	r0, r3
 800590a:	46bd      	mov	sp, r7
 800590c:	b004      	add	sp, #16
 800590e:	bd80      	pop	{r7, pc}
 8005910:	fe00e800 	.word	0xfe00e800

08005914 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005914:	b590      	push	{r4, r7, lr}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	0008      	movs	r0, r1
 800591e:	0011      	movs	r1, r2
 8005920:	607b      	str	r3, [r7, #4]
 8005922:	240a      	movs	r4, #10
 8005924:	193b      	adds	r3, r7, r4
 8005926:	1c02      	adds	r2, r0, #0
 8005928:	801a      	strh	r2, [r3, #0]
 800592a:	2009      	movs	r0, #9
 800592c:	183b      	adds	r3, r7, r0
 800592e:	1c0a      	adds	r2, r1, #0
 8005930:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	6a3a      	ldr	r2, [r7, #32]
 800593a:	0d51      	lsrs	r1, r2, #21
 800593c:	2280      	movs	r2, #128	; 0x80
 800593e:	00d2      	lsls	r2, r2, #3
 8005940:	400a      	ands	r2, r1
 8005942:	490e      	ldr	r1, [pc, #56]	; (800597c <I2C_TransferConfig+0x68>)
 8005944:	430a      	orrs	r2, r1
 8005946:	43d2      	mvns	r2, r2
 8005948:	401a      	ands	r2, r3
 800594a:	0011      	movs	r1, r2
 800594c:	193b      	adds	r3, r7, r4
 800594e:	881b      	ldrh	r3, [r3, #0]
 8005950:	059b      	lsls	r3, r3, #22
 8005952:	0d9a      	lsrs	r2, r3, #22
 8005954:	183b      	adds	r3, r7, r0
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	0418      	lsls	r0, r3, #16
 800595a:	23ff      	movs	r3, #255	; 0xff
 800595c:	041b      	lsls	r3, r3, #16
 800595e:	4003      	ands	r3, r0
 8005960:	431a      	orrs	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	431a      	orrs	r2, r3
 8005966:	6a3b      	ldr	r3, [r7, #32]
 8005968:	431a      	orrs	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005972:	46c0      	nop			; (mov r8, r8)
 8005974:	46bd      	mov	sp, r7
 8005976:	b005      	add	sp, #20
 8005978:	bd90      	pop	{r4, r7, pc}
 800597a:	46c0      	nop			; (mov r8, r8)
 800597c:	03ff63ff 	.word	0x03ff63ff

08005980 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2241      	movs	r2, #65	; 0x41
 800598e:	5c9b      	ldrb	r3, [r3, r2]
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b20      	cmp	r3, #32
 8005994:	d138      	bne.n	8005a08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2240      	movs	r2, #64	; 0x40
 800599a:	5c9b      	ldrb	r3, [r3, r2]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d101      	bne.n	80059a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80059a0:	2302      	movs	r3, #2
 80059a2:	e032      	b.n	8005a0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2240      	movs	r2, #64	; 0x40
 80059a8:	2101      	movs	r1, #1
 80059aa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2241      	movs	r2, #65	; 0x41
 80059b0:	2124      	movs	r1, #36	; 0x24
 80059b2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2101      	movs	r1, #1
 80059c0:	438a      	bics	r2, r1
 80059c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4911      	ldr	r1, [pc, #68]	; (8005a14 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80059d0:	400a      	ands	r2, r1
 80059d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6819      	ldr	r1, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2101      	movs	r1, #1
 80059f0:	430a      	orrs	r2, r1
 80059f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2241      	movs	r2, #65	; 0x41
 80059f8:	2120      	movs	r1, #32
 80059fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2240      	movs	r2, #64	; 0x40
 8005a00:	2100      	movs	r1, #0
 8005a02:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005a04:	2300      	movs	r3, #0
 8005a06:	e000      	b.n	8005a0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a08:	2302      	movs	r3, #2
  }
}
 8005a0a:	0018      	movs	r0, r3
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	b002      	add	sp, #8
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	46c0      	nop			; (mov r8, r8)
 8005a14:	ffffefff 	.word	0xffffefff

08005a18 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2241      	movs	r2, #65	; 0x41
 8005a26:	5c9b      	ldrb	r3, [r3, r2]
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b20      	cmp	r3, #32
 8005a2c:	d139      	bne.n	8005aa2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2240      	movs	r2, #64	; 0x40
 8005a32:	5c9b      	ldrb	r3, [r3, r2]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d101      	bne.n	8005a3c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005a38:	2302      	movs	r3, #2
 8005a3a:	e033      	b.n	8005aa4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2240      	movs	r2, #64	; 0x40
 8005a40:	2101      	movs	r1, #1
 8005a42:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2241      	movs	r2, #65	; 0x41
 8005a48:	2124      	movs	r1, #36	; 0x24
 8005a4a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2101      	movs	r1, #1
 8005a58:	438a      	bics	r2, r1
 8005a5a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	4a11      	ldr	r2, [pc, #68]	; (8005aac <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005a68:	4013      	ands	r3, r2
 8005a6a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	021b      	lsls	r3, r3, #8
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2101      	movs	r1, #1
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2241      	movs	r2, #65	; 0x41
 8005a92:	2120      	movs	r1, #32
 8005a94:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2240      	movs	r2, #64	; 0x40
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	e000      	b.n	8005aa4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005aa2:	2302      	movs	r3, #2
  }
}
 8005aa4:	0018      	movs	r0, r3
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	b004      	add	sp, #16
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	fffff0ff 	.word	0xfffff0ff

08005ab0 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ab8:	4b07      	ldr	r3, [pc, #28]	; (8005ad8 <HAL_I2CEx_EnableFastModePlus+0x28>)
 8005aba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005abc:	4b06      	ldr	r3, [pc, #24]	; (8005ad8 <HAL_I2CEx_EnableFastModePlus+0x28>)
 8005abe:	2101      	movs	r1, #1
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR2, (uint32_t)ConfigFastModePlus);
 8005ac4:	4b05      	ldr	r3, [pc, #20]	; (8005adc <HAL_I2CEx_EnableFastModePlus+0x2c>)
 8005ac6:	6859      	ldr	r1, [r3, #4]
 8005ac8:	4b04      	ldr	r3, [pc, #16]	; (8005adc <HAL_I2CEx_EnableFastModePlus+0x2c>)
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	605a      	str	r2, [r3, #4]
}
 8005ad0:	46c0      	nop			; (mov r8, r8)
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	b002      	add	sp, #8
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	40021000 	.word	0x40021000
 8005adc:	40010000 	.word	0x40010000

08005ae0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ae0:	b5b0      	push	{r4, r5, r7, lr}
 8005ae2:	b08a      	sub	sp, #40	; 0x28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d102      	bne.n	8005af4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	f000 fbbf 	bl	8006272 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005af4:	4bc9      	ldr	r3, [pc, #804]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	220c      	movs	r2, #12
 8005afa:	4013      	ands	r3, r2
 8005afc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005afe:	4bc7      	ldr	r3, [pc, #796]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005b00:	68da      	ldr	r2, [r3, #12]
 8005b02:	2380      	movs	r3, #128	; 0x80
 8005b04:	025b      	lsls	r3, r3, #9
 8005b06:	4013      	ands	r3, r2
 8005b08:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	4013      	ands	r3, r2
 8005b12:	d100      	bne.n	8005b16 <HAL_RCC_OscConfig+0x36>
 8005b14:	e07e      	b.n	8005c14 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	2b08      	cmp	r3, #8
 8005b1a:	d007      	beq.n	8005b2c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	2b0c      	cmp	r3, #12
 8005b20:	d112      	bne.n	8005b48 <HAL_RCC_OscConfig+0x68>
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	2380      	movs	r3, #128	; 0x80
 8005b26:	025b      	lsls	r3, r3, #9
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d10d      	bne.n	8005b48 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b2c:	4bbb      	ldr	r3, [pc, #748]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	2380      	movs	r3, #128	; 0x80
 8005b32:	029b      	lsls	r3, r3, #10
 8005b34:	4013      	ands	r3, r2
 8005b36:	d100      	bne.n	8005b3a <HAL_RCC_OscConfig+0x5a>
 8005b38:	e06b      	b.n	8005c12 <HAL_RCC_OscConfig+0x132>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d167      	bne.n	8005c12 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	f000 fb95 	bl	8006272 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685a      	ldr	r2, [r3, #4]
 8005b4c:	2380      	movs	r3, #128	; 0x80
 8005b4e:	025b      	lsls	r3, r3, #9
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d107      	bne.n	8005b64 <HAL_RCC_OscConfig+0x84>
 8005b54:	4bb1      	ldr	r3, [pc, #708]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	4bb0      	ldr	r3, [pc, #704]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005b5a:	2180      	movs	r1, #128	; 0x80
 8005b5c:	0249      	lsls	r1, r1, #9
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	e027      	b.n	8005bb4 <HAL_RCC_OscConfig+0xd4>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685a      	ldr	r2, [r3, #4]
 8005b68:	23a0      	movs	r3, #160	; 0xa0
 8005b6a:	02db      	lsls	r3, r3, #11
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d10e      	bne.n	8005b8e <HAL_RCC_OscConfig+0xae>
 8005b70:	4baa      	ldr	r3, [pc, #680]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	4ba9      	ldr	r3, [pc, #676]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005b76:	2180      	movs	r1, #128	; 0x80
 8005b78:	02c9      	lsls	r1, r1, #11
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	4ba7      	ldr	r3, [pc, #668]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	4ba6      	ldr	r3, [pc, #664]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005b84:	2180      	movs	r1, #128	; 0x80
 8005b86:	0249      	lsls	r1, r1, #9
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	601a      	str	r2, [r3, #0]
 8005b8c:	e012      	b.n	8005bb4 <HAL_RCC_OscConfig+0xd4>
 8005b8e:	4ba3      	ldr	r3, [pc, #652]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	4ba2      	ldr	r3, [pc, #648]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005b94:	49a2      	ldr	r1, [pc, #648]	; (8005e20 <HAL_RCC_OscConfig+0x340>)
 8005b96:	400a      	ands	r2, r1
 8005b98:	601a      	str	r2, [r3, #0]
 8005b9a:	4ba0      	ldr	r3, [pc, #640]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	2380      	movs	r3, #128	; 0x80
 8005ba0:	025b      	lsls	r3, r3, #9
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4b9c      	ldr	r3, [pc, #624]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	4b9b      	ldr	r3, [pc, #620]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005bae:	499d      	ldr	r1, [pc, #628]	; (8005e24 <HAL_RCC_OscConfig+0x344>)
 8005bb0:	400a      	ands	r2, r1
 8005bb2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d015      	beq.n	8005be8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bbc:	f7fe fbfe 	bl	80043bc <HAL_GetTick>
 8005bc0:	0003      	movs	r3, r0
 8005bc2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bc4:	e009      	b.n	8005bda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bc6:	f7fe fbf9 	bl	80043bc <HAL_GetTick>
 8005bca:	0002      	movs	r2, r0
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	2b64      	cmp	r3, #100	; 0x64
 8005bd2:	d902      	bls.n	8005bda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	f000 fb4c 	bl	8006272 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bda:	4b90      	ldr	r3, [pc, #576]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	2380      	movs	r3, #128	; 0x80
 8005be0:	029b      	lsls	r3, r3, #10
 8005be2:	4013      	ands	r3, r2
 8005be4:	d0ef      	beq.n	8005bc6 <HAL_RCC_OscConfig+0xe6>
 8005be6:	e015      	b.n	8005c14 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005be8:	f7fe fbe8 	bl	80043bc <HAL_GetTick>
 8005bec:	0003      	movs	r3, r0
 8005bee:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005bf0:	e008      	b.n	8005c04 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bf2:	f7fe fbe3 	bl	80043bc <HAL_GetTick>
 8005bf6:	0002      	movs	r2, r0
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	2b64      	cmp	r3, #100	; 0x64
 8005bfe:	d901      	bls.n	8005c04 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e336      	b.n	8006272 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c04:	4b85      	ldr	r3, [pc, #532]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	2380      	movs	r3, #128	; 0x80
 8005c0a:	029b      	lsls	r3, r3, #10
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	d1f0      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x112>
 8005c10:	e000      	b.n	8005c14 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c12:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2202      	movs	r2, #2
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	d100      	bne.n	8005c20 <HAL_RCC_OscConfig+0x140>
 8005c1e:	e099      	b.n	8005d54 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	2220      	movs	r2, #32
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	d009      	beq.n	8005c42 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005c2e:	4b7b      	ldr	r3, [pc, #492]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	4b7a      	ldr	r3, [pc, #488]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005c34:	2120      	movs	r1, #32
 8005c36:	430a      	orrs	r2, r1
 8005c38:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	4393      	bics	r3, r2
 8005c40:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	d005      	beq.n	8005c54 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	2b0c      	cmp	r3, #12
 8005c4c:	d13e      	bne.n	8005ccc <HAL_RCC_OscConfig+0x1ec>
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d13b      	bne.n	8005ccc <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005c54:	4b71      	ldr	r3, [pc, #452]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2204      	movs	r2, #4
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	d004      	beq.n	8005c68 <HAL_RCC_OscConfig+0x188>
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e304      	b.n	8006272 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c68:	4b6c      	ldr	r3, [pc, #432]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	4a6e      	ldr	r2, [pc, #440]	; (8005e28 <HAL_RCC_OscConfig+0x348>)
 8005c6e:	4013      	ands	r3, r2
 8005c70:	0019      	movs	r1, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	021a      	lsls	r2, r3, #8
 8005c78:	4b68      	ldr	r3, [pc, #416]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005c7e:	4b67      	ldr	r3, [pc, #412]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2209      	movs	r2, #9
 8005c84:	4393      	bics	r3, r2
 8005c86:	0019      	movs	r1, r3
 8005c88:	4b64      	ldr	r3, [pc, #400]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c90:	f000 fc42 	bl	8006518 <HAL_RCC_GetSysClockFreq>
 8005c94:	0001      	movs	r1, r0
 8005c96:	4b61      	ldr	r3, [pc, #388]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	091b      	lsrs	r3, r3, #4
 8005c9c:	220f      	movs	r2, #15
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	4a62      	ldr	r2, [pc, #392]	; (8005e2c <HAL_RCC_OscConfig+0x34c>)
 8005ca2:	5cd3      	ldrb	r3, [r2, r3]
 8005ca4:	000a      	movs	r2, r1
 8005ca6:	40da      	lsrs	r2, r3
 8005ca8:	4b61      	ldr	r3, [pc, #388]	; (8005e30 <HAL_RCC_OscConfig+0x350>)
 8005caa:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005cac:	4b61      	ldr	r3, [pc, #388]	; (8005e34 <HAL_RCC_OscConfig+0x354>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2513      	movs	r5, #19
 8005cb2:	197c      	adds	r4, r7, r5
 8005cb4:	0018      	movs	r0, r3
 8005cb6:	f7fe fb3b 	bl	8004330 <HAL_InitTick>
 8005cba:	0003      	movs	r3, r0
 8005cbc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005cbe:	197b      	adds	r3, r7, r5
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d046      	beq.n	8005d54 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8005cc6:	197b      	adds	r3, r7, r5
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	e2d2      	b.n	8006272 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d027      	beq.n	8005d22 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005cd2:	4b52      	ldr	r3, [pc, #328]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2209      	movs	r2, #9
 8005cd8:	4393      	bics	r3, r2
 8005cda:	0019      	movs	r1, r3
 8005cdc:	4b4f      	ldr	r3, [pc, #316]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ce4:	f7fe fb6a 	bl	80043bc <HAL_GetTick>
 8005ce8:	0003      	movs	r3, r0
 8005cea:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cec:	e008      	b.n	8005d00 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cee:	f7fe fb65 	bl	80043bc <HAL_GetTick>
 8005cf2:	0002      	movs	r2, r0
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d901      	bls.n	8005d00 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e2b8      	b.n	8006272 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d00:	4b46      	ldr	r3, [pc, #280]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2204      	movs	r2, #4
 8005d06:	4013      	ands	r3, r2
 8005d08:	d0f1      	beq.n	8005cee <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d0a:	4b44      	ldr	r3, [pc, #272]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	4a46      	ldr	r2, [pc, #280]	; (8005e28 <HAL_RCC_OscConfig+0x348>)
 8005d10:	4013      	ands	r3, r2
 8005d12:	0019      	movs	r1, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	021a      	lsls	r2, r3, #8
 8005d1a:	4b40      	ldr	r3, [pc, #256]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	605a      	str	r2, [r3, #4]
 8005d20:	e018      	b.n	8005d54 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d22:	4b3e      	ldr	r3, [pc, #248]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	4b3d      	ldr	r3, [pc, #244]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005d28:	2101      	movs	r1, #1
 8005d2a:	438a      	bics	r2, r1
 8005d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d2e:	f7fe fb45 	bl	80043bc <HAL_GetTick>
 8005d32:	0003      	movs	r3, r0
 8005d34:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d36:	e008      	b.n	8005d4a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d38:	f7fe fb40 	bl	80043bc <HAL_GetTick>
 8005d3c:	0002      	movs	r2, r0
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d901      	bls.n	8005d4a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e293      	b.n	8006272 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d4a:	4b34      	ldr	r3, [pc, #208]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2204      	movs	r2, #4
 8005d50:	4013      	ands	r3, r2
 8005d52:	d1f1      	bne.n	8005d38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2210      	movs	r2, #16
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	d100      	bne.n	8005d60 <HAL_RCC_OscConfig+0x280>
 8005d5e:	e0a2      	b.n	8005ea6 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d140      	bne.n	8005de8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005d66:	4b2d      	ldr	r3, [pc, #180]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	2380      	movs	r3, #128	; 0x80
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4013      	ands	r3, r2
 8005d70:	d005      	beq.n	8005d7e <HAL_RCC_OscConfig+0x29e>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e279      	b.n	8006272 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d7e:	4b27      	ldr	r3, [pc, #156]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	4a2d      	ldr	r2, [pc, #180]	; (8005e38 <HAL_RCC_OscConfig+0x358>)
 8005d84:	4013      	ands	r3, r2
 8005d86:	0019      	movs	r1, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d8c:	4b23      	ldr	r3, [pc, #140]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d92:	4b22      	ldr	r3, [pc, #136]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	021b      	lsls	r3, r3, #8
 8005d98:	0a19      	lsrs	r1, r3, #8
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	061a      	lsls	r2, r3, #24
 8005da0:	4b1e      	ldr	r3, [pc, #120]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005da2:	430a      	orrs	r2, r1
 8005da4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005daa:	0b5b      	lsrs	r3, r3, #13
 8005dac:	3301      	adds	r3, #1
 8005dae:	2280      	movs	r2, #128	; 0x80
 8005db0:	0212      	lsls	r2, r2, #8
 8005db2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005db4:	4b19      	ldr	r3, [pc, #100]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	091b      	lsrs	r3, r3, #4
 8005dba:	210f      	movs	r1, #15
 8005dbc:	400b      	ands	r3, r1
 8005dbe:	491b      	ldr	r1, [pc, #108]	; (8005e2c <HAL_RCC_OscConfig+0x34c>)
 8005dc0:	5ccb      	ldrb	r3, [r1, r3]
 8005dc2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005dc4:	4b1a      	ldr	r3, [pc, #104]	; (8005e30 <HAL_RCC_OscConfig+0x350>)
 8005dc6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005dc8:	4b1a      	ldr	r3, [pc, #104]	; (8005e34 <HAL_RCC_OscConfig+0x354>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2513      	movs	r5, #19
 8005dce:	197c      	adds	r4, r7, r5
 8005dd0:	0018      	movs	r0, r3
 8005dd2:	f7fe faad 	bl	8004330 <HAL_InitTick>
 8005dd6:	0003      	movs	r3, r0
 8005dd8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005dda:	197b      	adds	r3, r7, r5
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d061      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8005de2:	197b      	adds	r3, r7, r5
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	e244      	b.n	8006272 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	69db      	ldr	r3, [r3, #28]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d040      	beq.n	8005e72 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005df0:	4b0a      	ldr	r3, [pc, #40]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	4b09      	ldr	r3, [pc, #36]	; (8005e1c <HAL_RCC_OscConfig+0x33c>)
 8005df6:	2180      	movs	r1, #128	; 0x80
 8005df8:	0049      	lsls	r1, r1, #1
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dfe:	f7fe fadd 	bl	80043bc <HAL_GetTick>
 8005e02:	0003      	movs	r3, r0
 8005e04:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005e06:	e019      	b.n	8005e3c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e08:	f7fe fad8 	bl	80043bc <HAL_GetTick>
 8005e0c:	0002      	movs	r2, r0
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d912      	bls.n	8005e3c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e22b      	b.n	8006272 <HAL_RCC_OscConfig+0x792>
 8005e1a:	46c0      	nop			; (mov r8, r8)
 8005e1c:	40021000 	.word	0x40021000
 8005e20:	fffeffff 	.word	0xfffeffff
 8005e24:	fffbffff 	.word	0xfffbffff
 8005e28:	ffffe0ff 	.word	0xffffe0ff
 8005e2c:	0800aed8 	.word	0x0800aed8
 8005e30:	20000038 	.word	0x20000038
 8005e34:	2000003c 	.word	0x2000003c
 8005e38:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005e3c:	4bca      	ldr	r3, [pc, #808]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	2380      	movs	r3, #128	; 0x80
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4013      	ands	r3, r2
 8005e46:	d0df      	beq.n	8005e08 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e48:	4bc7      	ldr	r3, [pc, #796]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	4ac7      	ldr	r2, [pc, #796]	; (800616c <HAL_RCC_OscConfig+0x68c>)
 8005e4e:	4013      	ands	r3, r2
 8005e50:	0019      	movs	r1, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e56:	4bc4      	ldr	r3, [pc, #784]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e5c:	4bc2      	ldr	r3, [pc, #776]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	021b      	lsls	r3, r3, #8
 8005e62:	0a19      	lsrs	r1, r3, #8
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	061a      	lsls	r2, r3, #24
 8005e6a:	4bbf      	ldr	r3, [pc, #764]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	605a      	str	r2, [r3, #4]
 8005e70:	e019      	b.n	8005ea6 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005e72:	4bbd      	ldr	r3, [pc, #756]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	4bbc      	ldr	r3, [pc, #752]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 8005e78:	49bd      	ldr	r1, [pc, #756]	; (8006170 <HAL_RCC_OscConfig+0x690>)
 8005e7a:	400a      	ands	r2, r1
 8005e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e7e:	f7fe fa9d 	bl	80043bc <HAL_GetTick>
 8005e82:	0003      	movs	r3, r0
 8005e84:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005e86:	e008      	b.n	8005e9a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e88:	f7fe fa98 	bl	80043bc <HAL_GetTick>
 8005e8c:	0002      	movs	r2, r0
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e1eb      	b.n	8006272 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005e9a:	4bb3      	ldr	r3, [pc, #716]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	2380      	movs	r3, #128	; 0x80
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	d1f0      	bne.n	8005e88 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2208      	movs	r2, #8
 8005eac:	4013      	ands	r3, r2
 8005eae:	d036      	beq.n	8005f1e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d019      	beq.n	8005eec <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005eb8:	4bab      	ldr	r3, [pc, #684]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 8005eba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ebc:	4baa      	ldr	r3, [pc, #680]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ec4:	f7fe fa7a 	bl	80043bc <HAL_GetTick>
 8005ec8:	0003      	movs	r3, r0
 8005eca:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ecc:	e008      	b.n	8005ee0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ece:	f7fe fa75 	bl	80043bc <HAL_GetTick>
 8005ed2:	0002      	movs	r2, r0
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d901      	bls.n	8005ee0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e1c8      	b.n	8006272 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ee0:	4ba1      	ldr	r3, [pc, #644]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 8005ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	d0f1      	beq.n	8005ece <HAL_RCC_OscConfig+0x3ee>
 8005eea:	e018      	b.n	8005f1e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005eec:	4b9e      	ldr	r3, [pc, #632]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 8005eee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ef0:	4b9d      	ldr	r3, [pc, #628]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 8005ef2:	2101      	movs	r1, #1
 8005ef4:	438a      	bics	r2, r1
 8005ef6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ef8:	f7fe fa60 	bl	80043bc <HAL_GetTick>
 8005efc:	0003      	movs	r3, r0
 8005efe:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f00:	e008      	b.n	8005f14 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f02:	f7fe fa5b 	bl	80043bc <HAL_GetTick>
 8005f06:	0002      	movs	r2, r0
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d901      	bls.n	8005f14 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e1ae      	b.n	8006272 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f14:	4b94      	ldr	r3, [pc, #592]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 8005f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f18:	2202      	movs	r2, #2
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	d1f1      	bne.n	8005f02 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2204      	movs	r2, #4
 8005f24:	4013      	ands	r3, r2
 8005f26:	d100      	bne.n	8005f2a <HAL_RCC_OscConfig+0x44a>
 8005f28:	e0ae      	b.n	8006088 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f2a:	2023      	movs	r0, #35	; 0x23
 8005f2c:	183b      	adds	r3, r7, r0
 8005f2e:	2200      	movs	r2, #0
 8005f30:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f32:	4b8d      	ldr	r3, [pc, #564]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 8005f34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f36:	2380      	movs	r3, #128	; 0x80
 8005f38:	055b      	lsls	r3, r3, #21
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	d109      	bne.n	8005f52 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f3e:	4b8a      	ldr	r3, [pc, #552]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 8005f40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f42:	4b89      	ldr	r3, [pc, #548]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 8005f44:	2180      	movs	r1, #128	; 0x80
 8005f46:	0549      	lsls	r1, r1, #21
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005f4c:	183b      	adds	r3, r7, r0
 8005f4e:	2201      	movs	r2, #1
 8005f50:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f52:	4b88      	ldr	r3, [pc, #544]	; (8006174 <HAL_RCC_OscConfig+0x694>)
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	2380      	movs	r3, #128	; 0x80
 8005f58:	005b      	lsls	r3, r3, #1
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	d11a      	bne.n	8005f94 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f5e:	4b85      	ldr	r3, [pc, #532]	; (8006174 <HAL_RCC_OscConfig+0x694>)
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	4b84      	ldr	r3, [pc, #528]	; (8006174 <HAL_RCC_OscConfig+0x694>)
 8005f64:	2180      	movs	r1, #128	; 0x80
 8005f66:	0049      	lsls	r1, r1, #1
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f6c:	f7fe fa26 	bl	80043bc <HAL_GetTick>
 8005f70:	0003      	movs	r3, r0
 8005f72:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f74:	e008      	b.n	8005f88 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f76:	f7fe fa21 	bl	80043bc <HAL_GetTick>
 8005f7a:	0002      	movs	r2, r0
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	2b64      	cmp	r3, #100	; 0x64
 8005f82:	d901      	bls.n	8005f88 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e174      	b.n	8006272 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f88:	4b7a      	ldr	r3, [pc, #488]	; (8006174 <HAL_RCC_OscConfig+0x694>)
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	2380      	movs	r3, #128	; 0x80
 8005f8e:	005b      	lsls	r3, r3, #1
 8005f90:	4013      	ands	r3, r2
 8005f92:	d0f0      	beq.n	8005f76 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689a      	ldr	r2, [r3, #8]
 8005f98:	2380      	movs	r3, #128	; 0x80
 8005f9a:	005b      	lsls	r3, r3, #1
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d107      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x4d0>
 8005fa0:	4b71      	ldr	r3, [pc, #452]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 8005fa2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fa4:	4b70      	ldr	r3, [pc, #448]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 8005fa6:	2180      	movs	r1, #128	; 0x80
 8005fa8:	0049      	lsls	r1, r1, #1
 8005faa:	430a      	orrs	r2, r1
 8005fac:	651a      	str	r2, [r3, #80]	; 0x50
 8005fae:	e031      	b.n	8006014 <HAL_RCC_OscConfig+0x534>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10c      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x4f2>
 8005fb8:	4b6b      	ldr	r3, [pc, #428]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 8005fba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fbc:	4b6a      	ldr	r3, [pc, #424]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 8005fbe:	496c      	ldr	r1, [pc, #432]	; (8006170 <HAL_RCC_OscConfig+0x690>)
 8005fc0:	400a      	ands	r2, r1
 8005fc2:	651a      	str	r2, [r3, #80]	; 0x50
 8005fc4:	4b68      	ldr	r3, [pc, #416]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 8005fc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fc8:	4b67      	ldr	r3, [pc, #412]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 8005fca:	496b      	ldr	r1, [pc, #428]	; (8006178 <HAL_RCC_OscConfig+0x698>)
 8005fcc:	400a      	ands	r2, r1
 8005fce:	651a      	str	r2, [r3, #80]	; 0x50
 8005fd0:	e020      	b.n	8006014 <HAL_RCC_OscConfig+0x534>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	689a      	ldr	r2, [r3, #8]
 8005fd6:	23a0      	movs	r3, #160	; 0xa0
 8005fd8:	00db      	lsls	r3, r3, #3
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d10e      	bne.n	8005ffc <HAL_RCC_OscConfig+0x51c>
 8005fde:	4b62      	ldr	r3, [pc, #392]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 8005fe0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fe2:	4b61      	ldr	r3, [pc, #388]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 8005fe4:	2180      	movs	r1, #128	; 0x80
 8005fe6:	00c9      	lsls	r1, r1, #3
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	651a      	str	r2, [r3, #80]	; 0x50
 8005fec:	4b5e      	ldr	r3, [pc, #376]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 8005fee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ff0:	4b5d      	ldr	r3, [pc, #372]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 8005ff2:	2180      	movs	r1, #128	; 0x80
 8005ff4:	0049      	lsls	r1, r1, #1
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	651a      	str	r2, [r3, #80]	; 0x50
 8005ffa:	e00b      	b.n	8006014 <HAL_RCC_OscConfig+0x534>
 8005ffc:	4b5a      	ldr	r3, [pc, #360]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 8005ffe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006000:	4b59      	ldr	r3, [pc, #356]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 8006002:	495b      	ldr	r1, [pc, #364]	; (8006170 <HAL_RCC_OscConfig+0x690>)
 8006004:	400a      	ands	r2, r1
 8006006:	651a      	str	r2, [r3, #80]	; 0x50
 8006008:	4b57      	ldr	r3, [pc, #348]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 800600a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800600c:	4b56      	ldr	r3, [pc, #344]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 800600e:	495a      	ldr	r1, [pc, #360]	; (8006178 <HAL_RCC_OscConfig+0x698>)
 8006010:	400a      	ands	r2, r1
 8006012:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d015      	beq.n	8006048 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800601c:	f7fe f9ce 	bl	80043bc <HAL_GetTick>
 8006020:	0003      	movs	r3, r0
 8006022:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006024:	e009      	b.n	800603a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006026:	f7fe f9c9 	bl	80043bc <HAL_GetTick>
 800602a:	0002      	movs	r2, r0
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	4a52      	ldr	r2, [pc, #328]	; (800617c <HAL_RCC_OscConfig+0x69c>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d901      	bls.n	800603a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e11b      	b.n	8006272 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800603a:	4b4b      	ldr	r3, [pc, #300]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 800603c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800603e:	2380      	movs	r3, #128	; 0x80
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4013      	ands	r3, r2
 8006044:	d0ef      	beq.n	8006026 <HAL_RCC_OscConfig+0x546>
 8006046:	e014      	b.n	8006072 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006048:	f7fe f9b8 	bl	80043bc <HAL_GetTick>
 800604c:	0003      	movs	r3, r0
 800604e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006050:	e009      	b.n	8006066 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006052:	f7fe f9b3 	bl	80043bc <HAL_GetTick>
 8006056:	0002      	movs	r2, r0
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	4a47      	ldr	r2, [pc, #284]	; (800617c <HAL_RCC_OscConfig+0x69c>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d901      	bls.n	8006066 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e105      	b.n	8006272 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006066:	4b40      	ldr	r3, [pc, #256]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 8006068:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800606a:	2380      	movs	r3, #128	; 0x80
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4013      	ands	r3, r2
 8006070:	d1ef      	bne.n	8006052 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006072:	2323      	movs	r3, #35	; 0x23
 8006074:	18fb      	adds	r3, r7, r3
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d105      	bne.n	8006088 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800607c:	4b3a      	ldr	r3, [pc, #232]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 800607e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006080:	4b39      	ldr	r3, [pc, #228]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 8006082:	493f      	ldr	r1, [pc, #252]	; (8006180 <HAL_RCC_OscConfig+0x6a0>)
 8006084:	400a      	ands	r2, r1
 8006086:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2220      	movs	r2, #32
 800608e:	4013      	ands	r3, r2
 8006090:	d049      	beq.n	8006126 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d026      	beq.n	80060e8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800609a:	4b33      	ldr	r3, [pc, #204]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 800609c:	689a      	ldr	r2, [r3, #8]
 800609e:	4b32      	ldr	r3, [pc, #200]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 80060a0:	2101      	movs	r1, #1
 80060a2:	430a      	orrs	r2, r1
 80060a4:	609a      	str	r2, [r3, #8]
 80060a6:	4b30      	ldr	r3, [pc, #192]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 80060a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060aa:	4b2f      	ldr	r3, [pc, #188]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 80060ac:	2101      	movs	r1, #1
 80060ae:	430a      	orrs	r2, r1
 80060b0:	635a      	str	r2, [r3, #52]	; 0x34
 80060b2:	4b34      	ldr	r3, [pc, #208]	; (8006184 <HAL_RCC_OscConfig+0x6a4>)
 80060b4:	6a1a      	ldr	r2, [r3, #32]
 80060b6:	4b33      	ldr	r3, [pc, #204]	; (8006184 <HAL_RCC_OscConfig+0x6a4>)
 80060b8:	2180      	movs	r1, #128	; 0x80
 80060ba:	0189      	lsls	r1, r1, #6
 80060bc:	430a      	orrs	r2, r1
 80060be:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060c0:	f7fe f97c 	bl	80043bc <HAL_GetTick>
 80060c4:	0003      	movs	r3, r0
 80060c6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80060c8:	e008      	b.n	80060dc <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80060ca:	f7fe f977 	bl	80043bc <HAL_GetTick>
 80060ce:	0002      	movs	r2, r0
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d901      	bls.n	80060dc <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e0ca      	b.n	8006272 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80060dc:	4b22      	ldr	r3, [pc, #136]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	2202      	movs	r2, #2
 80060e2:	4013      	ands	r3, r2
 80060e4:	d0f1      	beq.n	80060ca <HAL_RCC_OscConfig+0x5ea>
 80060e6:	e01e      	b.n	8006126 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80060e8:	4b1f      	ldr	r3, [pc, #124]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	4b1e      	ldr	r3, [pc, #120]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 80060ee:	2101      	movs	r1, #1
 80060f0:	438a      	bics	r2, r1
 80060f2:	609a      	str	r2, [r3, #8]
 80060f4:	4b23      	ldr	r3, [pc, #140]	; (8006184 <HAL_RCC_OscConfig+0x6a4>)
 80060f6:	6a1a      	ldr	r2, [r3, #32]
 80060f8:	4b22      	ldr	r3, [pc, #136]	; (8006184 <HAL_RCC_OscConfig+0x6a4>)
 80060fa:	4923      	ldr	r1, [pc, #140]	; (8006188 <HAL_RCC_OscConfig+0x6a8>)
 80060fc:	400a      	ands	r2, r1
 80060fe:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006100:	f7fe f95c 	bl	80043bc <HAL_GetTick>
 8006104:	0003      	movs	r3, r0
 8006106:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006108:	e008      	b.n	800611c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800610a:	f7fe f957 	bl	80043bc <HAL_GetTick>
 800610e:	0002      	movs	r2, r0
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	2b02      	cmp	r3, #2
 8006116:	d901      	bls.n	800611c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e0aa      	b.n	8006272 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800611c:	4b12      	ldr	r3, [pc, #72]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	2202      	movs	r2, #2
 8006122:	4013      	ands	r3, r2
 8006124:	d1f1      	bne.n	800610a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612a:	2b00      	cmp	r3, #0
 800612c:	d100      	bne.n	8006130 <HAL_RCC_OscConfig+0x650>
 800612e:	e09f      	b.n	8006270 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	2b0c      	cmp	r3, #12
 8006134:	d100      	bne.n	8006138 <HAL_RCC_OscConfig+0x658>
 8006136:	e078      	b.n	800622a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613c:	2b02      	cmp	r3, #2
 800613e:	d159      	bne.n	80061f4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006140:	4b09      	ldr	r3, [pc, #36]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	4b08      	ldr	r3, [pc, #32]	; (8006168 <HAL_RCC_OscConfig+0x688>)
 8006146:	4911      	ldr	r1, [pc, #68]	; (800618c <HAL_RCC_OscConfig+0x6ac>)
 8006148:	400a      	ands	r2, r1
 800614a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800614c:	f7fe f936 	bl	80043bc <HAL_GetTick>
 8006150:	0003      	movs	r3, r0
 8006152:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006154:	e01c      	b.n	8006190 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006156:	f7fe f931 	bl	80043bc <HAL_GetTick>
 800615a:	0002      	movs	r2, r0
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	2b02      	cmp	r3, #2
 8006162:	d915      	bls.n	8006190 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e084      	b.n	8006272 <HAL_RCC_OscConfig+0x792>
 8006168:	40021000 	.word	0x40021000
 800616c:	ffff1fff 	.word	0xffff1fff
 8006170:	fffffeff 	.word	0xfffffeff
 8006174:	40007000 	.word	0x40007000
 8006178:	fffffbff 	.word	0xfffffbff
 800617c:	00001388 	.word	0x00001388
 8006180:	efffffff 	.word	0xefffffff
 8006184:	40010000 	.word	0x40010000
 8006188:	ffffdfff 	.word	0xffffdfff
 800618c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006190:	4b3a      	ldr	r3, [pc, #232]	; (800627c <HAL_RCC_OscConfig+0x79c>)
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	2380      	movs	r3, #128	; 0x80
 8006196:	049b      	lsls	r3, r3, #18
 8006198:	4013      	ands	r3, r2
 800619a:	d1dc      	bne.n	8006156 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800619c:	4b37      	ldr	r3, [pc, #220]	; (800627c <HAL_RCC_OscConfig+0x79c>)
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	4a37      	ldr	r2, [pc, #220]	; (8006280 <HAL_RCC_OscConfig+0x7a0>)
 80061a2:	4013      	ands	r3, r2
 80061a4:	0019      	movs	r1, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ae:	431a      	orrs	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061b4:	431a      	orrs	r2, r3
 80061b6:	4b31      	ldr	r3, [pc, #196]	; (800627c <HAL_RCC_OscConfig+0x79c>)
 80061b8:	430a      	orrs	r2, r1
 80061ba:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061bc:	4b2f      	ldr	r3, [pc, #188]	; (800627c <HAL_RCC_OscConfig+0x79c>)
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	4b2e      	ldr	r3, [pc, #184]	; (800627c <HAL_RCC_OscConfig+0x79c>)
 80061c2:	2180      	movs	r1, #128	; 0x80
 80061c4:	0449      	lsls	r1, r1, #17
 80061c6:	430a      	orrs	r2, r1
 80061c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ca:	f7fe f8f7 	bl	80043bc <HAL_GetTick>
 80061ce:	0003      	movs	r3, r0
 80061d0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80061d2:	e008      	b.n	80061e6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061d4:	f7fe f8f2 	bl	80043bc <HAL_GetTick>
 80061d8:	0002      	movs	r2, r0
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d901      	bls.n	80061e6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e045      	b.n	8006272 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80061e6:	4b25      	ldr	r3, [pc, #148]	; (800627c <HAL_RCC_OscConfig+0x79c>)
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	2380      	movs	r3, #128	; 0x80
 80061ec:	049b      	lsls	r3, r3, #18
 80061ee:	4013      	ands	r3, r2
 80061f0:	d0f0      	beq.n	80061d4 <HAL_RCC_OscConfig+0x6f4>
 80061f2:	e03d      	b.n	8006270 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061f4:	4b21      	ldr	r3, [pc, #132]	; (800627c <HAL_RCC_OscConfig+0x79c>)
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	4b20      	ldr	r3, [pc, #128]	; (800627c <HAL_RCC_OscConfig+0x79c>)
 80061fa:	4922      	ldr	r1, [pc, #136]	; (8006284 <HAL_RCC_OscConfig+0x7a4>)
 80061fc:	400a      	ands	r2, r1
 80061fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006200:	f7fe f8dc 	bl	80043bc <HAL_GetTick>
 8006204:	0003      	movs	r3, r0
 8006206:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006208:	e008      	b.n	800621c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800620a:	f7fe f8d7 	bl	80043bc <HAL_GetTick>
 800620e:	0002      	movs	r2, r0
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	2b02      	cmp	r3, #2
 8006216:	d901      	bls.n	800621c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e02a      	b.n	8006272 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800621c:	4b17      	ldr	r3, [pc, #92]	; (800627c <HAL_RCC_OscConfig+0x79c>)
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	2380      	movs	r3, #128	; 0x80
 8006222:	049b      	lsls	r3, r3, #18
 8006224:	4013      	ands	r3, r2
 8006226:	d1f0      	bne.n	800620a <HAL_RCC_OscConfig+0x72a>
 8006228:	e022      	b.n	8006270 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622e:	2b01      	cmp	r3, #1
 8006230:	d101      	bne.n	8006236 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e01d      	b.n	8006272 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006236:	4b11      	ldr	r3, [pc, #68]	; (800627c <HAL_RCC_OscConfig+0x79c>)
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	2380      	movs	r3, #128	; 0x80
 8006240:	025b      	lsls	r3, r3, #9
 8006242:	401a      	ands	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006248:	429a      	cmp	r2, r3
 800624a:	d10f      	bne.n	800626c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800624c:	69ba      	ldr	r2, [r7, #24]
 800624e:	23f0      	movs	r3, #240	; 0xf0
 8006250:	039b      	lsls	r3, r3, #14
 8006252:	401a      	ands	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006258:	429a      	cmp	r2, r3
 800625a:	d107      	bne.n	800626c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800625c:	69ba      	ldr	r2, [r7, #24]
 800625e:	23c0      	movs	r3, #192	; 0xc0
 8006260:	041b      	lsls	r3, r3, #16
 8006262:	401a      	ands	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006268:	429a      	cmp	r2, r3
 800626a:	d001      	beq.n	8006270 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e000      	b.n	8006272 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	0018      	movs	r0, r3
 8006274:	46bd      	mov	sp, r7
 8006276:	b00a      	add	sp, #40	; 0x28
 8006278:	bdb0      	pop	{r4, r5, r7, pc}
 800627a:	46c0      	nop			; (mov r8, r8)
 800627c:	40021000 	.word	0x40021000
 8006280:	ff02ffff 	.word	0xff02ffff
 8006284:	feffffff 	.word	0xfeffffff

08006288 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006288:	b5b0      	push	{r4, r5, r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d101      	bne.n	800629c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e128      	b.n	80064ee <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800629c:	4b96      	ldr	r3, [pc, #600]	; (80064f8 <HAL_RCC_ClockConfig+0x270>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2201      	movs	r2, #1
 80062a2:	4013      	ands	r3, r2
 80062a4:	683a      	ldr	r2, [r7, #0]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d91e      	bls.n	80062e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062aa:	4b93      	ldr	r3, [pc, #588]	; (80064f8 <HAL_RCC_ClockConfig+0x270>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2201      	movs	r2, #1
 80062b0:	4393      	bics	r3, r2
 80062b2:	0019      	movs	r1, r3
 80062b4:	4b90      	ldr	r3, [pc, #576]	; (80064f8 <HAL_RCC_ClockConfig+0x270>)
 80062b6:	683a      	ldr	r2, [r7, #0]
 80062b8:	430a      	orrs	r2, r1
 80062ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80062bc:	f7fe f87e 	bl	80043bc <HAL_GetTick>
 80062c0:	0003      	movs	r3, r0
 80062c2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062c4:	e009      	b.n	80062da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062c6:	f7fe f879 	bl	80043bc <HAL_GetTick>
 80062ca:	0002      	movs	r2, r0
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	4a8a      	ldr	r2, [pc, #552]	; (80064fc <HAL_RCC_ClockConfig+0x274>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d901      	bls.n	80062da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e109      	b.n	80064ee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062da:	4b87      	ldr	r3, [pc, #540]	; (80064f8 <HAL_RCC_ClockConfig+0x270>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2201      	movs	r2, #1
 80062e0:	4013      	ands	r3, r2
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d1ee      	bne.n	80062c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2202      	movs	r2, #2
 80062ee:	4013      	ands	r3, r2
 80062f0:	d009      	beq.n	8006306 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062f2:	4b83      	ldr	r3, [pc, #524]	; (8006500 <HAL_RCC_ClockConfig+0x278>)
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	22f0      	movs	r2, #240	; 0xf0
 80062f8:	4393      	bics	r3, r2
 80062fa:	0019      	movs	r1, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689a      	ldr	r2, [r3, #8]
 8006300:	4b7f      	ldr	r3, [pc, #508]	; (8006500 <HAL_RCC_ClockConfig+0x278>)
 8006302:	430a      	orrs	r2, r1
 8006304:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2201      	movs	r2, #1
 800630c:	4013      	ands	r3, r2
 800630e:	d100      	bne.n	8006312 <HAL_RCC_ClockConfig+0x8a>
 8006310:	e089      	b.n	8006426 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	2b02      	cmp	r3, #2
 8006318:	d107      	bne.n	800632a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800631a:	4b79      	ldr	r3, [pc, #484]	; (8006500 <HAL_RCC_ClockConfig+0x278>)
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	2380      	movs	r3, #128	; 0x80
 8006320:	029b      	lsls	r3, r3, #10
 8006322:	4013      	ands	r3, r2
 8006324:	d120      	bne.n	8006368 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e0e1      	b.n	80064ee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	2b03      	cmp	r3, #3
 8006330:	d107      	bne.n	8006342 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006332:	4b73      	ldr	r3, [pc, #460]	; (8006500 <HAL_RCC_ClockConfig+0x278>)
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	2380      	movs	r3, #128	; 0x80
 8006338:	049b      	lsls	r3, r3, #18
 800633a:	4013      	ands	r3, r2
 800633c:	d114      	bne.n	8006368 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e0d5      	b.n	80064ee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d106      	bne.n	8006358 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800634a:	4b6d      	ldr	r3, [pc, #436]	; (8006500 <HAL_RCC_ClockConfig+0x278>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2204      	movs	r2, #4
 8006350:	4013      	ands	r3, r2
 8006352:	d109      	bne.n	8006368 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e0ca      	b.n	80064ee <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006358:	4b69      	ldr	r3, [pc, #420]	; (8006500 <HAL_RCC_ClockConfig+0x278>)
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	2380      	movs	r3, #128	; 0x80
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	4013      	ands	r3, r2
 8006362:	d101      	bne.n	8006368 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e0c2      	b.n	80064ee <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006368:	4b65      	ldr	r3, [pc, #404]	; (8006500 <HAL_RCC_ClockConfig+0x278>)
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	2203      	movs	r2, #3
 800636e:	4393      	bics	r3, r2
 8006370:	0019      	movs	r1, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	4b62      	ldr	r3, [pc, #392]	; (8006500 <HAL_RCC_ClockConfig+0x278>)
 8006378:	430a      	orrs	r2, r1
 800637a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800637c:	f7fe f81e 	bl	80043bc <HAL_GetTick>
 8006380:	0003      	movs	r3, r0
 8006382:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	2b02      	cmp	r3, #2
 800638a:	d111      	bne.n	80063b0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800638c:	e009      	b.n	80063a2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800638e:	f7fe f815 	bl	80043bc <HAL_GetTick>
 8006392:	0002      	movs	r2, r0
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	4a58      	ldr	r2, [pc, #352]	; (80064fc <HAL_RCC_ClockConfig+0x274>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d901      	bls.n	80063a2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e0a5      	b.n	80064ee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80063a2:	4b57      	ldr	r3, [pc, #348]	; (8006500 <HAL_RCC_ClockConfig+0x278>)
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	220c      	movs	r2, #12
 80063a8:	4013      	ands	r3, r2
 80063aa:	2b08      	cmp	r3, #8
 80063ac:	d1ef      	bne.n	800638e <HAL_RCC_ClockConfig+0x106>
 80063ae:	e03a      	b.n	8006426 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	2b03      	cmp	r3, #3
 80063b6:	d111      	bne.n	80063dc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063b8:	e009      	b.n	80063ce <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063ba:	f7fd ffff 	bl	80043bc <HAL_GetTick>
 80063be:	0002      	movs	r2, r0
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	4a4d      	ldr	r2, [pc, #308]	; (80064fc <HAL_RCC_ClockConfig+0x274>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d901      	bls.n	80063ce <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e08f      	b.n	80064ee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063ce:	4b4c      	ldr	r3, [pc, #304]	; (8006500 <HAL_RCC_ClockConfig+0x278>)
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	220c      	movs	r2, #12
 80063d4:	4013      	ands	r3, r2
 80063d6:	2b0c      	cmp	r3, #12
 80063d8:	d1ef      	bne.n	80063ba <HAL_RCC_ClockConfig+0x132>
 80063da:	e024      	b.n	8006426 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d11b      	bne.n	800641c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80063e4:	e009      	b.n	80063fa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063e6:	f7fd ffe9 	bl	80043bc <HAL_GetTick>
 80063ea:	0002      	movs	r2, r0
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	4a42      	ldr	r2, [pc, #264]	; (80064fc <HAL_RCC_ClockConfig+0x274>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d901      	bls.n	80063fa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e079      	b.n	80064ee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80063fa:	4b41      	ldr	r3, [pc, #260]	; (8006500 <HAL_RCC_ClockConfig+0x278>)
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	220c      	movs	r2, #12
 8006400:	4013      	ands	r3, r2
 8006402:	2b04      	cmp	r3, #4
 8006404:	d1ef      	bne.n	80063e6 <HAL_RCC_ClockConfig+0x15e>
 8006406:	e00e      	b.n	8006426 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006408:	f7fd ffd8 	bl	80043bc <HAL_GetTick>
 800640c:	0002      	movs	r2, r0
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	4a3a      	ldr	r2, [pc, #232]	; (80064fc <HAL_RCC_ClockConfig+0x274>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d901      	bls.n	800641c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e068      	b.n	80064ee <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800641c:	4b38      	ldr	r3, [pc, #224]	; (8006500 <HAL_RCC_ClockConfig+0x278>)
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	220c      	movs	r2, #12
 8006422:	4013      	ands	r3, r2
 8006424:	d1f0      	bne.n	8006408 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006426:	4b34      	ldr	r3, [pc, #208]	; (80064f8 <HAL_RCC_ClockConfig+0x270>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2201      	movs	r2, #1
 800642c:	4013      	ands	r3, r2
 800642e:	683a      	ldr	r2, [r7, #0]
 8006430:	429a      	cmp	r2, r3
 8006432:	d21e      	bcs.n	8006472 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006434:	4b30      	ldr	r3, [pc, #192]	; (80064f8 <HAL_RCC_ClockConfig+0x270>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2201      	movs	r2, #1
 800643a:	4393      	bics	r3, r2
 800643c:	0019      	movs	r1, r3
 800643e:	4b2e      	ldr	r3, [pc, #184]	; (80064f8 <HAL_RCC_ClockConfig+0x270>)
 8006440:	683a      	ldr	r2, [r7, #0]
 8006442:	430a      	orrs	r2, r1
 8006444:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006446:	f7fd ffb9 	bl	80043bc <HAL_GetTick>
 800644a:	0003      	movs	r3, r0
 800644c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800644e:	e009      	b.n	8006464 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006450:	f7fd ffb4 	bl	80043bc <HAL_GetTick>
 8006454:	0002      	movs	r2, r0
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	4a28      	ldr	r2, [pc, #160]	; (80064fc <HAL_RCC_ClockConfig+0x274>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d901      	bls.n	8006464 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e044      	b.n	80064ee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006464:	4b24      	ldr	r3, [pc, #144]	; (80064f8 <HAL_RCC_ClockConfig+0x270>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2201      	movs	r2, #1
 800646a:	4013      	ands	r3, r2
 800646c:	683a      	ldr	r2, [r7, #0]
 800646e:	429a      	cmp	r2, r3
 8006470:	d1ee      	bne.n	8006450 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2204      	movs	r2, #4
 8006478:	4013      	ands	r3, r2
 800647a:	d009      	beq.n	8006490 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800647c:	4b20      	ldr	r3, [pc, #128]	; (8006500 <HAL_RCC_ClockConfig+0x278>)
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	4a20      	ldr	r2, [pc, #128]	; (8006504 <HAL_RCC_ClockConfig+0x27c>)
 8006482:	4013      	ands	r3, r2
 8006484:	0019      	movs	r1, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	68da      	ldr	r2, [r3, #12]
 800648a:	4b1d      	ldr	r3, [pc, #116]	; (8006500 <HAL_RCC_ClockConfig+0x278>)
 800648c:	430a      	orrs	r2, r1
 800648e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2208      	movs	r2, #8
 8006496:	4013      	ands	r3, r2
 8006498:	d00a      	beq.n	80064b0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800649a:	4b19      	ldr	r3, [pc, #100]	; (8006500 <HAL_RCC_ClockConfig+0x278>)
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	4a1a      	ldr	r2, [pc, #104]	; (8006508 <HAL_RCC_ClockConfig+0x280>)
 80064a0:	4013      	ands	r3, r2
 80064a2:	0019      	movs	r1, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	00da      	lsls	r2, r3, #3
 80064aa:	4b15      	ldr	r3, [pc, #84]	; (8006500 <HAL_RCC_ClockConfig+0x278>)
 80064ac:	430a      	orrs	r2, r1
 80064ae:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80064b0:	f000 f832 	bl	8006518 <HAL_RCC_GetSysClockFreq>
 80064b4:	0001      	movs	r1, r0
 80064b6:	4b12      	ldr	r3, [pc, #72]	; (8006500 <HAL_RCC_ClockConfig+0x278>)
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	091b      	lsrs	r3, r3, #4
 80064bc:	220f      	movs	r2, #15
 80064be:	4013      	ands	r3, r2
 80064c0:	4a12      	ldr	r2, [pc, #72]	; (800650c <HAL_RCC_ClockConfig+0x284>)
 80064c2:	5cd3      	ldrb	r3, [r2, r3]
 80064c4:	000a      	movs	r2, r1
 80064c6:	40da      	lsrs	r2, r3
 80064c8:	4b11      	ldr	r3, [pc, #68]	; (8006510 <HAL_RCC_ClockConfig+0x288>)
 80064ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80064cc:	4b11      	ldr	r3, [pc, #68]	; (8006514 <HAL_RCC_ClockConfig+0x28c>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	250b      	movs	r5, #11
 80064d2:	197c      	adds	r4, r7, r5
 80064d4:	0018      	movs	r0, r3
 80064d6:	f7fd ff2b 	bl	8004330 <HAL_InitTick>
 80064da:	0003      	movs	r3, r0
 80064dc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80064de:	197b      	adds	r3, r7, r5
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d002      	beq.n	80064ec <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80064e6:	197b      	adds	r3, r7, r5
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	e000      	b.n	80064ee <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	0018      	movs	r0, r3
 80064f0:	46bd      	mov	sp, r7
 80064f2:	b004      	add	sp, #16
 80064f4:	bdb0      	pop	{r4, r5, r7, pc}
 80064f6:	46c0      	nop			; (mov r8, r8)
 80064f8:	40022000 	.word	0x40022000
 80064fc:	00001388 	.word	0x00001388
 8006500:	40021000 	.word	0x40021000
 8006504:	fffff8ff 	.word	0xfffff8ff
 8006508:	ffffc7ff 	.word	0xffffc7ff
 800650c:	0800aed8 	.word	0x0800aed8
 8006510:	20000038 	.word	0x20000038
 8006514:	2000003c 	.word	0x2000003c

08006518 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006518:	b5b0      	push	{r4, r5, r7, lr}
 800651a:	b08e      	sub	sp, #56	; 0x38
 800651c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800651e:	4b4c      	ldr	r3, [pc, #304]	; (8006650 <HAL_RCC_GetSysClockFreq+0x138>)
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006524:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006526:	230c      	movs	r3, #12
 8006528:	4013      	ands	r3, r2
 800652a:	2b0c      	cmp	r3, #12
 800652c:	d014      	beq.n	8006558 <HAL_RCC_GetSysClockFreq+0x40>
 800652e:	d900      	bls.n	8006532 <HAL_RCC_GetSysClockFreq+0x1a>
 8006530:	e07b      	b.n	800662a <HAL_RCC_GetSysClockFreq+0x112>
 8006532:	2b04      	cmp	r3, #4
 8006534:	d002      	beq.n	800653c <HAL_RCC_GetSysClockFreq+0x24>
 8006536:	2b08      	cmp	r3, #8
 8006538:	d00b      	beq.n	8006552 <HAL_RCC_GetSysClockFreq+0x3a>
 800653a:	e076      	b.n	800662a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800653c:	4b44      	ldr	r3, [pc, #272]	; (8006650 <HAL_RCC_GetSysClockFreq+0x138>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2210      	movs	r2, #16
 8006542:	4013      	ands	r3, r2
 8006544:	d002      	beq.n	800654c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8006546:	4b43      	ldr	r3, [pc, #268]	; (8006654 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006548:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800654a:	e07c      	b.n	8006646 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800654c:	4b42      	ldr	r3, [pc, #264]	; (8006658 <HAL_RCC_GetSysClockFreq+0x140>)
 800654e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006550:	e079      	b.n	8006646 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006552:	4b42      	ldr	r3, [pc, #264]	; (800665c <HAL_RCC_GetSysClockFreq+0x144>)
 8006554:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006556:	e076      	b.n	8006646 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655a:	0c9a      	lsrs	r2, r3, #18
 800655c:	230f      	movs	r3, #15
 800655e:	401a      	ands	r2, r3
 8006560:	4b3f      	ldr	r3, [pc, #252]	; (8006660 <HAL_RCC_GetSysClockFreq+0x148>)
 8006562:	5c9b      	ldrb	r3, [r3, r2]
 8006564:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8006566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006568:	0d9a      	lsrs	r2, r3, #22
 800656a:	2303      	movs	r3, #3
 800656c:	4013      	ands	r3, r2
 800656e:	3301      	adds	r3, #1
 8006570:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006572:	4b37      	ldr	r3, [pc, #220]	; (8006650 <HAL_RCC_GetSysClockFreq+0x138>)
 8006574:	68da      	ldr	r2, [r3, #12]
 8006576:	2380      	movs	r3, #128	; 0x80
 8006578:	025b      	lsls	r3, r3, #9
 800657a:	4013      	ands	r3, r2
 800657c:	d01a      	beq.n	80065b4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800657e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006580:	61bb      	str	r3, [r7, #24]
 8006582:	2300      	movs	r3, #0
 8006584:	61fb      	str	r3, [r7, #28]
 8006586:	4a35      	ldr	r2, [pc, #212]	; (800665c <HAL_RCC_GetSysClockFreq+0x144>)
 8006588:	2300      	movs	r3, #0
 800658a:	69b8      	ldr	r0, [r7, #24]
 800658c:	69f9      	ldr	r1, [r7, #28]
 800658e:	f7f9 ffe5 	bl	800055c <__aeabi_lmul>
 8006592:	0002      	movs	r2, r0
 8006594:	000b      	movs	r3, r1
 8006596:	0010      	movs	r0, r2
 8006598:	0019      	movs	r1, r3
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	613b      	str	r3, [r7, #16]
 800659e:	2300      	movs	r3, #0
 80065a0:	617b      	str	r3, [r7, #20]
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	f7f9 ffb9 	bl	800051c <__aeabi_uldivmod>
 80065aa:	0002      	movs	r2, r0
 80065ac:	000b      	movs	r3, r1
 80065ae:	0013      	movs	r3, r2
 80065b0:	637b      	str	r3, [r7, #52]	; 0x34
 80065b2:	e037      	b.n	8006624 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80065b4:	4b26      	ldr	r3, [pc, #152]	; (8006650 <HAL_RCC_GetSysClockFreq+0x138>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2210      	movs	r2, #16
 80065ba:	4013      	ands	r3, r2
 80065bc:	d01a      	beq.n	80065f4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80065be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c0:	60bb      	str	r3, [r7, #8]
 80065c2:	2300      	movs	r3, #0
 80065c4:	60fb      	str	r3, [r7, #12]
 80065c6:	4a23      	ldr	r2, [pc, #140]	; (8006654 <HAL_RCC_GetSysClockFreq+0x13c>)
 80065c8:	2300      	movs	r3, #0
 80065ca:	68b8      	ldr	r0, [r7, #8]
 80065cc:	68f9      	ldr	r1, [r7, #12]
 80065ce:	f7f9 ffc5 	bl	800055c <__aeabi_lmul>
 80065d2:	0002      	movs	r2, r0
 80065d4:	000b      	movs	r3, r1
 80065d6:	0010      	movs	r0, r2
 80065d8:	0019      	movs	r1, r3
 80065da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065dc:	603b      	str	r3, [r7, #0]
 80065de:	2300      	movs	r3, #0
 80065e0:	607b      	str	r3, [r7, #4]
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f7f9 ff99 	bl	800051c <__aeabi_uldivmod>
 80065ea:	0002      	movs	r2, r0
 80065ec:	000b      	movs	r3, r1
 80065ee:	0013      	movs	r3, r2
 80065f0:	637b      	str	r3, [r7, #52]	; 0x34
 80065f2:	e017      	b.n	8006624 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80065f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f6:	0018      	movs	r0, r3
 80065f8:	2300      	movs	r3, #0
 80065fa:	0019      	movs	r1, r3
 80065fc:	4a16      	ldr	r2, [pc, #88]	; (8006658 <HAL_RCC_GetSysClockFreq+0x140>)
 80065fe:	2300      	movs	r3, #0
 8006600:	f7f9 ffac 	bl	800055c <__aeabi_lmul>
 8006604:	0002      	movs	r2, r0
 8006606:	000b      	movs	r3, r1
 8006608:	0010      	movs	r0, r2
 800660a:	0019      	movs	r1, r3
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	001c      	movs	r4, r3
 8006610:	2300      	movs	r3, #0
 8006612:	001d      	movs	r5, r3
 8006614:	0022      	movs	r2, r4
 8006616:	002b      	movs	r3, r5
 8006618:	f7f9 ff80 	bl	800051c <__aeabi_uldivmod>
 800661c:	0002      	movs	r2, r0
 800661e:	000b      	movs	r3, r1
 8006620:	0013      	movs	r3, r2
 8006622:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8006624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006626:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006628:	e00d      	b.n	8006646 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800662a:	4b09      	ldr	r3, [pc, #36]	; (8006650 <HAL_RCC_GetSysClockFreq+0x138>)
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	0b5b      	lsrs	r3, r3, #13
 8006630:	2207      	movs	r2, #7
 8006632:	4013      	ands	r3, r2
 8006634:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8006636:	6a3b      	ldr	r3, [r7, #32]
 8006638:	3301      	adds	r3, #1
 800663a:	2280      	movs	r2, #128	; 0x80
 800663c:	0212      	lsls	r2, r2, #8
 800663e:	409a      	lsls	r2, r3
 8006640:	0013      	movs	r3, r2
 8006642:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006644:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006648:	0018      	movs	r0, r3
 800664a:	46bd      	mov	sp, r7
 800664c:	b00e      	add	sp, #56	; 0x38
 800664e:	bdb0      	pop	{r4, r5, r7, pc}
 8006650:	40021000 	.word	0x40021000
 8006654:	003d0900 	.word	0x003d0900
 8006658:	00f42400 	.word	0x00f42400
 800665c:	007a1200 	.word	0x007a1200
 8006660:	0800aef0 	.word	0x0800aef0

08006664 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006668:	4b02      	ldr	r3, [pc, #8]	; (8006674 <HAL_RCC_GetHCLKFreq+0x10>)
 800666a:	681b      	ldr	r3, [r3, #0]
}
 800666c:	0018      	movs	r0, r3
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	46c0      	nop			; (mov r8, r8)
 8006674:	20000038 	.word	0x20000038

08006678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800667c:	f7ff fff2 	bl	8006664 <HAL_RCC_GetHCLKFreq>
 8006680:	0001      	movs	r1, r0
 8006682:	4b06      	ldr	r3, [pc, #24]	; (800669c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	0a1b      	lsrs	r3, r3, #8
 8006688:	2207      	movs	r2, #7
 800668a:	4013      	ands	r3, r2
 800668c:	4a04      	ldr	r2, [pc, #16]	; (80066a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800668e:	5cd3      	ldrb	r3, [r2, r3]
 8006690:	40d9      	lsrs	r1, r3
 8006692:	000b      	movs	r3, r1
}
 8006694:	0018      	movs	r0, r3
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	46c0      	nop			; (mov r8, r8)
 800669c:	40021000 	.word	0x40021000
 80066a0:	0800aee8 	.word	0x0800aee8

080066a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80066a8:	f7ff ffdc 	bl	8006664 <HAL_RCC_GetHCLKFreq>
 80066ac:	0001      	movs	r1, r0
 80066ae:	4b06      	ldr	r3, [pc, #24]	; (80066c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	0adb      	lsrs	r3, r3, #11
 80066b4:	2207      	movs	r2, #7
 80066b6:	4013      	ands	r3, r2
 80066b8:	4a04      	ldr	r2, [pc, #16]	; (80066cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80066ba:	5cd3      	ldrb	r3, [r2, r3]
 80066bc:	40d9      	lsrs	r1, r3
 80066be:	000b      	movs	r3, r1
}
 80066c0:	0018      	movs	r0, r3
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	46c0      	nop			; (mov r8, r8)
 80066c8:	40021000 	.word	0x40021000
 80066cc:	0800aee8 	.word	0x0800aee8

080066d0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80066d8:	2317      	movs	r3, #23
 80066da:	18fb      	adds	r3, r7, r3
 80066dc:	2200      	movs	r2, #0
 80066de:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2220      	movs	r2, #32
 80066e6:	4013      	ands	r3, r2
 80066e8:	d106      	bne.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	2380      	movs	r3, #128	; 0x80
 80066f0:	011b      	lsls	r3, r3, #4
 80066f2:	4013      	ands	r3, r2
 80066f4:	d100      	bne.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80066f6:	e0d9      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066f8:	4ba4      	ldr	r3, [pc, #656]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80066fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066fc:	2380      	movs	r3, #128	; 0x80
 80066fe:	055b      	lsls	r3, r3, #21
 8006700:	4013      	ands	r3, r2
 8006702:	d10a      	bne.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006704:	4ba1      	ldr	r3, [pc, #644]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006706:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006708:	4ba0      	ldr	r3, [pc, #640]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800670a:	2180      	movs	r1, #128	; 0x80
 800670c:	0549      	lsls	r1, r1, #21
 800670e:	430a      	orrs	r2, r1
 8006710:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006712:	2317      	movs	r3, #23
 8006714:	18fb      	adds	r3, r7, r3
 8006716:	2201      	movs	r2, #1
 8006718:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800671a:	4b9d      	ldr	r3, [pc, #628]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	2380      	movs	r3, #128	; 0x80
 8006720:	005b      	lsls	r3, r3, #1
 8006722:	4013      	ands	r3, r2
 8006724:	d11a      	bne.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006726:	4b9a      	ldr	r3, [pc, #616]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	4b99      	ldr	r3, [pc, #612]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800672c:	2180      	movs	r1, #128	; 0x80
 800672e:	0049      	lsls	r1, r1, #1
 8006730:	430a      	orrs	r2, r1
 8006732:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006734:	f7fd fe42 	bl	80043bc <HAL_GetTick>
 8006738:	0003      	movs	r3, r0
 800673a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800673c:	e008      	b.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800673e:	f7fd fe3d 	bl	80043bc <HAL_GetTick>
 8006742:	0002      	movs	r2, r0
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	2b64      	cmp	r3, #100	; 0x64
 800674a:	d901      	bls.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e118      	b.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006750:	4b8f      	ldr	r3, [pc, #572]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	2380      	movs	r3, #128	; 0x80
 8006756:	005b      	lsls	r3, r3, #1
 8006758:	4013      	ands	r3, r2
 800675a:	d0f0      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800675c:	4b8b      	ldr	r3, [pc, #556]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	23c0      	movs	r3, #192	; 0xc0
 8006762:	039b      	lsls	r3, r3, #14
 8006764:	4013      	ands	r3, r2
 8006766:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	23c0      	movs	r3, #192	; 0xc0
 800676e:	039b      	lsls	r3, r3, #14
 8006770:	4013      	ands	r3, r2
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	429a      	cmp	r2, r3
 8006776:	d107      	bne.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	689a      	ldr	r2, [r3, #8]
 800677c:	23c0      	movs	r3, #192	; 0xc0
 800677e:	039b      	lsls	r3, r3, #14
 8006780:	4013      	ands	r3, r2
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	429a      	cmp	r2, r3
 8006786:	d013      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	23c0      	movs	r3, #192	; 0xc0
 800678e:	029b      	lsls	r3, r3, #10
 8006790:	401a      	ands	r2, r3
 8006792:	23c0      	movs	r3, #192	; 0xc0
 8006794:	029b      	lsls	r3, r3, #10
 8006796:	429a      	cmp	r2, r3
 8006798:	d10a      	bne.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800679a:	4b7c      	ldr	r3, [pc, #496]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	2380      	movs	r3, #128	; 0x80
 80067a0:	029b      	lsls	r3, r3, #10
 80067a2:	401a      	ands	r2, r3
 80067a4:	2380      	movs	r3, #128	; 0x80
 80067a6:	029b      	lsls	r3, r3, #10
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d101      	bne.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e0e8      	b.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80067b0:	4b76      	ldr	r3, [pc, #472]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80067b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067b4:	23c0      	movs	r3, #192	; 0xc0
 80067b6:	029b      	lsls	r3, r3, #10
 80067b8:	4013      	ands	r3, r2
 80067ba:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d049      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685a      	ldr	r2, [r3, #4]
 80067c6:	23c0      	movs	r3, #192	; 0xc0
 80067c8:	029b      	lsls	r3, r3, #10
 80067ca:	4013      	ands	r3, r2
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d004      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2220      	movs	r2, #32
 80067d8:	4013      	ands	r3, r2
 80067da:	d10d      	bne.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	689a      	ldr	r2, [r3, #8]
 80067e0:	23c0      	movs	r3, #192	; 0xc0
 80067e2:	029b      	lsls	r3, r3, #10
 80067e4:	4013      	ands	r3, r2
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d034      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	2380      	movs	r3, #128	; 0x80
 80067f2:	011b      	lsls	r3, r3, #4
 80067f4:	4013      	ands	r3, r2
 80067f6:	d02e      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80067f8:	4b64      	ldr	r3, [pc, #400]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80067fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067fc:	4a65      	ldr	r2, [pc, #404]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80067fe:	4013      	ands	r3, r2
 8006800:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006802:	4b62      	ldr	r3, [pc, #392]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006804:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006806:	4b61      	ldr	r3, [pc, #388]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006808:	2180      	movs	r1, #128	; 0x80
 800680a:	0309      	lsls	r1, r1, #12
 800680c:	430a      	orrs	r2, r1
 800680e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006810:	4b5e      	ldr	r3, [pc, #376]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006812:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006814:	4b5d      	ldr	r3, [pc, #372]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006816:	4960      	ldr	r1, [pc, #384]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8006818:	400a      	ands	r2, r1
 800681a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800681c:	4b5b      	ldr	r3, [pc, #364]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	2380      	movs	r3, #128	; 0x80
 8006826:	005b      	lsls	r3, r3, #1
 8006828:	4013      	ands	r3, r2
 800682a:	d014      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800682c:	f7fd fdc6 	bl	80043bc <HAL_GetTick>
 8006830:	0003      	movs	r3, r0
 8006832:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006834:	e009      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006836:	f7fd fdc1 	bl	80043bc <HAL_GetTick>
 800683a:	0002      	movs	r2, r0
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	4a56      	ldr	r2, [pc, #344]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d901      	bls.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e09b      	b.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800684a:	4b50      	ldr	r3, [pc, #320]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800684c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800684e:	2380      	movs	r3, #128	; 0x80
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4013      	ands	r3, r2
 8006854:	d0ef      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	685a      	ldr	r2, [r3, #4]
 800685a:	23c0      	movs	r3, #192	; 0xc0
 800685c:	029b      	lsls	r3, r3, #10
 800685e:	401a      	ands	r2, r3
 8006860:	23c0      	movs	r3, #192	; 0xc0
 8006862:	029b      	lsls	r3, r3, #10
 8006864:	429a      	cmp	r2, r3
 8006866:	d10c      	bne.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8006868:	4b48      	ldr	r3, [pc, #288]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a4c      	ldr	r2, [pc, #304]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800686e:	4013      	ands	r3, r2
 8006870:	0019      	movs	r1, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	23c0      	movs	r3, #192	; 0xc0
 8006878:	039b      	lsls	r3, r3, #14
 800687a:	401a      	ands	r2, r3
 800687c:	4b43      	ldr	r3, [pc, #268]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800687e:	430a      	orrs	r2, r1
 8006880:	601a      	str	r2, [r3, #0]
 8006882:	4b42      	ldr	r3, [pc, #264]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006884:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685a      	ldr	r2, [r3, #4]
 800688a:	23c0      	movs	r3, #192	; 0xc0
 800688c:	029b      	lsls	r3, r3, #10
 800688e:	401a      	ands	r2, r3
 8006890:	4b3e      	ldr	r3, [pc, #248]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006892:	430a      	orrs	r2, r1
 8006894:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006896:	2317      	movs	r3, #23
 8006898:	18fb      	adds	r3, r7, r3
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d105      	bne.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068a0:	4b3a      	ldr	r3, [pc, #232]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80068a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068a4:	4b39      	ldr	r3, [pc, #228]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80068a6:	493f      	ldr	r1, [pc, #252]	; (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80068a8:	400a      	ands	r2, r1
 80068aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2201      	movs	r2, #1
 80068b2:	4013      	ands	r3, r2
 80068b4:	d009      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80068b6:	4b35      	ldr	r3, [pc, #212]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80068b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ba:	2203      	movs	r2, #3
 80068bc:	4393      	bics	r3, r2
 80068be:	0019      	movs	r1, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	68da      	ldr	r2, [r3, #12]
 80068c4:	4b31      	ldr	r3, [pc, #196]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80068c6:	430a      	orrs	r2, r1
 80068c8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2202      	movs	r2, #2
 80068d0:	4013      	ands	r3, r2
 80068d2:	d009      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80068d4:	4b2d      	ldr	r3, [pc, #180]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80068d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068d8:	220c      	movs	r2, #12
 80068da:	4393      	bics	r3, r2
 80068dc:	0019      	movs	r1, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	691a      	ldr	r2, [r3, #16]
 80068e2:	4b2a      	ldr	r3, [pc, #168]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80068e4:	430a      	orrs	r2, r1
 80068e6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2204      	movs	r2, #4
 80068ee:	4013      	ands	r3, r2
 80068f0:	d009      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80068f2:	4b26      	ldr	r3, [pc, #152]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80068f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068f6:	4a2c      	ldr	r2, [pc, #176]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80068f8:	4013      	ands	r3, r2
 80068fa:	0019      	movs	r1, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	695a      	ldr	r2, [r3, #20]
 8006900:	4b22      	ldr	r3, [pc, #136]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006902:	430a      	orrs	r2, r1
 8006904:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2208      	movs	r2, #8
 800690c:	4013      	ands	r3, r2
 800690e:	d009      	beq.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006910:	4b1e      	ldr	r3, [pc, #120]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006914:	4a25      	ldr	r2, [pc, #148]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8006916:	4013      	ands	r3, r2
 8006918:	0019      	movs	r1, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	699a      	ldr	r2, [r3, #24]
 800691e:	4b1b      	ldr	r3, [pc, #108]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006920:	430a      	orrs	r2, r1
 8006922:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	2380      	movs	r3, #128	; 0x80
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	4013      	ands	r3, r2
 800692e:	d009      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006930:	4b16      	ldr	r3, [pc, #88]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006934:	4a17      	ldr	r2, [pc, #92]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006936:	4013      	ands	r3, r2
 8006938:	0019      	movs	r1, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	69da      	ldr	r2, [r3, #28]
 800693e:	4b13      	ldr	r3, [pc, #76]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006940:	430a      	orrs	r2, r1
 8006942:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2240      	movs	r2, #64	; 0x40
 800694a:	4013      	ands	r3, r2
 800694c:	d009      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800694e:	4b0f      	ldr	r3, [pc, #60]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006952:	4a17      	ldr	r2, [pc, #92]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006954:	4013      	ands	r3, r2
 8006956:	0019      	movs	r1, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800695c:	4b0b      	ldr	r3, [pc, #44]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800695e:	430a      	orrs	r2, r1
 8006960:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2280      	movs	r2, #128	; 0x80
 8006968:	4013      	ands	r3, r2
 800696a:	d009      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800696c:	4b07      	ldr	r3, [pc, #28]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800696e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006970:	4a10      	ldr	r2, [pc, #64]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006972:	4013      	ands	r3, r2
 8006974:	0019      	movs	r1, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a1a      	ldr	r2, [r3, #32]
 800697a:	4b04      	ldr	r3, [pc, #16]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800697c:	430a      	orrs	r2, r1
 800697e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	0018      	movs	r0, r3
 8006984:	46bd      	mov	sp, r7
 8006986:	b006      	add	sp, #24
 8006988:	bd80      	pop	{r7, pc}
 800698a:	46c0      	nop			; (mov r8, r8)
 800698c:	40021000 	.word	0x40021000
 8006990:	40007000 	.word	0x40007000
 8006994:	fffcffff 	.word	0xfffcffff
 8006998:	fff7ffff 	.word	0xfff7ffff
 800699c:	00001388 	.word	0x00001388
 80069a0:	ffcfffff 	.word	0xffcfffff
 80069a4:	efffffff 	.word	0xefffffff
 80069a8:	fffff3ff 	.word	0xfffff3ff
 80069ac:	ffffcfff 	.word	0xffffcfff
 80069b0:	fbffffff 	.word	0xfbffffff
 80069b4:	fff3ffff 	.word	0xfff3ffff

080069b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d101      	bne.n	80069ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e032      	b.n	8006a30 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2239      	movs	r2, #57	; 0x39
 80069ce:	5c9b      	ldrb	r3, [r3, r2]
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d107      	bne.n	80069e6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2238      	movs	r2, #56	; 0x38
 80069da:	2100      	movs	r1, #0
 80069dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	0018      	movs	r0, r3
 80069e2:	f7fd fb8d 	bl	8004100 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2239      	movs	r2, #57	; 0x39
 80069ea:	2102      	movs	r1, #2
 80069ec:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	3304      	adds	r3, #4
 80069f6:	0019      	movs	r1, r3
 80069f8:	0010      	movs	r0, r2
 80069fa:	f000 fab3 	bl	8006f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	223e      	movs	r2, #62	; 0x3e
 8006a02:	2101      	movs	r1, #1
 8006a04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	223a      	movs	r2, #58	; 0x3a
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	5499      	strb	r1, [r3, r2]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	223b      	movs	r2, #59	; 0x3b
 8006a12:	2101      	movs	r1, #1
 8006a14:	5499      	strb	r1, [r3, r2]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	223c      	movs	r2, #60	; 0x3c
 8006a1a:	2101      	movs	r1, #1
 8006a1c:	5499      	strb	r1, [r3, r2]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	223d      	movs	r2, #61	; 0x3d
 8006a22:	2101      	movs	r1, #1
 8006a24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2239      	movs	r2, #57	; 0x39
 8006a2a:	2101      	movs	r1, #1
 8006a2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	0018      	movs	r0, r3
 8006a32:	46bd      	mov	sp, r7
 8006a34:	b002      	add	sp, #8
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d108      	bne.n	8006a5a <HAL_TIM_PWM_Start_IT+0x22>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	223a      	movs	r2, #58	; 0x3a
 8006a4c:	5c9b      	ldrb	r3, [r3, r2]
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	3b01      	subs	r3, #1
 8006a52:	1e5a      	subs	r2, r3, #1
 8006a54:	4193      	sbcs	r3, r2
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	e01f      	b.n	8006a9a <HAL_TIM_PWM_Start_IT+0x62>
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	2b04      	cmp	r3, #4
 8006a5e:	d108      	bne.n	8006a72 <HAL_TIM_PWM_Start_IT+0x3a>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	223b      	movs	r2, #59	; 0x3b
 8006a64:	5c9b      	ldrb	r3, [r3, r2]
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	1e5a      	subs	r2, r3, #1
 8006a6c:	4193      	sbcs	r3, r2
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	e013      	b.n	8006a9a <HAL_TIM_PWM_Start_IT+0x62>
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	2b08      	cmp	r3, #8
 8006a76:	d108      	bne.n	8006a8a <HAL_TIM_PWM_Start_IT+0x52>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	223c      	movs	r2, #60	; 0x3c
 8006a7c:	5c9b      	ldrb	r3, [r3, r2]
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	3b01      	subs	r3, #1
 8006a82:	1e5a      	subs	r2, r3, #1
 8006a84:	4193      	sbcs	r3, r2
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	e007      	b.n	8006a9a <HAL_TIM_PWM_Start_IT+0x62>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	223d      	movs	r2, #61	; 0x3d
 8006a8e:	5c9b      	ldrb	r3, [r3, r2]
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	3b01      	subs	r3, #1
 8006a94:	1e5a      	subs	r2, r3, #1
 8006a96:	4193      	sbcs	r3, r2
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <HAL_TIM_PWM_Start_IT+0x6a>
  {
    return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e08a      	b.n	8006bb8 <HAL_TIM_PWM_Start_IT+0x180>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d104      	bne.n	8006ab2 <HAL_TIM_PWM_Start_IT+0x7a>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	223a      	movs	r2, #58	; 0x3a
 8006aac:	2102      	movs	r1, #2
 8006aae:	5499      	strb	r1, [r3, r2]
 8006ab0:	e013      	b.n	8006ada <HAL_TIM_PWM_Start_IT+0xa2>
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	2b04      	cmp	r3, #4
 8006ab6:	d104      	bne.n	8006ac2 <HAL_TIM_PWM_Start_IT+0x8a>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	223b      	movs	r2, #59	; 0x3b
 8006abc:	2102      	movs	r1, #2
 8006abe:	5499      	strb	r1, [r3, r2]
 8006ac0:	e00b      	b.n	8006ada <HAL_TIM_PWM_Start_IT+0xa2>
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	2b08      	cmp	r3, #8
 8006ac6:	d104      	bne.n	8006ad2 <HAL_TIM_PWM_Start_IT+0x9a>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	223c      	movs	r2, #60	; 0x3c
 8006acc:	2102      	movs	r1, #2
 8006ace:	5499      	strb	r1, [r3, r2]
 8006ad0:	e003      	b.n	8006ada <HAL_TIM_PWM_Start_IT+0xa2>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	223d      	movs	r2, #61	; 0x3d
 8006ad6:	2102      	movs	r1, #2
 8006ad8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	2b0c      	cmp	r3, #12
 8006ade:	d02a      	beq.n	8006b36 <HAL_TIM_PWM_Start_IT+0xfe>
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	2b0c      	cmp	r3, #12
 8006ae4:	d830      	bhi.n	8006b48 <HAL_TIM_PWM_Start_IT+0x110>
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	2b08      	cmp	r3, #8
 8006aea:	d01b      	beq.n	8006b24 <HAL_TIM_PWM_Start_IT+0xec>
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	2b08      	cmp	r3, #8
 8006af0:	d82a      	bhi.n	8006b48 <HAL_TIM_PWM_Start_IT+0x110>
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d003      	beq.n	8006b00 <HAL_TIM_PWM_Start_IT+0xc8>
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	d009      	beq.n	8006b12 <HAL_TIM_PWM_Start_IT+0xda>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 8006afe:	e023      	b.n	8006b48 <HAL_TIM_PWM_Start_IT+0x110>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68da      	ldr	r2, [r3, #12]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2102      	movs	r1, #2
 8006b0c:	430a      	orrs	r2, r1
 8006b0e:	60da      	str	r2, [r3, #12]
      break;
 8006b10:	e01b      	b.n	8006b4a <HAL_TIM_PWM_Start_IT+0x112>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68da      	ldr	r2, [r3, #12]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2104      	movs	r1, #4
 8006b1e:	430a      	orrs	r2, r1
 8006b20:	60da      	str	r2, [r3, #12]
      break;
 8006b22:	e012      	b.n	8006b4a <HAL_TIM_PWM_Start_IT+0x112>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68da      	ldr	r2, [r3, #12]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2108      	movs	r1, #8
 8006b30:	430a      	orrs	r2, r1
 8006b32:	60da      	str	r2, [r3, #12]
      break;
 8006b34:	e009      	b.n	8006b4a <HAL_TIM_PWM_Start_IT+0x112>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68da      	ldr	r2, [r3, #12]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2110      	movs	r1, #16
 8006b42:	430a      	orrs	r2, r1
 8006b44:	60da      	str	r2, [r3, #12]
      break;
 8006b46:	e000      	b.n	8006b4a <HAL_TIM_PWM_Start_IT+0x112>
      break;
 8006b48:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	6839      	ldr	r1, [r7, #0]
 8006b50:	2201      	movs	r2, #1
 8006b52:	0018      	movs	r0, r3
 8006b54:	f000 fb68 	bl	8007228 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	2380      	movs	r3, #128	; 0x80
 8006b5e:	05db      	lsls	r3, r3, #23
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d00e      	beq.n	8006b82 <HAL_TIM_PWM_Start_IT+0x14a>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a15      	ldr	r2, [pc, #84]	; (8006bc0 <HAL_TIM_PWM_Start_IT+0x188>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d009      	beq.n	8006b82 <HAL_TIM_PWM_Start_IT+0x14a>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a14      	ldr	r2, [pc, #80]	; (8006bc4 <HAL_TIM_PWM_Start_IT+0x18c>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d004      	beq.n	8006b82 <HAL_TIM_PWM_Start_IT+0x14a>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a12      	ldr	r2, [pc, #72]	; (8006bc8 <HAL_TIM_PWM_Start_IT+0x190>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d111      	bne.n	8006ba6 <HAL_TIM_PWM_Start_IT+0x16e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	2207      	movs	r2, #7
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2b06      	cmp	r3, #6
 8006b92:	d010      	beq.n	8006bb6 <HAL_TIM_PWM_Start_IT+0x17e>
    {
      __HAL_TIM_ENABLE(htim);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2101      	movs	r1, #1
 8006ba0:	430a      	orrs	r2, r1
 8006ba2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ba4:	e007      	b.n	8006bb6 <HAL_TIM_PWM_Start_IT+0x17e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2101      	movs	r1, #1
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	0018      	movs	r0, r3
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	b004      	add	sp, #16
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	40000400 	.word	0x40000400
 8006bc4:	40010800 	.word	0x40010800
 8006bc8:	40011400 	.word	0x40011400

08006bcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	2202      	movs	r2, #2
 8006bdc:	4013      	ands	r3, r2
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d124      	bne.n	8006c2c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	2202      	movs	r2, #2
 8006bea:	4013      	ands	r3, r2
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d11d      	bne.n	8006c2c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2203      	movs	r2, #3
 8006bf6:	4252      	negs	r2, r2
 8006bf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	2203      	movs	r2, #3
 8006c08:	4013      	ands	r3, r2
 8006c0a:	d004      	beq.n	8006c16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	0018      	movs	r0, r3
 8006c10:	f000 f990 	bl	8006f34 <HAL_TIM_IC_CaptureCallback>
 8006c14:	e007      	b.n	8006c26 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	0018      	movs	r0, r3
 8006c1a:	f000 f983 	bl	8006f24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	0018      	movs	r0, r3
 8006c22:	f000 f98f 	bl	8006f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	2204      	movs	r2, #4
 8006c34:	4013      	ands	r3, r2
 8006c36:	2b04      	cmp	r3, #4
 8006c38:	d125      	bne.n	8006c86 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	2204      	movs	r2, #4
 8006c42:	4013      	ands	r3, r2
 8006c44:	2b04      	cmp	r3, #4
 8006c46:	d11e      	bne.n	8006c86 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2205      	movs	r2, #5
 8006c4e:	4252      	negs	r2, r2
 8006c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2202      	movs	r2, #2
 8006c56:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	699a      	ldr	r2, [r3, #24]
 8006c5e:	23c0      	movs	r3, #192	; 0xc0
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4013      	ands	r3, r2
 8006c64:	d004      	beq.n	8006c70 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	0018      	movs	r0, r3
 8006c6a:	f000 f963 	bl	8006f34 <HAL_TIM_IC_CaptureCallback>
 8006c6e:	e007      	b.n	8006c80 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	0018      	movs	r0, r3
 8006c74:	f000 f956 	bl	8006f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	0018      	movs	r0, r3
 8006c7c:	f000 f962 	bl	8006f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	2208      	movs	r2, #8
 8006c8e:	4013      	ands	r3, r2
 8006c90:	2b08      	cmp	r3, #8
 8006c92:	d124      	bne.n	8006cde <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	2208      	movs	r2, #8
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	2b08      	cmp	r3, #8
 8006ca0:	d11d      	bne.n	8006cde <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2209      	movs	r2, #9
 8006ca8:	4252      	negs	r2, r2
 8006caa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2204      	movs	r2, #4
 8006cb0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	69db      	ldr	r3, [r3, #28]
 8006cb8:	2203      	movs	r2, #3
 8006cba:	4013      	ands	r3, r2
 8006cbc:	d004      	beq.n	8006cc8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	0018      	movs	r0, r3
 8006cc2:	f000 f937 	bl	8006f34 <HAL_TIM_IC_CaptureCallback>
 8006cc6:	e007      	b.n	8006cd8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	0018      	movs	r0, r3
 8006ccc:	f000 f92a 	bl	8006f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	0018      	movs	r0, r3
 8006cd4:	f000 f936 	bl	8006f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	2210      	movs	r2, #16
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	2b10      	cmp	r3, #16
 8006cea:	d125      	bne.n	8006d38 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	2210      	movs	r2, #16
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	2b10      	cmp	r3, #16
 8006cf8:	d11e      	bne.n	8006d38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2211      	movs	r2, #17
 8006d00:	4252      	negs	r2, r2
 8006d02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2208      	movs	r2, #8
 8006d08:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	69da      	ldr	r2, [r3, #28]
 8006d10:	23c0      	movs	r3, #192	; 0xc0
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4013      	ands	r3, r2
 8006d16:	d004      	beq.n	8006d22 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	0018      	movs	r0, r3
 8006d1c:	f000 f90a 	bl	8006f34 <HAL_TIM_IC_CaptureCallback>
 8006d20:	e007      	b.n	8006d32 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	0018      	movs	r0, r3
 8006d26:	f000 f8fd 	bl	8006f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	0018      	movs	r0, r3
 8006d2e:	f000 f909 	bl	8006f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	4013      	ands	r3, r2
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d10f      	bne.n	8006d66 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	4013      	ands	r3, r2
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d108      	bne.n	8006d66 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2202      	movs	r2, #2
 8006d5a:	4252      	negs	r2, r2
 8006d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	0018      	movs	r0, r3
 8006d62:	f000 f8d7 	bl	8006f14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	2240      	movs	r2, #64	; 0x40
 8006d6e:	4013      	ands	r3, r2
 8006d70:	2b40      	cmp	r3, #64	; 0x40
 8006d72:	d10f      	bne.n	8006d94 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	2240      	movs	r2, #64	; 0x40
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	2b40      	cmp	r3, #64	; 0x40
 8006d80:	d108      	bne.n	8006d94 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2241      	movs	r2, #65	; 0x41
 8006d88:	4252      	negs	r2, r2
 8006d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	0018      	movs	r0, r3
 8006d90:	f000 f8e0 	bl	8006f54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d94:	46c0      	nop			; (mov r8, r8)
 8006d96:	46bd      	mov	sp, r7
 8006d98:	b002      	add	sp, #8
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2238      	movs	r2, #56	; 0x38
 8006dac:	5c9b      	ldrb	r3, [r3, r2]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d101      	bne.n	8006db6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006db2:	2302      	movs	r3, #2
 8006db4:	e0a7      	b.n	8006f06 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2238      	movs	r2, #56	; 0x38
 8006dba:	2101      	movs	r1, #1
 8006dbc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2b0c      	cmp	r3, #12
 8006dc2:	d100      	bne.n	8006dc6 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8006dc4:	e076      	b.n	8006eb4 <HAL_TIM_PWM_ConfigChannel+0x118>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2b0c      	cmp	r3, #12
 8006dca:	d900      	bls.n	8006dce <HAL_TIM_PWM_ConfigChannel+0x32>
 8006dcc:	e095      	b.n	8006efa <HAL_TIM_PWM_ConfigChannel+0x15e>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2b08      	cmp	r3, #8
 8006dd2:	d04e      	beq.n	8006e72 <HAL_TIM_PWM_ConfigChannel+0xd6>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2b08      	cmp	r3, #8
 8006dd8:	d900      	bls.n	8006ddc <HAL_TIM_PWM_ConfigChannel+0x40>
 8006dda:	e08e      	b.n	8006efa <HAL_TIM_PWM_ConfigChannel+0x15e>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d003      	beq.n	8006dea <HAL_TIM_PWM_ConfigChannel+0x4e>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2b04      	cmp	r3, #4
 8006de6:	d021      	beq.n	8006e2c <HAL_TIM_PWM_ConfigChannel+0x90>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8006de8:	e087      	b.n	8006efa <HAL_TIM_PWM_ConfigChannel+0x15e>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	0011      	movs	r1, r2
 8006df2:	0018      	movs	r0, r3
 8006df4:	f000 f914 	bl	8007020 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	699a      	ldr	r2, [r3, #24]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2108      	movs	r1, #8
 8006e04:	430a      	orrs	r2, r1
 8006e06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	699a      	ldr	r2, [r3, #24]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2104      	movs	r1, #4
 8006e14:	438a      	bics	r2, r1
 8006e16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	6999      	ldr	r1, [r3, #24]
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	68da      	ldr	r2, [r3, #12]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	430a      	orrs	r2, r1
 8006e28:	619a      	str	r2, [r3, #24]
      break;
 8006e2a:	e067      	b.n	8006efc <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68ba      	ldr	r2, [r7, #8]
 8006e32:	0011      	movs	r1, r2
 8006e34:	0018      	movs	r0, r3
 8006e36:	f000 f92f 	bl	8007098 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	699a      	ldr	r2, [r3, #24]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2180      	movs	r1, #128	; 0x80
 8006e46:	0109      	lsls	r1, r1, #4
 8006e48:	430a      	orrs	r2, r1
 8006e4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	699a      	ldr	r2, [r3, #24]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	492e      	ldr	r1, [pc, #184]	; (8006f10 <HAL_TIM_PWM_ConfigChannel+0x174>)
 8006e58:	400a      	ands	r2, r1
 8006e5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	6999      	ldr	r1, [r3, #24]
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	021a      	lsls	r2, r3, #8
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	430a      	orrs	r2, r1
 8006e6e:	619a      	str	r2, [r3, #24]
      break;
 8006e70:	e044      	b.n	8006efc <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68ba      	ldr	r2, [r7, #8]
 8006e78:	0011      	movs	r1, r2
 8006e7a:	0018      	movs	r0, r3
 8006e7c:	f000 f94e 	bl	800711c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	69da      	ldr	r2, [r3, #28]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2108      	movs	r1, #8
 8006e8c:	430a      	orrs	r2, r1
 8006e8e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	69da      	ldr	r2, [r3, #28]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2104      	movs	r1, #4
 8006e9c:	438a      	bics	r2, r1
 8006e9e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	69d9      	ldr	r1, [r3, #28]
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	68da      	ldr	r2, [r3, #12]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	430a      	orrs	r2, r1
 8006eb0:	61da      	str	r2, [r3, #28]
      break;
 8006eb2:	e023      	b.n	8006efc <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	0011      	movs	r1, r2
 8006ebc:	0018      	movs	r0, r3
 8006ebe:	f000 f96d 	bl	800719c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	69da      	ldr	r2, [r3, #28]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2180      	movs	r1, #128	; 0x80
 8006ece:	0109      	lsls	r1, r1, #4
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	69da      	ldr	r2, [r3, #28]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	490c      	ldr	r1, [pc, #48]	; (8006f10 <HAL_TIM_PWM_ConfigChannel+0x174>)
 8006ee0:	400a      	ands	r2, r1
 8006ee2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	69d9      	ldr	r1, [r3, #28]
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	021a      	lsls	r2, r3, #8
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	61da      	str	r2, [r3, #28]
      break;
 8006ef8:	e000      	b.n	8006efc <HAL_TIM_PWM_ConfigChannel+0x160>
      break;
 8006efa:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2238      	movs	r2, #56	; 0x38
 8006f00:	2100      	movs	r1, #0
 8006f02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	0018      	movs	r0, r3
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	b004      	add	sp, #16
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	46c0      	nop			; (mov r8, r8)
 8006f10:	fffffbff 	.word	0xfffffbff

08006f14 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006f1c:	46c0      	nop			; (mov r8, r8)
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	b002      	add	sp, #8
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f2c:	46c0      	nop			; (mov r8, r8)
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	b002      	add	sp, #8
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f3c:	46c0      	nop			; (mov r8, r8)
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	b002      	add	sp, #8
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f4c:	46c0      	nop			; (mov r8, r8)
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	b002      	add	sp, #8
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f5c:	46c0      	nop			; (mov r8, r8)
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	b002      	add	sp, #8
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	2380      	movs	r3, #128	; 0x80
 8006f78:	05db      	lsls	r3, r3, #23
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d00b      	beq.n	8006f96 <TIM_Base_SetConfig+0x32>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a23      	ldr	r2, [pc, #140]	; (8007010 <TIM_Base_SetConfig+0xac>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d007      	beq.n	8006f96 <TIM_Base_SetConfig+0x32>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a22      	ldr	r2, [pc, #136]	; (8007014 <TIM_Base_SetConfig+0xb0>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d003      	beq.n	8006f96 <TIM_Base_SetConfig+0x32>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a21      	ldr	r2, [pc, #132]	; (8007018 <TIM_Base_SetConfig+0xb4>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d108      	bne.n	8006fa8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2270      	movs	r2, #112	; 0x70
 8006f9a:	4393      	bics	r3, r2
 8006f9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	2380      	movs	r3, #128	; 0x80
 8006fac:	05db      	lsls	r3, r3, #23
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d00b      	beq.n	8006fca <TIM_Base_SetConfig+0x66>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a16      	ldr	r2, [pc, #88]	; (8007010 <TIM_Base_SetConfig+0xac>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d007      	beq.n	8006fca <TIM_Base_SetConfig+0x66>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a15      	ldr	r2, [pc, #84]	; (8007014 <TIM_Base_SetConfig+0xb0>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d003      	beq.n	8006fca <TIM_Base_SetConfig+0x66>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a14      	ldr	r2, [pc, #80]	; (8007018 <TIM_Base_SetConfig+0xb4>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d108      	bne.n	8006fdc <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	4a13      	ldr	r2, [pc, #76]	; (800701c <TIM_Base_SetConfig+0xb8>)
 8006fce:	4013      	ands	r3, r2
 8006fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2280      	movs	r2, #128	; 0x80
 8006fe0:	4393      	bics	r3, r2
 8006fe2:	001a      	movs	r2, r3
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	689a      	ldr	r2, [r3, #8]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2201      	movs	r2, #1
 8007006:	615a      	str	r2, [r3, #20]
}
 8007008:	46c0      	nop			; (mov r8, r8)
 800700a:	46bd      	mov	sp, r7
 800700c:	b004      	add	sp, #16
 800700e:	bd80      	pop	{r7, pc}
 8007010:	40000400 	.word	0x40000400
 8007014:	40010800 	.word	0x40010800
 8007018:	40011400 	.word	0x40011400
 800701c:	fffffcff 	.word	0xfffffcff

08007020 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b086      	sub	sp, #24
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	2201      	movs	r2, #1
 8007030:	4393      	bics	r3, r2
 8007032:	001a      	movs	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a1b      	ldr	r3, [r3, #32]
 800703c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	699b      	ldr	r3, [r3, #24]
 8007048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2270      	movs	r2, #112	; 0x70
 800704e:	4393      	bics	r3, r2
 8007050:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2203      	movs	r2, #3
 8007056:	4393      	bics	r3, r2
 8007058:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	4313      	orrs	r3, r2
 8007062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	2202      	movs	r2, #2
 8007068:	4393      	bics	r3, r2
 800706a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	4313      	orrs	r3, r2
 8007074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	685a      	ldr	r2, [r3, #4]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	697a      	ldr	r2, [r7, #20]
 800708e:	621a      	str	r2, [r3, #32]
}
 8007090:	46c0      	nop			; (mov r8, r8)
 8007092:	46bd      	mov	sp, r7
 8007094:	b006      	add	sp, #24
 8007096:	bd80      	pop	{r7, pc}

08007098 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	2210      	movs	r2, #16
 80070a8:	4393      	bics	r3, r2
 80070aa:	001a      	movs	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6a1b      	ldr	r3, [r3, #32]
 80070b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	699b      	ldr	r3, [r3, #24]
 80070c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	4a13      	ldr	r2, [pc, #76]	; (8007114 <TIM_OC2_SetConfig+0x7c>)
 80070c6:	4013      	ands	r3, r2
 80070c8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	4a12      	ldr	r2, [pc, #72]	; (8007118 <TIM_OC2_SetConfig+0x80>)
 80070ce:	4013      	ands	r3, r2
 80070d0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	021b      	lsls	r3, r3, #8
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	4313      	orrs	r3, r2
 80070dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	2220      	movs	r2, #32
 80070e2:	4393      	bics	r3, r2
 80070e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	011b      	lsls	r3, r3, #4
 80070ec:	697a      	ldr	r2, [r7, #20]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	685a      	ldr	r2, [r3, #4]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	697a      	ldr	r2, [r7, #20]
 800710a:	621a      	str	r2, [r3, #32]
}
 800710c:	46c0      	nop			; (mov r8, r8)
 800710e:	46bd      	mov	sp, r7
 8007110:	b006      	add	sp, #24
 8007112:	bd80      	pop	{r7, pc}
 8007114:	ffff8fff 	.word	0xffff8fff
 8007118:	fffffcff 	.word	0xfffffcff

0800711c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a1b      	ldr	r3, [r3, #32]
 800712a:	4a1a      	ldr	r2, [pc, #104]	; (8007194 <TIM_OC3_SetConfig+0x78>)
 800712c:	401a      	ands	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2270      	movs	r2, #112	; 0x70
 8007148:	4393      	bics	r3, r2
 800714a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2203      	movs	r2, #3
 8007150:	4393      	bics	r3, r2
 8007152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	4313      	orrs	r3, r2
 800715c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	4a0d      	ldr	r2, [pc, #52]	; (8007198 <TIM_OC3_SetConfig+0x7c>)
 8007162:	4013      	ands	r3, r2
 8007164:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	021b      	lsls	r3, r3, #8
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	4313      	orrs	r3, r2
 8007170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	693a      	ldr	r2, [r7, #16]
 8007176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	685a      	ldr	r2, [r3, #4]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	621a      	str	r2, [r3, #32]
}
 800718c:	46c0      	nop			; (mov r8, r8)
 800718e:	46bd      	mov	sp, r7
 8007190:	b006      	add	sp, #24
 8007192:	bd80      	pop	{r7, pc}
 8007194:	fffffeff 	.word	0xfffffeff
 8007198:	fffffdff 	.word	0xfffffdff

0800719c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a1b      	ldr	r3, [r3, #32]
 80071aa:	4a1b      	ldr	r2, [pc, #108]	; (8007218 <TIM_OC4_SetConfig+0x7c>)
 80071ac:	401a      	ands	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	69db      	ldr	r3, [r3, #28]
 80071c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	4a15      	ldr	r2, [pc, #84]	; (800721c <TIM_OC4_SetConfig+0x80>)
 80071c8:	4013      	ands	r3, r2
 80071ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	4a14      	ldr	r2, [pc, #80]	; (8007220 <TIM_OC4_SetConfig+0x84>)
 80071d0:	4013      	ands	r3, r2
 80071d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	021b      	lsls	r3, r3, #8
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	4313      	orrs	r3, r2
 80071de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	4a10      	ldr	r2, [pc, #64]	; (8007224 <TIM_OC4_SetConfig+0x88>)
 80071e4:	4013      	ands	r3, r2
 80071e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	031b      	lsls	r3, r3, #12
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	693a      	ldr	r2, [r7, #16]
 80071f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	697a      	ldr	r2, [r7, #20]
 800720c:	621a      	str	r2, [r3, #32]
}
 800720e:	46c0      	nop			; (mov r8, r8)
 8007210:	46bd      	mov	sp, r7
 8007212:	b006      	add	sp, #24
 8007214:	bd80      	pop	{r7, pc}
 8007216:	46c0      	nop			; (mov r8, r8)
 8007218:	ffffefff 	.word	0xffffefff
 800721c:	ffff8fff 	.word	0xffff8fff
 8007220:	fffffcff 	.word	0xfffffcff
 8007224:	ffffdfff 	.word	0xffffdfff

08007228 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b086      	sub	sp, #24
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	221f      	movs	r2, #31
 8007238:	4013      	ands	r3, r2
 800723a:	2201      	movs	r2, #1
 800723c:	409a      	lsls	r2, r3
 800723e:	0013      	movs	r3, r2
 8007240:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	43d2      	mvns	r2, r2
 800724a:	401a      	ands	r2, r3
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6a1a      	ldr	r2, [r3, #32]
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	211f      	movs	r1, #31
 8007258:	400b      	ands	r3, r1
 800725a:	6879      	ldr	r1, [r7, #4]
 800725c:	4099      	lsls	r1, r3
 800725e:	000b      	movs	r3, r1
 8007260:	431a      	orrs	r2, r3
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	621a      	str	r2, [r3, #32]
}
 8007266:	46c0      	nop			; (mov r8, r8)
 8007268:	46bd      	mov	sp, r7
 800726a:	b006      	add	sp, #24
 800726c:	bd80      	pop	{r7, pc}
	...

08007270 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2238      	movs	r2, #56	; 0x38
 800727e:	5c9b      	ldrb	r3, [r3, r2]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d101      	bne.n	8007288 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007284:	2302      	movs	r3, #2
 8007286:	e047      	b.n	8007318 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2238      	movs	r2, #56	; 0x38
 800728c:	2101      	movs	r1, #1
 800728e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2239      	movs	r2, #57	; 0x39
 8007294:	2102      	movs	r1, #2
 8007296:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2270      	movs	r2, #112	; 0x70
 80072ac:	4393      	bics	r3, r2
 80072ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	2380      	movs	r3, #128	; 0x80
 80072c8:	05db      	lsls	r3, r3, #23
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d00e      	beq.n	80072ec <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a13      	ldr	r2, [pc, #76]	; (8007320 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d009      	beq.n	80072ec <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a11      	ldr	r2, [pc, #68]	; (8007324 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d004      	beq.n	80072ec <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a10      	ldr	r2, [pc, #64]	; (8007328 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d10c      	bne.n	8007306 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	2280      	movs	r2, #128	; 0x80
 80072f0:	4393      	bics	r3, r2
 80072f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2239      	movs	r2, #57	; 0x39
 800730a:	2101      	movs	r1, #1
 800730c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2238      	movs	r2, #56	; 0x38
 8007312:	2100      	movs	r1, #0
 8007314:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	0018      	movs	r0, r3
 800731a:	46bd      	mov	sp, r7
 800731c:	b004      	add	sp, #16
 800731e:	bd80      	pop	{r7, pc}
 8007320:	40000400 	.word	0x40000400
 8007324:	40010800 	.word	0x40010800
 8007328:	40011400 	.word	0x40011400

0800732c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d101      	bne.n	800733e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e044      	b.n	80073c8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007342:	2b00      	cmp	r3, #0
 8007344:	d107      	bne.n	8007356 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2274      	movs	r2, #116	; 0x74
 800734a:	2100      	movs	r1, #0
 800734c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	0018      	movs	r0, r3
 8007352:	f7fc ff5f 	bl	8004214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2224      	movs	r2, #36	; 0x24
 800735a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2101      	movs	r1, #1
 8007368:	438a      	bics	r2, r1
 800736a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	0018      	movs	r0, r3
 8007370:	f000 f8d8 	bl	8007524 <UART_SetConfig>
 8007374:	0003      	movs	r3, r0
 8007376:	2b01      	cmp	r3, #1
 8007378:	d101      	bne.n	800737e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e024      	b.n	80073c8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007382:	2b00      	cmp	r3, #0
 8007384:	d003      	beq.n	800738e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	0018      	movs	r0, r3
 800738a:	f000 fb89 	bl	8007aa0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	685a      	ldr	r2, [r3, #4]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	490d      	ldr	r1, [pc, #52]	; (80073d0 <HAL_UART_Init+0xa4>)
 800739a:	400a      	ands	r2, r1
 800739c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	689a      	ldr	r2, [r3, #8]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	212a      	movs	r1, #42	; 0x2a
 80073aa:	438a      	bics	r2, r1
 80073ac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2101      	movs	r1, #1
 80073ba:	430a      	orrs	r2, r1
 80073bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	0018      	movs	r0, r3
 80073c2:	f000 fc21 	bl	8007c08 <UART_CheckIdleState>
 80073c6:	0003      	movs	r3, r0
}
 80073c8:	0018      	movs	r0, r3
 80073ca:	46bd      	mov	sp, r7
 80073cc:	b002      	add	sp, #8
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	ffffb7ff 	.word	0xffffb7ff

080073d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b08a      	sub	sp, #40	; 0x28
 80073d8:	af02      	add	r7, sp, #8
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	603b      	str	r3, [r7, #0]
 80073e0:	1dbb      	adds	r3, r7, #6
 80073e2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073e8:	2b20      	cmp	r3, #32
 80073ea:	d000      	beq.n	80073ee <HAL_UART_Transmit+0x1a>
 80073ec:	e095      	b.n	800751a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d003      	beq.n	80073fc <HAL_UART_Transmit+0x28>
 80073f4:	1dbb      	adds	r3, r7, #6
 80073f6:	881b      	ldrh	r3, [r3, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d101      	bne.n	8007400 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	e08d      	b.n	800751c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	689a      	ldr	r2, [r3, #8]
 8007404:	2380      	movs	r3, #128	; 0x80
 8007406:	015b      	lsls	r3, r3, #5
 8007408:	429a      	cmp	r2, r3
 800740a:	d109      	bne.n	8007420 <HAL_UART_Transmit+0x4c>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d105      	bne.n	8007420 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	2201      	movs	r2, #1
 8007418:	4013      	ands	r3, r2
 800741a:	d001      	beq.n	8007420 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	e07d      	b.n	800751c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2274      	movs	r2, #116	; 0x74
 8007424:	5c9b      	ldrb	r3, [r3, r2]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d101      	bne.n	800742e <HAL_UART_Transmit+0x5a>
 800742a:	2302      	movs	r3, #2
 800742c:	e076      	b.n	800751c <HAL_UART_Transmit+0x148>
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2274      	movs	r2, #116	; 0x74
 8007432:	2101      	movs	r1, #1
 8007434:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2280      	movs	r2, #128	; 0x80
 800743a:	2100      	movs	r1, #0
 800743c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2221      	movs	r2, #33	; 0x21
 8007442:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007444:	f7fc ffba 	bl	80043bc <HAL_GetTick>
 8007448:	0003      	movs	r3, r0
 800744a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	1dba      	adds	r2, r7, #6
 8007450:	2150      	movs	r1, #80	; 0x50
 8007452:	8812      	ldrh	r2, [r2, #0]
 8007454:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	1dba      	adds	r2, r7, #6
 800745a:	2152      	movs	r1, #82	; 0x52
 800745c:	8812      	ldrh	r2, [r2, #0]
 800745e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	689a      	ldr	r2, [r3, #8]
 8007464:	2380      	movs	r3, #128	; 0x80
 8007466:	015b      	lsls	r3, r3, #5
 8007468:	429a      	cmp	r2, r3
 800746a:	d108      	bne.n	800747e <HAL_UART_Transmit+0xaa>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d104      	bne.n	800747e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8007474:	2300      	movs	r3, #0
 8007476:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	61bb      	str	r3, [r7, #24]
 800747c:	e003      	b.n	8007486 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007482:	2300      	movs	r3, #0
 8007484:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2274      	movs	r2, #116	; 0x74
 800748a:	2100      	movs	r1, #0
 800748c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800748e:	e02c      	b.n	80074ea <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007490:	697a      	ldr	r2, [r7, #20]
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	9300      	str	r3, [sp, #0]
 8007498:	0013      	movs	r3, r2
 800749a:	2200      	movs	r2, #0
 800749c:	2180      	movs	r1, #128	; 0x80
 800749e:	f000 fbfb 	bl	8007c98 <UART_WaitOnFlagUntilTimeout>
 80074a2:	1e03      	subs	r3, r0, #0
 80074a4:	d001      	beq.n	80074aa <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80074a6:	2303      	movs	r3, #3
 80074a8:	e038      	b.n	800751c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d10b      	bne.n	80074c8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	881b      	ldrh	r3, [r3, #0]
 80074b4:	001a      	movs	r2, r3
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	05d2      	lsls	r2, r2, #23
 80074bc:	0dd2      	lsrs	r2, r2, #23
 80074be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	3302      	adds	r3, #2
 80074c4:	61bb      	str	r3, [r7, #24]
 80074c6:	e007      	b.n	80074d8 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	781a      	ldrb	r2, [r3, #0]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	3301      	adds	r3, #1
 80074d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2252      	movs	r2, #82	; 0x52
 80074dc:	5a9b      	ldrh	r3, [r3, r2]
 80074de:	b29b      	uxth	r3, r3
 80074e0:	3b01      	subs	r3, #1
 80074e2:	b299      	uxth	r1, r3
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2252      	movs	r2, #82	; 0x52
 80074e8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2252      	movs	r2, #82	; 0x52
 80074ee:	5a9b      	ldrh	r3, [r3, r2]
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1cc      	bne.n	8007490 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	0013      	movs	r3, r2
 8007500:	2200      	movs	r2, #0
 8007502:	2140      	movs	r1, #64	; 0x40
 8007504:	f000 fbc8 	bl	8007c98 <UART_WaitOnFlagUntilTimeout>
 8007508:	1e03      	subs	r3, r0, #0
 800750a:	d001      	beq.n	8007510 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e005      	b.n	800751c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2220      	movs	r2, #32
 8007514:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	e000      	b.n	800751c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800751a:	2302      	movs	r3, #2
  }
}
 800751c:	0018      	movs	r0, r3
 800751e:	46bd      	mov	sp, r7
 8007520:	b008      	add	sp, #32
 8007522:	bd80      	pop	{r7, pc}

08007524 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007524:	b5b0      	push	{r4, r5, r7, lr}
 8007526:	b08e      	sub	sp, #56	; 0x38
 8007528:	af00      	add	r7, sp, #0
 800752a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800752c:	231a      	movs	r3, #26
 800752e:	2218      	movs	r2, #24
 8007530:	4694      	mov	ip, r2
 8007532:	44bc      	add	ip, r7
 8007534:	4463      	add	r3, ip
 8007536:	2200      	movs	r2, #0
 8007538:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	689a      	ldr	r2, [r3, #8]
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	431a      	orrs	r2, r3
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	695b      	ldr	r3, [r3, #20]
 8007548:	431a      	orrs	r2, r3
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	69db      	ldr	r3, [r3, #28]
 800754e:	4313      	orrs	r3, r2
 8007550:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4ab0      	ldr	r2, [pc, #704]	; (800781c <UART_SetConfig+0x2f8>)
 800755a:	4013      	ands	r3, r2
 800755c:	0019      	movs	r1, r3
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007564:	430a      	orrs	r2, r1
 8007566:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	4aac      	ldr	r2, [pc, #688]	; (8007820 <UART_SetConfig+0x2fc>)
 8007570:	4013      	ands	r3, r2
 8007572:	0019      	movs	r1, r3
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	68da      	ldr	r2, [r3, #12]
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	430a      	orrs	r2, r1
 800757e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	699b      	ldr	r3, [r3, #24]
 8007584:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4aa6      	ldr	r2, [pc, #664]	; (8007824 <UART_SetConfig+0x300>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d004      	beq.n	800759a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	6a1b      	ldr	r3, [r3, #32]
 8007594:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007596:	4313      	orrs	r3, r2
 8007598:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	4aa1      	ldr	r2, [pc, #644]	; (8007828 <UART_SetConfig+0x304>)
 80075a2:	4013      	ands	r3, r2
 80075a4:	0019      	movs	r1, r3
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075ac:	430a      	orrs	r2, r1
 80075ae:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a9d      	ldr	r2, [pc, #628]	; (800782c <UART_SetConfig+0x308>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d136      	bne.n	8007628 <UART_SetConfig+0x104>
 80075ba:	4b9d      	ldr	r3, [pc, #628]	; (8007830 <UART_SetConfig+0x30c>)
 80075bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075be:	2203      	movs	r2, #3
 80075c0:	4013      	ands	r3, r2
 80075c2:	2b03      	cmp	r3, #3
 80075c4:	d020      	beq.n	8007608 <UART_SetConfig+0xe4>
 80075c6:	d827      	bhi.n	8007618 <UART_SetConfig+0xf4>
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d00d      	beq.n	80075e8 <UART_SetConfig+0xc4>
 80075cc:	d824      	bhi.n	8007618 <UART_SetConfig+0xf4>
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d002      	beq.n	80075d8 <UART_SetConfig+0xb4>
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d010      	beq.n	80075f8 <UART_SetConfig+0xd4>
 80075d6:	e01f      	b.n	8007618 <UART_SetConfig+0xf4>
 80075d8:	231b      	movs	r3, #27
 80075da:	2218      	movs	r2, #24
 80075dc:	4694      	mov	ip, r2
 80075de:	44bc      	add	ip, r7
 80075e0:	4463      	add	r3, ip
 80075e2:	2201      	movs	r2, #1
 80075e4:	701a      	strb	r2, [r3, #0]
 80075e6:	e0c5      	b.n	8007774 <UART_SetConfig+0x250>
 80075e8:	231b      	movs	r3, #27
 80075ea:	2218      	movs	r2, #24
 80075ec:	4694      	mov	ip, r2
 80075ee:	44bc      	add	ip, r7
 80075f0:	4463      	add	r3, ip
 80075f2:	2202      	movs	r2, #2
 80075f4:	701a      	strb	r2, [r3, #0]
 80075f6:	e0bd      	b.n	8007774 <UART_SetConfig+0x250>
 80075f8:	231b      	movs	r3, #27
 80075fa:	2218      	movs	r2, #24
 80075fc:	4694      	mov	ip, r2
 80075fe:	44bc      	add	ip, r7
 8007600:	4463      	add	r3, ip
 8007602:	2204      	movs	r2, #4
 8007604:	701a      	strb	r2, [r3, #0]
 8007606:	e0b5      	b.n	8007774 <UART_SetConfig+0x250>
 8007608:	231b      	movs	r3, #27
 800760a:	2218      	movs	r2, #24
 800760c:	4694      	mov	ip, r2
 800760e:	44bc      	add	ip, r7
 8007610:	4463      	add	r3, ip
 8007612:	2208      	movs	r2, #8
 8007614:	701a      	strb	r2, [r3, #0]
 8007616:	e0ad      	b.n	8007774 <UART_SetConfig+0x250>
 8007618:	231b      	movs	r3, #27
 800761a:	2218      	movs	r2, #24
 800761c:	4694      	mov	ip, r2
 800761e:	44bc      	add	ip, r7
 8007620:	4463      	add	r3, ip
 8007622:	2210      	movs	r2, #16
 8007624:	701a      	strb	r2, [r3, #0]
 8007626:	e0a5      	b.n	8007774 <UART_SetConfig+0x250>
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a81      	ldr	r2, [pc, #516]	; (8007834 <UART_SetConfig+0x310>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d136      	bne.n	80076a0 <UART_SetConfig+0x17c>
 8007632:	4b7f      	ldr	r3, [pc, #508]	; (8007830 <UART_SetConfig+0x30c>)
 8007634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007636:	220c      	movs	r2, #12
 8007638:	4013      	ands	r3, r2
 800763a:	2b0c      	cmp	r3, #12
 800763c:	d020      	beq.n	8007680 <UART_SetConfig+0x15c>
 800763e:	d827      	bhi.n	8007690 <UART_SetConfig+0x16c>
 8007640:	2b08      	cmp	r3, #8
 8007642:	d00d      	beq.n	8007660 <UART_SetConfig+0x13c>
 8007644:	d824      	bhi.n	8007690 <UART_SetConfig+0x16c>
 8007646:	2b00      	cmp	r3, #0
 8007648:	d002      	beq.n	8007650 <UART_SetConfig+0x12c>
 800764a:	2b04      	cmp	r3, #4
 800764c:	d010      	beq.n	8007670 <UART_SetConfig+0x14c>
 800764e:	e01f      	b.n	8007690 <UART_SetConfig+0x16c>
 8007650:	231b      	movs	r3, #27
 8007652:	2218      	movs	r2, #24
 8007654:	4694      	mov	ip, r2
 8007656:	44bc      	add	ip, r7
 8007658:	4463      	add	r3, ip
 800765a:	2200      	movs	r2, #0
 800765c:	701a      	strb	r2, [r3, #0]
 800765e:	e089      	b.n	8007774 <UART_SetConfig+0x250>
 8007660:	231b      	movs	r3, #27
 8007662:	2218      	movs	r2, #24
 8007664:	4694      	mov	ip, r2
 8007666:	44bc      	add	ip, r7
 8007668:	4463      	add	r3, ip
 800766a:	2202      	movs	r2, #2
 800766c:	701a      	strb	r2, [r3, #0]
 800766e:	e081      	b.n	8007774 <UART_SetConfig+0x250>
 8007670:	231b      	movs	r3, #27
 8007672:	2218      	movs	r2, #24
 8007674:	4694      	mov	ip, r2
 8007676:	44bc      	add	ip, r7
 8007678:	4463      	add	r3, ip
 800767a:	2204      	movs	r2, #4
 800767c:	701a      	strb	r2, [r3, #0]
 800767e:	e079      	b.n	8007774 <UART_SetConfig+0x250>
 8007680:	231b      	movs	r3, #27
 8007682:	2218      	movs	r2, #24
 8007684:	4694      	mov	ip, r2
 8007686:	44bc      	add	ip, r7
 8007688:	4463      	add	r3, ip
 800768a:	2208      	movs	r2, #8
 800768c:	701a      	strb	r2, [r3, #0]
 800768e:	e071      	b.n	8007774 <UART_SetConfig+0x250>
 8007690:	231b      	movs	r3, #27
 8007692:	2218      	movs	r2, #24
 8007694:	4694      	mov	ip, r2
 8007696:	44bc      	add	ip, r7
 8007698:	4463      	add	r3, ip
 800769a:	2210      	movs	r2, #16
 800769c:	701a      	strb	r2, [r3, #0]
 800769e:	e069      	b.n	8007774 <UART_SetConfig+0x250>
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a64      	ldr	r2, [pc, #400]	; (8007838 <UART_SetConfig+0x314>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d107      	bne.n	80076ba <UART_SetConfig+0x196>
 80076aa:	231b      	movs	r3, #27
 80076ac:	2218      	movs	r2, #24
 80076ae:	4694      	mov	ip, r2
 80076b0:	44bc      	add	ip, r7
 80076b2:	4463      	add	r3, ip
 80076b4:	2200      	movs	r2, #0
 80076b6:	701a      	strb	r2, [r3, #0]
 80076b8:	e05c      	b.n	8007774 <UART_SetConfig+0x250>
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a5f      	ldr	r2, [pc, #380]	; (800783c <UART_SetConfig+0x318>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d107      	bne.n	80076d4 <UART_SetConfig+0x1b0>
 80076c4:	231b      	movs	r3, #27
 80076c6:	2218      	movs	r2, #24
 80076c8:	4694      	mov	ip, r2
 80076ca:	44bc      	add	ip, r7
 80076cc:	4463      	add	r3, ip
 80076ce:	2200      	movs	r2, #0
 80076d0:	701a      	strb	r2, [r3, #0]
 80076d2:	e04f      	b.n	8007774 <UART_SetConfig+0x250>
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a52      	ldr	r2, [pc, #328]	; (8007824 <UART_SetConfig+0x300>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d143      	bne.n	8007766 <UART_SetConfig+0x242>
 80076de:	4b54      	ldr	r3, [pc, #336]	; (8007830 <UART_SetConfig+0x30c>)
 80076e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076e2:	23c0      	movs	r3, #192	; 0xc0
 80076e4:	011b      	lsls	r3, r3, #4
 80076e6:	4013      	ands	r3, r2
 80076e8:	22c0      	movs	r2, #192	; 0xc0
 80076ea:	0112      	lsls	r2, r2, #4
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d02a      	beq.n	8007746 <UART_SetConfig+0x222>
 80076f0:	22c0      	movs	r2, #192	; 0xc0
 80076f2:	0112      	lsls	r2, r2, #4
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d82e      	bhi.n	8007756 <UART_SetConfig+0x232>
 80076f8:	2280      	movs	r2, #128	; 0x80
 80076fa:	0112      	lsls	r2, r2, #4
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d012      	beq.n	8007726 <UART_SetConfig+0x202>
 8007700:	2280      	movs	r2, #128	; 0x80
 8007702:	0112      	lsls	r2, r2, #4
 8007704:	4293      	cmp	r3, r2
 8007706:	d826      	bhi.n	8007756 <UART_SetConfig+0x232>
 8007708:	2b00      	cmp	r3, #0
 800770a:	d004      	beq.n	8007716 <UART_SetConfig+0x1f2>
 800770c:	2280      	movs	r2, #128	; 0x80
 800770e:	00d2      	lsls	r2, r2, #3
 8007710:	4293      	cmp	r3, r2
 8007712:	d010      	beq.n	8007736 <UART_SetConfig+0x212>
 8007714:	e01f      	b.n	8007756 <UART_SetConfig+0x232>
 8007716:	231b      	movs	r3, #27
 8007718:	2218      	movs	r2, #24
 800771a:	4694      	mov	ip, r2
 800771c:	44bc      	add	ip, r7
 800771e:	4463      	add	r3, ip
 8007720:	2200      	movs	r2, #0
 8007722:	701a      	strb	r2, [r3, #0]
 8007724:	e026      	b.n	8007774 <UART_SetConfig+0x250>
 8007726:	231b      	movs	r3, #27
 8007728:	2218      	movs	r2, #24
 800772a:	4694      	mov	ip, r2
 800772c:	44bc      	add	ip, r7
 800772e:	4463      	add	r3, ip
 8007730:	2202      	movs	r2, #2
 8007732:	701a      	strb	r2, [r3, #0]
 8007734:	e01e      	b.n	8007774 <UART_SetConfig+0x250>
 8007736:	231b      	movs	r3, #27
 8007738:	2218      	movs	r2, #24
 800773a:	4694      	mov	ip, r2
 800773c:	44bc      	add	ip, r7
 800773e:	4463      	add	r3, ip
 8007740:	2204      	movs	r2, #4
 8007742:	701a      	strb	r2, [r3, #0]
 8007744:	e016      	b.n	8007774 <UART_SetConfig+0x250>
 8007746:	231b      	movs	r3, #27
 8007748:	2218      	movs	r2, #24
 800774a:	4694      	mov	ip, r2
 800774c:	44bc      	add	ip, r7
 800774e:	4463      	add	r3, ip
 8007750:	2208      	movs	r2, #8
 8007752:	701a      	strb	r2, [r3, #0]
 8007754:	e00e      	b.n	8007774 <UART_SetConfig+0x250>
 8007756:	231b      	movs	r3, #27
 8007758:	2218      	movs	r2, #24
 800775a:	4694      	mov	ip, r2
 800775c:	44bc      	add	ip, r7
 800775e:	4463      	add	r3, ip
 8007760:	2210      	movs	r2, #16
 8007762:	701a      	strb	r2, [r3, #0]
 8007764:	e006      	b.n	8007774 <UART_SetConfig+0x250>
 8007766:	231b      	movs	r3, #27
 8007768:	2218      	movs	r2, #24
 800776a:	4694      	mov	ip, r2
 800776c:	44bc      	add	ip, r7
 800776e:	4463      	add	r3, ip
 8007770:	2210      	movs	r2, #16
 8007772:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a2a      	ldr	r2, [pc, #168]	; (8007824 <UART_SetConfig+0x300>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d000      	beq.n	8007780 <UART_SetConfig+0x25c>
 800777e:	e09e      	b.n	80078be <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007780:	231b      	movs	r3, #27
 8007782:	2218      	movs	r2, #24
 8007784:	4694      	mov	ip, r2
 8007786:	44bc      	add	ip, r7
 8007788:	4463      	add	r3, ip
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	2b08      	cmp	r3, #8
 800778e:	d01d      	beq.n	80077cc <UART_SetConfig+0x2a8>
 8007790:	dc20      	bgt.n	80077d4 <UART_SetConfig+0x2b0>
 8007792:	2b04      	cmp	r3, #4
 8007794:	d015      	beq.n	80077c2 <UART_SetConfig+0x29e>
 8007796:	dc1d      	bgt.n	80077d4 <UART_SetConfig+0x2b0>
 8007798:	2b00      	cmp	r3, #0
 800779a:	d002      	beq.n	80077a2 <UART_SetConfig+0x27e>
 800779c:	2b02      	cmp	r3, #2
 800779e:	d005      	beq.n	80077ac <UART_SetConfig+0x288>
 80077a0:	e018      	b.n	80077d4 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077a2:	f7fe ff69 	bl	8006678 <HAL_RCC_GetPCLK1Freq>
 80077a6:	0003      	movs	r3, r0
 80077a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077aa:	e01d      	b.n	80077e8 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077ac:	4b20      	ldr	r3, [pc, #128]	; (8007830 <UART_SetConfig+0x30c>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2210      	movs	r2, #16
 80077b2:	4013      	ands	r3, r2
 80077b4:	d002      	beq.n	80077bc <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80077b6:	4b22      	ldr	r3, [pc, #136]	; (8007840 <UART_SetConfig+0x31c>)
 80077b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80077ba:	e015      	b.n	80077e8 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 80077bc:	4b21      	ldr	r3, [pc, #132]	; (8007844 <UART_SetConfig+0x320>)
 80077be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077c0:	e012      	b.n	80077e8 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077c2:	f7fe fea9 	bl	8006518 <HAL_RCC_GetSysClockFreq>
 80077c6:	0003      	movs	r3, r0
 80077c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077ca:	e00d      	b.n	80077e8 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077cc:	2380      	movs	r3, #128	; 0x80
 80077ce:	021b      	lsls	r3, r3, #8
 80077d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077d2:	e009      	b.n	80077e8 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 80077d4:	2300      	movs	r3, #0
 80077d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80077d8:	231a      	movs	r3, #26
 80077da:	2218      	movs	r2, #24
 80077dc:	4694      	mov	ip, r2
 80077de:	44bc      	add	ip, r7
 80077e0:	4463      	add	r3, ip
 80077e2:	2201      	movs	r2, #1
 80077e4:	701a      	strb	r2, [r3, #0]
        break;
 80077e6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80077e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d100      	bne.n	80077f0 <UART_SetConfig+0x2cc>
 80077ee:	e13c      	b.n	8007a6a <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	685a      	ldr	r2, [r3, #4]
 80077f4:	0013      	movs	r3, r2
 80077f6:	005b      	lsls	r3, r3, #1
 80077f8:	189b      	adds	r3, r3, r2
 80077fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d305      	bcc.n	800780c <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007806:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007808:	429a      	cmp	r2, r3
 800780a:	d91d      	bls.n	8007848 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 800780c:	231a      	movs	r3, #26
 800780e:	2218      	movs	r2, #24
 8007810:	4694      	mov	ip, r2
 8007812:	44bc      	add	ip, r7
 8007814:	4463      	add	r3, ip
 8007816:	2201      	movs	r2, #1
 8007818:	701a      	strb	r2, [r3, #0]
 800781a:	e126      	b.n	8007a6a <UART_SetConfig+0x546>
 800781c:	efff69f3 	.word	0xefff69f3
 8007820:	ffffcfff 	.word	0xffffcfff
 8007824:	40004800 	.word	0x40004800
 8007828:	fffff4ff 	.word	0xfffff4ff
 800782c:	40013800 	.word	0x40013800
 8007830:	40021000 	.word	0x40021000
 8007834:	40004400 	.word	0x40004400
 8007838:	40004c00 	.word	0x40004c00
 800783c:	40005000 	.word	0x40005000
 8007840:	003d0900 	.word	0x003d0900
 8007844:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784a:	613b      	str	r3, [r7, #16]
 800784c:	2300      	movs	r3, #0
 800784e:	617b      	str	r3, [r7, #20]
 8007850:	6939      	ldr	r1, [r7, #16]
 8007852:	697a      	ldr	r2, [r7, #20]
 8007854:	000b      	movs	r3, r1
 8007856:	0e1b      	lsrs	r3, r3, #24
 8007858:	0010      	movs	r0, r2
 800785a:	0205      	lsls	r5, r0, #8
 800785c:	431d      	orrs	r5, r3
 800785e:	000b      	movs	r3, r1
 8007860:	021c      	lsls	r4, r3, #8
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	085b      	lsrs	r3, r3, #1
 8007868:	60bb      	str	r3, [r7, #8]
 800786a:	2300      	movs	r3, #0
 800786c:	60fb      	str	r3, [r7, #12]
 800786e:	68b8      	ldr	r0, [r7, #8]
 8007870:	68f9      	ldr	r1, [r7, #12]
 8007872:	1900      	adds	r0, r0, r4
 8007874:	4169      	adcs	r1, r5
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	603b      	str	r3, [r7, #0]
 800787c:	2300      	movs	r3, #0
 800787e:	607b      	str	r3, [r7, #4]
 8007880:	683a      	ldr	r2, [r7, #0]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f7f8 fe4a 	bl	800051c <__aeabi_uldivmod>
 8007888:	0002      	movs	r2, r0
 800788a:	000b      	movs	r3, r1
 800788c:	0013      	movs	r3, r2
 800788e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007890:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007892:	23c0      	movs	r3, #192	; 0xc0
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	429a      	cmp	r2, r3
 8007898:	d309      	bcc.n	80078ae <UART_SetConfig+0x38a>
 800789a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800789c:	2380      	movs	r3, #128	; 0x80
 800789e:	035b      	lsls	r3, r3, #13
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d204      	bcs.n	80078ae <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078aa:	60da      	str	r2, [r3, #12]
 80078ac:	e0dd      	b.n	8007a6a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80078ae:	231a      	movs	r3, #26
 80078b0:	2218      	movs	r2, #24
 80078b2:	4694      	mov	ip, r2
 80078b4:	44bc      	add	ip, r7
 80078b6:	4463      	add	r3, ip
 80078b8:	2201      	movs	r2, #1
 80078ba:	701a      	strb	r2, [r3, #0]
 80078bc:	e0d5      	b.n	8007a6a <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	69da      	ldr	r2, [r3, #28]
 80078c2:	2380      	movs	r3, #128	; 0x80
 80078c4:	021b      	lsls	r3, r3, #8
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d000      	beq.n	80078cc <UART_SetConfig+0x3a8>
 80078ca:	e074      	b.n	80079b6 <UART_SetConfig+0x492>
  {
    switch (clocksource)
 80078cc:	231b      	movs	r3, #27
 80078ce:	2218      	movs	r2, #24
 80078d0:	4694      	mov	ip, r2
 80078d2:	44bc      	add	ip, r7
 80078d4:	4463      	add	r3, ip
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	2b08      	cmp	r3, #8
 80078da:	d822      	bhi.n	8007922 <UART_SetConfig+0x3fe>
 80078dc:	009a      	lsls	r2, r3, #2
 80078de:	4b6b      	ldr	r3, [pc, #428]	; (8007a8c <UART_SetConfig+0x568>)
 80078e0:	18d3      	adds	r3, r2, r3
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078e6:	f7fe fec7 	bl	8006678 <HAL_RCC_GetPCLK1Freq>
 80078ea:	0003      	movs	r3, r0
 80078ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80078ee:	e022      	b.n	8007936 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078f0:	f7fe fed8 	bl	80066a4 <HAL_RCC_GetPCLK2Freq>
 80078f4:	0003      	movs	r3, r0
 80078f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80078f8:	e01d      	b.n	8007936 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078fa:	4b65      	ldr	r3, [pc, #404]	; (8007a90 <UART_SetConfig+0x56c>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2210      	movs	r2, #16
 8007900:	4013      	ands	r3, r2
 8007902:	d002      	beq.n	800790a <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007904:	4b63      	ldr	r3, [pc, #396]	; (8007a94 <UART_SetConfig+0x570>)
 8007906:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007908:	e015      	b.n	8007936 <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 800790a:	4b63      	ldr	r3, [pc, #396]	; (8007a98 <UART_SetConfig+0x574>)
 800790c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800790e:	e012      	b.n	8007936 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007910:	f7fe fe02 	bl	8006518 <HAL_RCC_GetSysClockFreq>
 8007914:	0003      	movs	r3, r0
 8007916:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007918:	e00d      	b.n	8007936 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800791a:	2380      	movs	r3, #128	; 0x80
 800791c:	021b      	lsls	r3, r3, #8
 800791e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007920:	e009      	b.n	8007936 <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8007922:	2300      	movs	r3, #0
 8007924:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007926:	231a      	movs	r3, #26
 8007928:	2218      	movs	r2, #24
 800792a:	4694      	mov	ip, r2
 800792c:	44bc      	add	ip, r7
 800792e:	4463      	add	r3, ip
 8007930:	2201      	movs	r2, #1
 8007932:	701a      	strb	r2, [r3, #0]
        break;
 8007934:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007938:	2b00      	cmp	r3, #0
 800793a:	d100      	bne.n	800793e <UART_SetConfig+0x41a>
 800793c:	e095      	b.n	8007a6a <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800793e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007940:	005a      	lsls	r2, r3, #1
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	085b      	lsrs	r3, r3, #1
 8007948:	18d2      	adds	r2, r2, r3
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	0019      	movs	r1, r3
 8007950:	0010      	movs	r0, r2
 8007952:	f7f8 fbf5 	bl	8000140 <__udivsi3>
 8007956:	0003      	movs	r3, r0
 8007958:	b29b      	uxth	r3, r3
 800795a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800795c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795e:	2b0f      	cmp	r3, #15
 8007960:	d921      	bls.n	80079a6 <UART_SetConfig+0x482>
 8007962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007964:	2380      	movs	r3, #128	; 0x80
 8007966:	025b      	lsls	r3, r3, #9
 8007968:	429a      	cmp	r2, r3
 800796a:	d21c      	bcs.n	80079a6 <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800796c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796e:	b29a      	uxth	r2, r3
 8007970:	200e      	movs	r0, #14
 8007972:	2418      	movs	r4, #24
 8007974:	193b      	adds	r3, r7, r4
 8007976:	181b      	adds	r3, r3, r0
 8007978:	210f      	movs	r1, #15
 800797a:	438a      	bics	r2, r1
 800797c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800797e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007980:	085b      	lsrs	r3, r3, #1
 8007982:	b29b      	uxth	r3, r3
 8007984:	2207      	movs	r2, #7
 8007986:	4013      	ands	r3, r2
 8007988:	b299      	uxth	r1, r3
 800798a:	193b      	adds	r3, r7, r4
 800798c:	181b      	adds	r3, r3, r0
 800798e:	193a      	adds	r2, r7, r4
 8007990:	1812      	adds	r2, r2, r0
 8007992:	8812      	ldrh	r2, [r2, #0]
 8007994:	430a      	orrs	r2, r1
 8007996:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	193a      	adds	r2, r7, r4
 800799e:	1812      	adds	r2, r2, r0
 80079a0:	8812      	ldrh	r2, [r2, #0]
 80079a2:	60da      	str	r2, [r3, #12]
 80079a4:	e061      	b.n	8007a6a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80079a6:	231a      	movs	r3, #26
 80079a8:	2218      	movs	r2, #24
 80079aa:	4694      	mov	ip, r2
 80079ac:	44bc      	add	ip, r7
 80079ae:	4463      	add	r3, ip
 80079b0:	2201      	movs	r2, #1
 80079b2:	701a      	strb	r2, [r3, #0]
 80079b4:	e059      	b.n	8007a6a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80079b6:	231b      	movs	r3, #27
 80079b8:	2218      	movs	r2, #24
 80079ba:	4694      	mov	ip, r2
 80079bc:	44bc      	add	ip, r7
 80079be:	4463      	add	r3, ip
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	2b08      	cmp	r3, #8
 80079c4:	d822      	bhi.n	8007a0c <UART_SetConfig+0x4e8>
 80079c6:	009a      	lsls	r2, r3, #2
 80079c8:	4b34      	ldr	r3, [pc, #208]	; (8007a9c <UART_SetConfig+0x578>)
 80079ca:	18d3      	adds	r3, r2, r3
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079d0:	f7fe fe52 	bl	8006678 <HAL_RCC_GetPCLK1Freq>
 80079d4:	0003      	movs	r3, r0
 80079d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079d8:	e022      	b.n	8007a20 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079da:	f7fe fe63 	bl	80066a4 <HAL_RCC_GetPCLK2Freq>
 80079de:	0003      	movs	r3, r0
 80079e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079e2:	e01d      	b.n	8007a20 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079e4:	4b2a      	ldr	r3, [pc, #168]	; (8007a90 <UART_SetConfig+0x56c>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2210      	movs	r2, #16
 80079ea:	4013      	ands	r3, r2
 80079ec:	d002      	beq.n	80079f4 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80079ee:	4b29      	ldr	r3, [pc, #164]	; (8007a94 <UART_SetConfig+0x570>)
 80079f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80079f2:	e015      	b.n	8007a20 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 80079f4:	4b28      	ldr	r3, [pc, #160]	; (8007a98 <UART_SetConfig+0x574>)
 80079f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079f8:	e012      	b.n	8007a20 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079fa:	f7fe fd8d 	bl	8006518 <HAL_RCC_GetSysClockFreq>
 80079fe:	0003      	movs	r3, r0
 8007a00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a02:	e00d      	b.n	8007a20 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a04:	2380      	movs	r3, #128	; 0x80
 8007a06:	021b      	lsls	r3, r3, #8
 8007a08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a0a:	e009      	b.n	8007a20 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007a10:	231a      	movs	r3, #26
 8007a12:	2218      	movs	r2, #24
 8007a14:	4694      	mov	ip, r2
 8007a16:	44bc      	add	ip, r7
 8007a18:	4463      	add	r3, ip
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	701a      	strb	r2, [r3, #0]
        break;
 8007a1e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d021      	beq.n	8007a6a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	085a      	lsrs	r2, r3, #1
 8007a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2e:	18d2      	adds	r2, r2, r3
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	0019      	movs	r1, r3
 8007a36:	0010      	movs	r0, r2
 8007a38:	f7f8 fb82 	bl	8000140 <__udivsi3>
 8007a3c:	0003      	movs	r3, r0
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a44:	2b0f      	cmp	r3, #15
 8007a46:	d909      	bls.n	8007a5c <UART_SetConfig+0x538>
 8007a48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a4a:	2380      	movs	r3, #128	; 0x80
 8007a4c:	025b      	lsls	r3, r3, #9
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d204      	bcs.n	8007a5c <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a58:	60da      	str	r2, [r3, #12]
 8007a5a:	e006      	b.n	8007a6a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8007a5c:	231a      	movs	r3, #26
 8007a5e:	2218      	movs	r2, #24
 8007a60:	4694      	mov	ip, r2
 8007a62:	44bc      	add	ip, r7
 8007a64:	4463      	add	r3, ip
 8007a66:	2201      	movs	r2, #1
 8007a68:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	2200      	movs	r2, #0
 8007a74:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007a76:	231a      	movs	r3, #26
 8007a78:	2218      	movs	r2, #24
 8007a7a:	4694      	mov	ip, r2
 8007a7c:	44bc      	add	ip, r7
 8007a7e:	4463      	add	r3, ip
 8007a80:	781b      	ldrb	r3, [r3, #0]
}
 8007a82:	0018      	movs	r0, r3
 8007a84:	46bd      	mov	sp, r7
 8007a86:	b00e      	add	sp, #56	; 0x38
 8007a88:	bdb0      	pop	{r4, r5, r7, pc}
 8007a8a:	46c0      	nop			; (mov r8, r8)
 8007a8c:	0800aefc 	.word	0x0800aefc
 8007a90:	40021000 	.word	0x40021000
 8007a94:	003d0900 	.word	0x003d0900
 8007a98:	00f42400 	.word	0x00f42400
 8007a9c:	0800af20 	.word	0x0800af20

08007aa0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aac:	2201      	movs	r2, #1
 8007aae:	4013      	ands	r3, r2
 8007ab0:	d00b      	beq.n	8007aca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	4a4a      	ldr	r2, [pc, #296]	; (8007be4 <UART_AdvFeatureConfig+0x144>)
 8007aba:	4013      	ands	r3, r2
 8007abc:	0019      	movs	r1, r3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	430a      	orrs	r2, r1
 8007ac8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ace:	2202      	movs	r2, #2
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	d00b      	beq.n	8007aec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	4a43      	ldr	r2, [pc, #268]	; (8007be8 <UART_AdvFeatureConfig+0x148>)
 8007adc:	4013      	ands	r3, r2
 8007ade:	0019      	movs	r1, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	430a      	orrs	r2, r1
 8007aea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af0:	2204      	movs	r2, #4
 8007af2:	4013      	ands	r3, r2
 8007af4:	d00b      	beq.n	8007b0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	4a3b      	ldr	r2, [pc, #236]	; (8007bec <UART_AdvFeatureConfig+0x14c>)
 8007afe:	4013      	ands	r3, r2
 8007b00:	0019      	movs	r1, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	430a      	orrs	r2, r1
 8007b0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b12:	2208      	movs	r2, #8
 8007b14:	4013      	ands	r3, r2
 8007b16:	d00b      	beq.n	8007b30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	4a34      	ldr	r2, [pc, #208]	; (8007bf0 <UART_AdvFeatureConfig+0x150>)
 8007b20:	4013      	ands	r3, r2
 8007b22:	0019      	movs	r1, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	430a      	orrs	r2, r1
 8007b2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b34:	2210      	movs	r2, #16
 8007b36:	4013      	ands	r3, r2
 8007b38:	d00b      	beq.n	8007b52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	4a2c      	ldr	r2, [pc, #176]	; (8007bf4 <UART_AdvFeatureConfig+0x154>)
 8007b42:	4013      	ands	r3, r2
 8007b44:	0019      	movs	r1, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	430a      	orrs	r2, r1
 8007b50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b56:	2220      	movs	r2, #32
 8007b58:	4013      	ands	r3, r2
 8007b5a:	d00b      	beq.n	8007b74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	4a25      	ldr	r2, [pc, #148]	; (8007bf8 <UART_AdvFeatureConfig+0x158>)
 8007b64:	4013      	ands	r3, r2
 8007b66:	0019      	movs	r1, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	430a      	orrs	r2, r1
 8007b72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b78:	2240      	movs	r2, #64	; 0x40
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	d01d      	beq.n	8007bba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	4a1d      	ldr	r2, [pc, #116]	; (8007bfc <UART_AdvFeatureConfig+0x15c>)
 8007b86:	4013      	ands	r3, r2
 8007b88:	0019      	movs	r1, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	430a      	orrs	r2, r1
 8007b94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b9a:	2380      	movs	r3, #128	; 0x80
 8007b9c:	035b      	lsls	r3, r3, #13
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d10b      	bne.n	8007bba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	4a15      	ldr	r2, [pc, #84]	; (8007c00 <UART_AdvFeatureConfig+0x160>)
 8007baa:	4013      	ands	r3, r2
 8007bac:	0019      	movs	r1, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	430a      	orrs	r2, r1
 8007bb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbe:	2280      	movs	r2, #128	; 0x80
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	d00b      	beq.n	8007bdc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	4a0e      	ldr	r2, [pc, #56]	; (8007c04 <UART_AdvFeatureConfig+0x164>)
 8007bcc:	4013      	ands	r3, r2
 8007bce:	0019      	movs	r1, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	430a      	orrs	r2, r1
 8007bda:	605a      	str	r2, [r3, #4]
  }
}
 8007bdc:	46c0      	nop			; (mov r8, r8)
 8007bde:	46bd      	mov	sp, r7
 8007be0:	b002      	add	sp, #8
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	fffdffff 	.word	0xfffdffff
 8007be8:	fffeffff 	.word	0xfffeffff
 8007bec:	fffbffff 	.word	0xfffbffff
 8007bf0:	ffff7fff 	.word	0xffff7fff
 8007bf4:	ffffefff 	.word	0xffffefff
 8007bf8:	ffffdfff 	.word	0xffffdfff
 8007bfc:	ffefffff 	.word	0xffefffff
 8007c00:	ff9fffff 	.word	0xff9fffff
 8007c04:	fff7ffff 	.word	0xfff7ffff

08007c08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b086      	sub	sp, #24
 8007c0c:	af02      	add	r7, sp, #8
 8007c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2280      	movs	r2, #128	; 0x80
 8007c14:	2100      	movs	r1, #0
 8007c16:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c18:	f7fc fbd0 	bl	80043bc <HAL_GetTick>
 8007c1c:	0003      	movs	r3, r0
 8007c1e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2208      	movs	r2, #8
 8007c28:	4013      	ands	r3, r2
 8007c2a:	2b08      	cmp	r3, #8
 8007c2c:	d10c      	bne.n	8007c48 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2280      	movs	r2, #128	; 0x80
 8007c32:	0391      	lsls	r1, r2, #14
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	4a17      	ldr	r2, [pc, #92]	; (8007c94 <UART_CheckIdleState+0x8c>)
 8007c38:	9200      	str	r2, [sp, #0]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f000 f82c 	bl	8007c98 <UART_WaitOnFlagUntilTimeout>
 8007c40:	1e03      	subs	r3, r0, #0
 8007c42:	d001      	beq.n	8007c48 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c44:	2303      	movs	r3, #3
 8007c46:	e021      	b.n	8007c8c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2204      	movs	r2, #4
 8007c50:	4013      	ands	r3, r2
 8007c52:	2b04      	cmp	r3, #4
 8007c54:	d10c      	bne.n	8007c70 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2280      	movs	r2, #128	; 0x80
 8007c5a:	03d1      	lsls	r1, r2, #15
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	4a0d      	ldr	r2, [pc, #52]	; (8007c94 <UART_CheckIdleState+0x8c>)
 8007c60:	9200      	str	r2, [sp, #0]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f000 f818 	bl	8007c98 <UART_WaitOnFlagUntilTimeout>
 8007c68:	1e03      	subs	r3, r0, #0
 8007c6a:	d001      	beq.n	8007c70 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	e00d      	b.n	8007c8c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2220      	movs	r2, #32
 8007c74:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2220      	movs	r2, #32
 8007c7a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2274      	movs	r2, #116	; 0x74
 8007c86:	2100      	movs	r1, #0
 8007c88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	0018      	movs	r0, r3
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	b004      	add	sp, #16
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	01ffffff 	.word	0x01ffffff

08007c98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	603b      	str	r3, [r7, #0]
 8007ca4:	1dfb      	adds	r3, r7, #7
 8007ca6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ca8:	e05e      	b.n	8007d68 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	3301      	adds	r3, #1
 8007cae:	d05b      	beq.n	8007d68 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cb0:	f7fc fb84 	bl	80043bc <HAL_GetTick>
 8007cb4:	0002      	movs	r2, r0
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	1ad3      	subs	r3, r2, r3
 8007cba:	69ba      	ldr	r2, [r7, #24]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d302      	bcc.n	8007cc6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d11b      	bne.n	8007cfe <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	492f      	ldr	r1, [pc, #188]	; (8007d90 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8007cd2:	400a      	ands	r2, r1
 8007cd4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	689a      	ldr	r2, [r3, #8]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2101      	movs	r1, #1
 8007ce2:	438a      	bics	r2, r1
 8007ce4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2220      	movs	r2, #32
 8007cea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2220      	movs	r2, #32
 8007cf0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2274      	movs	r2, #116	; 0x74
 8007cf6:	2100      	movs	r1, #0
 8007cf8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e044      	b.n	8007d88 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2204      	movs	r2, #4
 8007d06:	4013      	ands	r3, r2
 8007d08:	d02e      	beq.n	8007d68 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	69da      	ldr	r2, [r3, #28]
 8007d10:	2380      	movs	r3, #128	; 0x80
 8007d12:	011b      	lsls	r3, r3, #4
 8007d14:	401a      	ands	r2, r3
 8007d16:	2380      	movs	r3, #128	; 0x80
 8007d18:	011b      	lsls	r3, r3, #4
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d124      	bne.n	8007d68 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2280      	movs	r2, #128	; 0x80
 8007d24:	0112      	lsls	r2, r2, #4
 8007d26:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4917      	ldr	r1, [pc, #92]	; (8007d90 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8007d34:	400a      	ands	r2, r1
 8007d36:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	689a      	ldr	r2, [r3, #8]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2101      	movs	r1, #1
 8007d44:	438a      	bics	r2, r1
 8007d46:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2220      	movs	r2, #32
 8007d4c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2220      	movs	r2, #32
 8007d52:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2280      	movs	r2, #128	; 0x80
 8007d58:	2120      	movs	r1, #32
 8007d5a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2274      	movs	r2, #116	; 0x74
 8007d60:	2100      	movs	r1, #0
 8007d62:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007d64:	2303      	movs	r3, #3
 8007d66:	e00f      	b.n	8007d88 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	69db      	ldr	r3, [r3, #28]
 8007d6e:	68ba      	ldr	r2, [r7, #8]
 8007d70:	4013      	ands	r3, r2
 8007d72:	68ba      	ldr	r2, [r7, #8]
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	425a      	negs	r2, r3
 8007d78:	4153      	adcs	r3, r2
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	001a      	movs	r2, r3
 8007d7e:	1dfb      	adds	r3, r7, #7
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d091      	beq.n	8007caa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	0018      	movs	r0, r3
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	b004      	add	sp, #16
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	fffffe5f 	.word	0xfffffe5f

08007d94 <__errno>:
 8007d94:	4b01      	ldr	r3, [pc, #4]	; (8007d9c <__errno+0x8>)
 8007d96:	6818      	ldr	r0, [r3, #0]
 8007d98:	4770      	bx	lr
 8007d9a:	46c0      	nop			; (mov r8, r8)
 8007d9c:	20000044 	.word	0x20000044

08007da0 <__libc_init_array>:
 8007da0:	b570      	push	{r4, r5, r6, lr}
 8007da2:	2600      	movs	r6, #0
 8007da4:	4d0c      	ldr	r5, [pc, #48]	; (8007dd8 <__libc_init_array+0x38>)
 8007da6:	4c0d      	ldr	r4, [pc, #52]	; (8007ddc <__libc_init_array+0x3c>)
 8007da8:	1b64      	subs	r4, r4, r5
 8007daa:	10a4      	asrs	r4, r4, #2
 8007dac:	42a6      	cmp	r6, r4
 8007dae:	d109      	bne.n	8007dc4 <__libc_init_array+0x24>
 8007db0:	2600      	movs	r6, #0
 8007db2:	f002 ff6d 	bl	800ac90 <_init>
 8007db6:	4d0a      	ldr	r5, [pc, #40]	; (8007de0 <__libc_init_array+0x40>)
 8007db8:	4c0a      	ldr	r4, [pc, #40]	; (8007de4 <__libc_init_array+0x44>)
 8007dba:	1b64      	subs	r4, r4, r5
 8007dbc:	10a4      	asrs	r4, r4, #2
 8007dbe:	42a6      	cmp	r6, r4
 8007dc0:	d105      	bne.n	8007dce <__libc_init_array+0x2e>
 8007dc2:	bd70      	pop	{r4, r5, r6, pc}
 8007dc4:	00b3      	lsls	r3, r6, #2
 8007dc6:	58eb      	ldr	r3, [r5, r3]
 8007dc8:	4798      	blx	r3
 8007dca:	3601      	adds	r6, #1
 8007dcc:	e7ee      	b.n	8007dac <__libc_init_array+0xc>
 8007dce:	00b3      	lsls	r3, r6, #2
 8007dd0:	58eb      	ldr	r3, [r5, r3]
 8007dd2:	4798      	blx	r3
 8007dd4:	3601      	adds	r6, #1
 8007dd6:	e7f2      	b.n	8007dbe <__libc_init_array+0x1e>
 8007dd8:	0800b32c 	.word	0x0800b32c
 8007ddc:	0800b32c 	.word	0x0800b32c
 8007de0:	0800b32c 	.word	0x0800b32c
 8007de4:	0800b330 	.word	0x0800b330

08007de8 <memset>:
 8007de8:	0003      	movs	r3, r0
 8007dea:	1882      	adds	r2, r0, r2
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d100      	bne.n	8007df2 <memset+0xa>
 8007df0:	4770      	bx	lr
 8007df2:	7019      	strb	r1, [r3, #0]
 8007df4:	3301      	adds	r3, #1
 8007df6:	e7f9      	b.n	8007dec <memset+0x4>

08007df8 <__cvt>:
 8007df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dfa:	001e      	movs	r6, r3
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	0014      	movs	r4, r2
 8007e00:	b08b      	sub	sp, #44	; 0x2c
 8007e02:	429e      	cmp	r6, r3
 8007e04:	da04      	bge.n	8007e10 <__cvt+0x18>
 8007e06:	2180      	movs	r1, #128	; 0x80
 8007e08:	0609      	lsls	r1, r1, #24
 8007e0a:	1873      	adds	r3, r6, r1
 8007e0c:	001e      	movs	r6, r3
 8007e0e:	232d      	movs	r3, #45	; 0x2d
 8007e10:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e12:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007e14:	7013      	strb	r3, [r2, #0]
 8007e16:	2320      	movs	r3, #32
 8007e18:	2203      	movs	r2, #3
 8007e1a:	439f      	bics	r7, r3
 8007e1c:	2f46      	cmp	r7, #70	; 0x46
 8007e1e:	d007      	beq.n	8007e30 <__cvt+0x38>
 8007e20:	003b      	movs	r3, r7
 8007e22:	3b45      	subs	r3, #69	; 0x45
 8007e24:	4259      	negs	r1, r3
 8007e26:	414b      	adcs	r3, r1
 8007e28:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007e2a:	3a01      	subs	r2, #1
 8007e2c:	18cb      	adds	r3, r1, r3
 8007e2e:	9310      	str	r3, [sp, #64]	; 0x40
 8007e30:	ab09      	add	r3, sp, #36	; 0x24
 8007e32:	9304      	str	r3, [sp, #16]
 8007e34:	ab08      	add	r3, sp, #32
 8007e36:	9303      	str	r3, [sp, #12]
 8007e38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e3a:	9200      	str	r2, [sp, #0]
 8007e3c:	9302      	str	r3, [sp, #8]
 8007e3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e40:	0022      	movs	r2, r4
 8007e42:	9301      	str	r3, [sp, #4]
 8007e44:	0033      	movs	r3, r6
 8007e46:	f000 fcfd 	bl	8008844 <_dtoa_r>
 8007e4a:	0005      	movs	r5, r0
 8007e4c:	2f47      	cmp	r7, #71	; 0x47
 8007e4e:	d102      	bne.n	8007e56 <__cvt+0x5e>
 8007e50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e52:	07db      	lsls	r3, r3, #31
 8007e54:	d528      	bpl.n	8007ea8 <__cvt+0xb0>
 8007e56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e58:	18eb      	adds	r3, r5, r3
 8007e5a:	9307      	str	r3, [sp, #28]
 8007e5c:	2f46      	cmp	r7, #70	; 0x46
 8007e5e:	d114      	bne.n	8007e8a <__cvt+0x92>
 8007e60:	782b      	ldrb	r3, [r5, #0]
 8007e62:	2b30      	cmp	r3, #48	; 0x30
 8007e64:	d10c      	bne.n	8007e80 <__cvt+0x88>
 8007e66:	2200      	movs	r2, #0
 8007e68:	2300      	movs	r3, #0
 8007e6a:	0020      	movs	r0, r4
 8007e6c:	0031      	movs	r1, r6
 8007e6e:	f7f8 faed 	bl	800044c <__aeabi_dcmpeq>
 8007e72:	2800      	cmp	r0, #0
 8007e74:	d104      	bne.n	8007e80 <__cvt+0x88>
 8007e76:	2301      	movs	r3, #1
 8007e78:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007e7a:	1a9b      	subs	r3, r3, r2
 8007e7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007e7e:	6013      	str	r3, [r2, #0]
 8007e80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e82:	9a07      	ldr	r2, [sp, #28]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	18d3      	adds	r3, r2, r3
 8007e88:	9307      	str	r3, [sp, #28]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	0020      	movs	r0, r4
 8007e90:	0031      	movs	r1, r6
 8007e92:	f7f8 fadb 	bl	800044c <__aeabi_dcmpeq>
 8007e96:	2800      	cmp	r0, #0
 8007e98:	d001      	beq.n	8007e9e <__cvt+0xa6>
 8007e9a:	9b07      	ldr	r3, [sp, #28]
 8007e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8007e9e:	2230      	movs	r2, #48	; 0x30
 8007ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ea2:	9907      	ldr	r1, [sp, #28]
 8007ea4:	428b      	cmp	r3, r1
 8007ea6:	d306      	bcc.n	8007eb6 <__cvt+0xbe>
 8007ea8:	0028      	movs	r0, r5
 8007eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eac:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007eae:	1b5b      	subs	r3, r3, r5
 8007eb0:	6013      	str	r3, [r2, #0]
 8007eb2:	b00b      	add	sp, #44	; 0x2c
 8007eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eb6:	1c59      	adds	r1, r3, #1
 8007eb8:	9109      	str	r1, [sp, #36]	; 0x24
 8007eba:	701a      	strb	r2, [r3, #0]
 8007ebc:	e7f0      	b.n	8007ea0 <__cvt+0xa8>

08007ebe <__exponent>:
 8007ebe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ec0:	1c83      	adds	r3, r0, #2
 8007ec2:	b087      	sub	sp, #28
 8007ec4:	9303      	str	r3, [sp, #12]
 8007ec6:	0005      	movs	r5, r0
 8007ec8:	000c      	movs	r4, r1
 8007eca:	232b      	movs	r3, #43	; 0x2b
 8007ecc:	7002      	strb	r2, [r0, #0]
 8007ece:	2900      	cmp	r1, #0
 8007ed0:	da01      	bge.n	8007ed6 <__exponent+0x18>
 8007ed2:	424c      	negs	r4, r1
 8007ed4:	3302      	adds	r3, #2
 8007ed6:	706b      	strb	r3, [r5, #1]
 8007ed8:	2c09      	cmp	r4, #9
 8007eda:	dd31      	ble.n	8007f40 <__exponent+0x82>
 8007edc:	270a      	movs	r7, #10
 8007ede:	ab04      	add	r3, sp, #16
 8007ee0:	1dde      	adds	r6, r3, #7
 8007ee2:	0020      	movs	r0, r4
 8007ee4:	0039      	movs	r1, r7
 8007ee6:	9601      	str	r6, [sp, #4]
 8007ee8:	f7f8 fa9a 	bl	8000420 <__aeabi_idivmod>
 8007eec:	3e01      	subs	r6, #1
 8007eee:	3130      	adds	r1, #48	; 0x30
 8007ef0:	0020      	movs	r0, r4
 8007ef2:	7031      	strb	r1, [r6, #0]
 8007ef4:	0039      	movs	r1, r7
 8007ef6:	9402      	str	r4, [sp, #8]
 8007ef8:	f7f8 f9ac 	bl	8000254 <__divsi3>
 8007efc:	9b02      	ldr	r3, [sp, #8]
 8007efe:	0004      	movs	r4, r0
 8007f00:	2b63      	cmp	r3, #99	; 0x63
 8007f02:	dcee      	bgt.n	8007ee2 <__exponent+0x24>
 8007f04:	9b01      	ldr	r3, [sp, #4]
 8007f06:	3430      	adds	r4, #48	; 0x30
 8007f08:	1e9a      	subs	r2, r3, #2
 8007f0a:	0013      	movs	r3, r2
 8007f0c:	9903      	ldr	r1, [sp, #12]
 8007f0e:	7014      	strb	r4, [r2, #0]
 8007f10:	a804      	add	r0, sp, #16
 8007f12:	3007      	adds	r0, #7
 8007f14:	4298      	cmp	r0, r3
 8007f16:	d80e      	bhi.n	8007f36 <__exponent+0x78>
 8007f18:	ab04      	add	r3, sp, #16
 8007f1a:	3307      	adds	r3, #7
 8007f1c:	2000      	movs	r0, #0
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d804      	bhi.n	8007f2c <__exponent+0x6e>
 8007f22:	ab04      	add	r3, sp, #16
 8007f24:	3009      	adds	r0, #9
 8007f26:	18c0      	adds	r0, r0, r3
 8007f28:	9b01      	ldr	r3, [sp, #4]
 8007f2a:	1ac0      	subs	r0, r0, r3
 8007f2c:	9b03      	ldr	r3, [sp, #12]
 8007f2e:	1818      	adds	r0, r3, r0
 8007f30:	1b40      	subs	r0, r0, r5
 8007f32:	b007      	add	sp, #28
 8007f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f36:	7818      	ldrb	r0, [r3, #0]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	7008      	strb	r0, [r1, #0]
 8007f3c:	3101      	adds	r1, #1
 8007f3e:	e7e7      	b.n	8007f10 <__exponent+0x52>
 8007f40:	2330      	movs	r3, #48	; 0x30
 8007f42:	18e4      	adds	r4, r4, r3
 8007f44:	70ab      	strb	r3, [r5, #2]
 8007f46:	1d28      	adds	r0, r5, #4
 8007f48:	70ec      	strb	r4, [r5, #3]
 8007f4a:	e7f1      	b.n	8007f30 <__exponent+0x72>

08007f4c <_printf_float>:
 8007f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f4e:	b095      	sub	sp, #84	; 0x54
 8007f50:	000c      	movs	r4, r1
 8007f52:	9208      	str	r2, [sp, #32]
 8007f54:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007f56:	9309      	str	r3, [sp, #36]	; 0x24
 8007f58:	0007      	movs	r7, r0
 8007f5a:	f001 fa91 	bl	8009480 <_localeconv_r>
 8007f5e:	6803      	ldr	r3, [r0, #0]
 8007f60:	0018      	movs	r0, r3
 8007f62:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f64:	f7f8 f8d0 	bl	8000108 <strlen>
 8007f68:	2300      	movs	r3, #0
 8007f6a:	9312      	str	r3, [sp, #72]	; 0x48
 8007f6c:	7e23      	ldrb	r3, [r4, #24]
 8007f6e:	2207      	movs	r2, #7
 8007f70:	001e      	movs	r6, r3
 8007f72:	6823      	ldr	r3, [r4, #0]
 8007f74:	900d      	str	r0, [sp, #52]	; 0x34
 8007f76:	930c      	str	r3, [sp, #48]	; 0x30
 8007f78:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007f7a:	682b      	ldr	r3, [r5, #0]
 8007f7c:	05c9      	lsls	r1, r1, #23
 8007f7e:	d547      	bpl.n	8008010 <_printf_float+0xc4>
 8007f80:	189b      	adds	r3, r3, r2
 8007f82:	4393      	bics	r3, r2
 8007f84:	001a      	movs	r2, r3
 8007f86:	3208      	adds	r2, #8
 8007f88:	602a      	str	r2, [r5, #0]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	64a2      	str	r2, [r4, #72]	; 0x48
 8007f90:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007f92:	2201      	movs	r2, #1
 8007f94:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007f96:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8007f98:	930a      	str	r3, [sp, #40]	; 0x28
 8007f9a:	006b      	lsls	r3, r5, #1
 8007f9c:	085b      	lsrs	r3, r3, #1
 8007f9e:	930e      	str	r3, [sp, #56]	; 0x38
 8007fa0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007fa2:	4ba8      	ldr	r3, [pc, #672]	; (8008244 <_printf_float+0x2f8>)
 8007fa4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007fa6:	4252      	negs	r2, r2
 8007fa8:	f7fa fea0 	bl	8002cec <__aeabi_dcmpun>
 8007fac:	2800      	cmp	r0, #0
 8007fae:	d131      	bne.n	8008014 <_printf_float+0xc8>
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	4ba4      	ldr	r3, [pc, #656]	; (8008244 <_printf_float+0x2f8>)
 8007fb4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007fb6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007fb8:	4252      	negs	r2, r2
 8007fba:	f7f8 fa57 	bl	800046c <__aeabi_dcmple>
 8007fbe:	2800      	cmp	r0, #0
 8007fc0:	d128      	bne.n	8008014 <_printf_float+0xc8>
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	0029      	movs	r1, r5
 8007fc8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007fca:	f7f8 fa45 	bl	8000458 <__aeabi_dcmplt>
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	d003      	beq.n	8007fda <_printf_float+0x8e>
 8007fd2:	0023      	movs	r3, r4
 8007fd4:	222d      	movs	r2, #45	; 0x2d
 8007fd6:	3343      	adds	r3, #67	; 0x43
 8007fd8:	701a      	strb	r2, [r3, #0]
 8007fda:	4d9b      	ldr	r5, [pc, #620]	; (8008248 <_printf_float+0x2fc>)
 8007fdc:	2e47      	cmp	r6, #71	; 0x47
 8007fde:	d900      	bls.n	8007fe2 <_printf_float+0x96>
 8007fe0:	4d9a      	ldr	r5, [pc, #616]	; (800824c <_printf_float+0x300>)
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fe6:	6123      	str	r3, [r4, #16]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	439a      	bics	r2, r3
 8007fec:	2300      	movs	r3, #0
 8007fee:	6022      	str	r2, [r4, #0]
 8007ff0:	930a      	str	r3, [sp, #40]	; 0x28
 8007ff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ff4:	0021      	movs	r1, r4
 8007ff6:	9300      	str	r3, [sp, #0]
 8007ff8:	0038      	movs	r0, r7
 8007ffa:	9b08      	ldr	r3, [sp, #32]
 8007ffc:	aa13      	add	r2, sp, #76	; 0x4c
 8007ffe:	f000 f9f3 	bl	80083e8 <_printf_common>
 8008002:	1c43      	adds	r3, r0, #1
 8008004:	d000      	beq.n	8008008 <_printf_float+0xbc>
 8008006:	e09e      	b.n	8008146 <_printf_float+0x1fa>
 8008008:	2001      	movs	r0, #1
 800800a:	4240      	negs	r0, r0
 800800c:	b015      	add	sp, #84	; 0x54
 800800e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008010:	3307      	adds	r3, #7
 8008012:	e7b6      	b.n	8007f82 <_printf_float+0x36>
 8008014:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008016:	002b      	movs	r3, r5
 8008018:	0010      	movs	r0, r2
 800801a:	0029      	movs	r1, r5
 800801c:	f7fa fe66 	bl	8002cec <__aeabi_dcmpun>
 8008020:	2800      	cmp	r0, #0
 8008022:	d00a      	beq.n	800803a <_printf_float+0xee>
 8008024:	2d00      	cmp	r5, #0
 8008026:	da03      	bge.n	8008030 <_printf_float+0xe4>
 8008028:	0023      	movs	r3, r4
 800802a:	222d      	movs	r2, #45	; 0x2d
 800802c:	3343      	adds	r3, #67	; 0x43
 800802e:	701a      	strb	r2, [r3, #0]
 8008030:	4d87      	ldr	r5, [pc, #540]	; (8008250 <_printf_float+0x304>)
 8008032:	2e47      	cmp	r6, #71	; 0x47
 8008034:	d9d5      	bls.n	8007fe2 <_printf_float+0x96>
 8008036:	4d87      	ldr	r5, [pc, #540]	; (8008254 <_printf_float+0x308>)
 8008038:	e7d3      	b.n	8007fe2 <_printf_float+0x96>
 800803a:	2220      	movs	r2, #32
 800803c:	0031      	movs	r1, r6
 800803e:	6863      	ldr	r3, [r4, #4]
 8008040:	4391      	bics	r1, r2
 8008042:	910e      	str	r1, [sp, #56]	; 0x38
 8008044:	1c5a      	adds	r2, r3, #1
 8008046:	d147      	bne.n	80080d8 <_printf_float+0x18c>
 8008048:	3307      	adds	r3, #7
 800804a:	6063      	str	r3, [r4, #4]
 800804c:	2380      	movs	r3, #128	; 0x80
 800804e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008050:	00db      	lsls	r3, r3, #3
 8008052:	4313      	orrs	r3, r2
 8008054:	2200      	movs	r2, #0
 8008056:	9206      	str	r2, [sp, #24]
 8008058:	aa12      	add	r2, sp, #72	; 0x48
 800805a:	9205      	str	r2, [sp, #20]
 800805c:	aa11      	add	r2, sp, #68	; 0x44
 800805e:	9203      	str	r2, [sp, #12]
 8008060:	2223      	movs	r2, #35	; 0x23
 8008062:	a908      	add	r1, sp, #32
 8008064:	6023      	str	r3, [r4, #0]
 8008066:	9301      	str	r3, [sp, #4]
 8008068:	6863      	ldr	r3, [r4, #4]
 800806a:	1852      	adds	r2, r2, r1
 800806c:	9202      	str	r2, [sp, #8]
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	0038      	movs	r0, r7
 8008072:	002b      	movs	r3, r5
 8008074:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008076:	9604      	str	r6, [sp, #16]
 8008078:	f7ff febe 	bl	8007df8 <__cvt>
 800807c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800807e:	0005      	movs	r5, r0
 8008080:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008082:	2b47      	cmp	r3, #71	; 0x47
 8008084:	d108      	bne.n	8008098 <_printf_float+0x14c>
 8008086:	1ccb      	adds	r3, r1, #3
 8008088:	db02      	blt.n	8008090 <_printf_float+0x144>
 800808a:	6863      	ldr	r3, [r4, #4]
 800808c:	4299      	cmp	r1, r3
 800808e:	dd46      	ble.n	800811e <_printf_float+0x1d2>
 8008090:	0033      	movs	r3, r6
 8008092:	3b02      	subs	r3, #2
 8008094:	b2db      	uxtb	r3, r3
 8008096:	001e      	movs	r6, r3
 8008098:	2e65      	cmp	r6, #101	; 0x65
 800809a:	d824      	bhi.n	80080e6 <_printf_float+0x19a>
 800809c:	0020      	movs	r0, r4
 800809e:	0032      	movs	r2, r6
 80080a0:	3901      	subs	r1, #1
 80080a2:	3050      	adds	r0, #80	; 0x50
 80080a4:	9111      	str	r1, [sp, #68]	; 0x44
 80080a6:	f7ff ff0a 	bl	8007ebe <__exponent>
 80080aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80080ac:	900a      	str	r0, [sp, #40]	; 0x28
 80080ae:	1813      	adds	r3, r2, r0
 80080b0:	6123      	str	r3, [r4, #16]
 80080b2:	2a01      	cmp	r2, #1
 80080b4:	dc02      	bgt.n	80080bc <_printf_float+0x170>
 80080b6:	6822      	ldr	r2, [r4, #0]
 80080b8:	07d2      	lsls	r2, r2, #31
 80080ba:	d501      	bpl.n	80080c0 <_printf_float+0x174>
 80080bc:	3301      	adds	r3, #1
 80080be:	6123      	str	r3, [r4, #16]
 80080c0:	2323      	movs	r3, #35	; 0x23
 80080c2:	aa08      	add	r2, sp, #32
 80080c4:	189b      	adds	r3, r3, r2
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d100      	bne.n	80080ce <_printf_float+0x182>
 80080cc:	e791      	b.n	8007ff2 <_printf_float+0xa6>
 80080ce:	0023      	movs	r3, r4
 80080d0:	222d      	movs	r2, #45	; 0x2d
 80080d2:	3343      	adds	r3, #67	; 0x43
 80080d4:	701a      	strb	r2, [r3, #0]
 80080d6:	e78c      	b.n	8007ff2 <_printf_float+0xa6>
 80080d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80080da:	2a47      	cmp	r2, #71	; 0x47
 80080dc:	d1b6      	bne.n	800804c <_printf_float+0x100>
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d1b4      	bne.n	800804c <_printf_float+0x100>
 80080e2:	3301      	adds	r3, #1
 80080e4:	e7b1      	b.n	800804a <_printf_float+0xfe>
 80080e6:	2e66      	cmp	r6, #102	; 0x66
 80080e8:	d11b      	bne.n	8008122 <_printf_float+0x1d6>
 80080ea:	6863      	ldr	r3, [r4, #4]
 80080ec:	2900      	cmp	r1, #0
 80080ee:	dd0d      	ble.n	800810c <_printf_float+0x1c0>
 80080f0:	6121      	str	r1, [r4, #16]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d102      	bne.n	80080fc <_printf_float+0x1b0>
 80080f6:	6822      	ldr	r2, [r4, #0]
 80080f8:	07d2      	lsls	r2, r2, #31
 80080fa:	d502      	bpl.n	8008102 <_printf_float+0x1b6>
 80080fc:	3301      	adds	r3, #1
 80080fe:	1859      	adds	r1, r3, r1
 8008100:	6121      	str	r1, [r4, #16]
 8008102:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008104:	65a3      	str	r3, [r4, #88]	; 0x58
 8008106:	2300      	movs	r3, #0
 8008108:	930a      	str	r3, [sp, #40]	; 0x28
 800810a:	e7d9      	b.n	80080c0 <_printf_float+0x174>
 800810c:	2b00      	cmp	r3, #0
 800810e:	d103      	bne.n	8008118 <_printf_float+0x1cc>
 8008110:	2201      	movs	r2, #1
 8008112:	6821      	ldr	r1, [r4, #0]
 8008114:	4211      	tst	r1, r2
 8008116:	d000      	beq.n	800811a <_printf_float+0x1ce>
 8008118:	1c9a      	adds	r2, r3, #2
 800811a:	6122      	str	r2, [r4, #16]
 800811c:	e7f1      	b.n	8008102 <_printf_float+0x1b6>
 800811e:	2367      	movs	r3, #103	; 0x67
 8008120:	001e      	movs	r6, r3
 8008122:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008124:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008126:	4293      	cmp	r3, r2
 8008128:	db06      	blt.n	8008138 <_printf_float+0x1ec>
 800812a:	6822      	ldr	r2, [r4, #0]
 800812c:	6123      	str	r3, [r4, #16]
 800812e:	07d2      	lsls	r2, r2, #31
 8008130:	d5e7      	bpl.n	8008102 <_printf_float+0x1b6>
 8008132:	3301      	adds	r3, #1
 8008134:	6123      	str	r3, [r4, #16]
 8008136:	e7e4      	b.n	8008102 <_printf_float+0x1b6>
 8008138:	2101      	movs	r1, #1
 800813a:	2b00      	cmp	r3, #0
 800813c:	dc01      	bgt.n	8008142 <_printf_float+0x1f6>
 800813e:	1849      	adds	r1, r1, r1
 8008140:	1ac9      	subs	r1, r1, r3
 8008142:	1852      	adds	r2, r2, r1
 8008144:	e7e9      	b.n	800811a <_printf_float+0x1ce>
 8008146:	6822      	ldr	r2, [r4, #0]
 8008148:	0553      	lsls	r3, r2, #21
 800814a:	d408      	bmi.n	800815e <_printf_float+0x212>
 800814c:	6923      	ldr	r3, [r4, #16]
 800814e:	002a      	movs	r2, r5
 8008150:	0038      	movs	r0, r7
 8008152:	9908      	ldr	r1, [sp, #32]
 8008154:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008156:	47a8      	blx	r5
 8008158:	1c43      	adds	r3, r0, #1
 800815a:	d129      	bne.n	80081b0 <_printf_float+0x264>
 800815c:	e754      	b.n	8008008 <_printf_float+0xbc>
 800815e:	2e65      	cmp	r6, #101	; 0x65
 8008160:	d800      	bhi.n	8008164 <_printf_float+0x218>
 8008162:	e0ec      	b.n	800833e <_printf_float+0x3f2>
 8008164:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008166:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008168:	2200      	movs	r2, #0
 800816a:	2300      	movs	r3, #0
 800816c:	f7f8 f96e 	bl	800044c <__aeabi_dcmpeq>
 8008170:	2800      	cmp	r0, #0
 8008172:	d034      	beq.n	80081de <_printf_float+0x292>
 8008174:	2301      	movs	r3, #1
 8008176:	0038      	movs	r0, r7
 8008178:	4a37      	ldr	r2, [pc, #220]	; (8008258 <_printf_float+0x30c>)
 800817a:	9908      	ldr	r1, [sp, #32]
 800817c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800817e:	47a8      	blx	r5
 8008180:	1c43      	adds	r3, r0, #1
 8008182:	d100      	bne.n	8008186 <_printf_float+0x23a>
 8008184:	e740      	b.n	8008008 <_printf_float+0xbc>
 8008186:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008188:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800818a:	4293      	cmp	r3, r2
 800818c:	db02      	blt.n	8008194 <_printf_float+0x248>
 800818e:	6823      	ldr	r3, [r4, #0]
 8008190:	07db      	lsls	r3, r3, #31
 8008192:	d50d      	bpl.n	80081b0 <_printf_float+0x264>
 8008194:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008196:	0038      	movs	r0, r7
 8008198:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800819a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800819c:	9908      	ldr	r1, [sp, #32]
 800819e:	47a8      	blx	r5
 80081a0:	2500      	movs	r5, #0
 80081a2:	1c43      	adds	r3, r0, #1
 80081a4:	d100      	bne.n	80081a8 <_printf_float+0x25c>
 80081a6:	e72f      	b.n	8008008 <_printf_float+0xbc>
 80081a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80081aa:	3b01      	subs	r3, #1
 80081ac:	42ab      	cmp	r3, r5
 80081ae:	dc0a      	bgt.n	80081c6 <_printf_float+0x27a>
 80081b0:	6823      	ldr	r3, [r4, #0]
 80081b2:	079b      	lsls	r3, r3, #30
 80081b4:	d500      	bpl.n	80081b8 <_printf_float+0x26c>
 80081b6:	e114      	b.n	80083e2 <_printf_float+0x496>
 80081b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80081ba:	68e0      	ldr	r0, [r4, #12]
 80081bc:	4298      	cmp	r0, r3
 80081be:	db00      	blt.n	80081c2 <_printf_float+0x276>
 80081c0:	e724      	b.n	800800c <_printf_float+0xc0>
 80081c2:	0018      	movs	r0, r3
 80081c4:	e722      	b.n	800800c <_printf_float+0xc0>
 80081c6:	0022      	movs	r2, r4
 80081c8:	2301      	movs	r3, #1
 80081ca:	0038      	movs	r0, r7
 80081cc:	9908      	ldr	r1, [sp, #32]
 80081ce:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80081d0:	321a      	adds	r2, #26
 80081d2:	47b0      	blx	r6
 80081d4:	1c43      	adds	r3, r0, #1
 80081d6:	d100      	bne.n	80081da <_printf_float+0x28e>
 80081d8:	e716      	b.n	8008008 <_printf_float+0xbc>
 80081da:	3501      	adds	r5, #1
 80081dc:	e7e4      	b.n	80081a8 <_printf_float+0x25c>
 80081de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	dc3b      	bgt.n	800825c <_printf_float+0x310>
 80081e4:	2301      	movs	r3, #1
 80081e6:	0038      	movs	r0, r7
 80081e8:	4a1b      	ldr	r2, [pc, #108]	; (8008258 <_printf_float+0x30c>)
 80081ea:	9908      	ldr	r1, [sp, #32]
 80081ec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80081ee:	47b0      	blx	r6
 80081f0:	1c43      	adds	r3, r0, #1
 80081f2:	d100      	bne.n	80081f6 <_printf_float+0x2aa>
 80081f4:	e708      	b.n	8008008 <_printf_float+0xbc>
 80081f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80081fa:	4313      	orrs	r3, r2
 80081fc:	d102      	bne.n	8008204 <_printf_float+0x2b8>
 80081fe:	6823      	ldr	r3, [r4, #0]
 8008200:	07db      	lsls	r3, r3, #31
 8008202:	d5d5      	bpl.n	80081b0 <_printf_float+0x264>
 8008204:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008206:	0038      	movs	r0, r7
 8008208:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800820a:	9908      	ldr	r1, [sp, #32]
 800820c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800820e:	47b0      	blx	r6
 8008210:	1c43      	adds	r3, r0, #1
 8008212:	d100      	bne.n	8008216 <_printf_float+0x2ca>
 8008214:	e6f8      	b.n	8008008 <_printf_float+0xbc>
 8008216:	2300      	movs	r3, #0
 8008218:	930a      	str	r3, [sp, #40]	; 0x28
 800821a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800821c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800821e:	425b      	negs	r3, r3
 8008220:	4293      	cmp	r3, r2
 8008222:	dc01      	bgt.n	8008228 <_printf_float+0x2dc>
 8008224:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008226:	e792      	b.n	800814e <_printf_float+0x202>
 8008228:	0022      	movs	r2, r4
 800822a:	2301      	movs	r3, #1
 800822c:	0038      	movs	r0, r7
 800822e:	9908      	ldr	r1, [sp, #32]
 8008230:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008232:	321a      	adds	r2, #26
 8008234:	47b0      	blx	r6
 8008236:	1c43      	adds	r3, r0, #1
 8008238:	d100      	bne.n	800823c <_printf_float+0x2f0>
 800823a:	e6e5      	b.n	8008008 <_printf_float+0xbc>
 800823c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800823e:	3301      	adds	r3, #1
 8008240:	e7ea      	b.n	8008218 <_printf_float+0x2cc>
 8008242:	46c0      	nop			; (mov r8, r8)
 8008244:	7fefffff 	.word	0x7fefffff
 8008248:	0800af48 	.word	0x0800af48
 800824c:	0800af4c 	.word	0x0800af4c
 8008250:	0800af50 	.word	0x0800af50
 8008254:	0800af54 	.word	0x0800af54
 8008258:	0800af58 	.word	0x0800af58
 800825c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800825e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008260:	920a      	str	r2, [sp, #40]	; 0x28
 8008262:	429a      	cmp	r2, r3
 8008264:	dd00      	ble.n	8008268 <_printf_float+0x31c>
 8008266:	930a      	str	r3, [sp, #40]	; 0x28
 8008268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800826a:	2b00      	cmp	r3, #0
 800826c:	dc3d      	bgt.n	80082ea <_printf_float+0x39e>
 800826e:	2300      	movs	r3, #0
 8008270:	930e      	str	r3, [sp, #56]	; 0x38
 8008272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008274:	43db      	mvns	r3, r3
 8008276:	17db      	asrs	r3, r3, #31
 8008278:	930f      	str	r3, [sp, #60]	; 0x3c
 800827a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800827c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800827e:	930c      	str	r3, [sp, #48]	; 0x30
 8008280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008282:	4013      	ands	r3, r2
 8008284:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008286:	1ad3      	subs	r3, r2, r3
 8008288:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800828a:	4293      	cmp	r3, r2
 800828c:	dc36      	bgt.n	80082fc <_printf_float+0x3b0>
 800828e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008290:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008292:	4293      	cmp	r3, r2
 8008294:	db40      	blt.n	8008318 <_printf_float+0x3cc>
 8008296:	6823      	ldr	r3, [r4, #0]
 8008298:	07db      	lsls	r3, r3, #31
 800829a:	d43d      	bmi.n	8008318 <_printf_float+0x3cc>
 800829c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800829e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082a0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80082a2:	1ad3      	subs	r3, r2, r3
 80082a4:	1a52      	subs	r2, r2, r1
 80082a6:	920a      	str	r2, [sp, #40]	; 0x28
 80082a8:	429a      	cmp	r2, r3
 80082aa:	dd00      	ble.n	80082ae <_printf_float+0x362>
 80082ac:	930a      	str	r3, [sp, #40]	; 0x28
 80082ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	dc3a      	bgt.n	800832a <_printf_float+0x3de>
 80082b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082b6:	2500      	movs	r5, #0
 80082b8:	43db      	mvns	r3, r3
 80082ba:	17db      	asrs	r3, r3, #31
 80082bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80082be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80082c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082c4:	1a9b      	subs	r3, r3, r2
 80082c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082c8:	400a      	ands	r2, r1
 80082ca:	1a9b      	subs	r3, r3, r2
 80082cc:	42ab      	cmp	r3, r5
 80082ce:	dc00      	bgt.n	80082d2 <_printf_float+0x386>
 80082d0:	e76e      	b.n	80081b0 <_printf_float+0x264>
 80082d2:	0022      	movs	r2, r4
 80082d4:	2301      	movs	r3, #1
 80082d6:	0038      	movs	r0, r7
 80082d8:	9908      	ldr	r1, [sp, #32]
 80082da:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80082dc:	321a      	adds	r2, #26
 80082de:	47b0      	blx	r6
 80082e0:	1c43      	adds	r3, r0, #1
 80082e2:	d100      	bne.n	80082e6 <_printf_float+0x39a>
 80082e4:	e690      	b.n	8008008 <_printf_float+0xbc>
 80082e6:	3501      	adds	r5, #1
 80082e8:	e7e9      	b.n	80082be <_printf_float+0x372>
 80082ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082ec:	002a      	movs	r2, r5
 80082ee:	0038      	movs	r0, r7
 80082f0:	9908      	ldr	r1, [sp, #32]
 80082f2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80082f4:	47b0      	blx	r6
 80082f6:	1c43      	adds	r3, r0, #1
 80082f8:	d1b9      	bne.n	800826e <_printf_float+0x322>
 80082fa:	e685      	b.n	8008008 <_printf_float+0xbc>
 80082fc:	0022      	movs	r2, r4
 80082fe:	2301      	movs	r3, #1
 8008300:	0038      	movs	r0, r7
 8008302:	9908      	ldr	r1, [sp, #32]
 8008304:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008306:	321a      	adds	r2, #26
 8008308:	47b0      	blx	r6
 800830a:	1c43      	adds	r3, r0, #1
 800830c:	d100      	bne.n	8008310 <_printf_float+0x3c4>
 800830e:	e67b      	b.n	8008008 <_printf_float+0xbc>
 8008310:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008312:	3301      	adds	r3, #1
 8008314:	930e      	str	r3, [sp, #56]	; 0x38
 8008316:	e7b0      	b.n	800827a <_printf_float+0x32e>
 8008318:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800831a:	0038      	movs	r0, r7
 800831c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800831e:	9908      	ldr	r1, [sp, #32]
 8008320:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008322:	47b0      	blx	r6
 8008324:	1c43      	adds	r3, r0, #1
 8008326:	d1b9      	bne.n	800829c <_printf_float+0x350>
 8008328:	e66e      	b.n	8008008 <_printf_float+0xbc>
 800832a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800832c:	0038      	movs	r0, r7
 800832e:	18ea      	adds	r2, r5, r3
 8008330:	9908      	ldr	r1, [sp, #32]
 8008332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008334:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008336:	47a8      	blx	r5
 8008338:	1c43      	adds	r3, r0, #1
 800833a:	d1bb      	bne.n	80082b4 <_printf_float+0x368>
 800833c:	e664      	b.n	8008008 <_printf_float+0xbc>
 800833e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008340:	2b01      	cmp	r3, #1
 8008342:	dc02      	bgt.n	800834a <_printf_float+0x3fe>
 8008344:	2301      	movs	r3, #1
 8008346:	421a      	tst	r2, r3
 8008348:	d038      	beq.n	80083bc <_printf_float+0x470>
 800834a:	2301      	movs	r3, #1
 800834c:	002a      	movs	r2, r5
 800834e:	0038      	movs	r0, r7
 8008350:	9908      	ldr	r1, [sp, #32]
 8008352:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008354:	47b0      	blx	r6
 8008356:	1c43      	adds	r3, r0, #1
 8008358:	d100      	bne.n	800835c <_printf_float+0x410>
 800835a:	e655      	b.n	8008008 <_printf_float+0xbc>
 800835c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800835e:	0038      	movs	r0, r7
 8008360:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008362:	9908      	ldr	r1, [sp, #32]
 8008364:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008366:	47b0      	blx	r6
 8008368:	1c43      	adds	r3, r0, #1
 800836a:	d100      	bne.n	800836e <_printf_float+0x422>
 800836c:	e64c      	b.n	8008008 <_printf_float+0xbc>
 800836e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008370:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008372:	2200      	movs	r2, #0
 8008374:	2300      	movs	r3, #0
 8008376:	f7f8 f869 	bl	800044c <__aeabi_dcmpeq>
 800837a:	2800      	cmp	r0, #0
 800837c:	d11c      	bne.n	80083b8 <_printf_float+0x46c>
 800837e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008380:	1c6a      	adds	r2, r5, #1
 8008382:	3b01      	subs	r3, #1
 8008384:	0038      	movs	r0, r7
 8008386:	9908      	ldr	r1, [sp, #32]
 8008388:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800838a:	47a8      	blx	r5
 800838c:	1c43      	adds	r3, r0, #1
 800838e:	d10f      	bne.n	80083b0 <_printf_float+0x464>
 8008390:	e63a      	b.n	8008008 <_printf_float+0xbc>
 8008392:	0022      	movs	r2, r4
 8008394:	2301      	movs	r3, #1
 8008396:	0038      	movs	r0, r7
 8008398:	9908      	ldr	r1, [sp, #32]
 800839a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800839c:	321a      	adds	r2, #26
 800839e:	47b0      	blx	r6
 80083a0:	1c43      	adds	r3, r0, #1
 80083a2:	d100      	bne.n	80083a6 <_printf_float+0x45a>
 80083a4:	e630      	b.n	8008008 <_printf_float+0xbc>
 80083a6:	3501      	adds	r5, #1
 80083a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083aa:	3b01      	subs	r3, #1
 80083ac:	42ab      	cmp	r3, r5
 80083ae:	dcf0      	bgt.n	8008392 <_printf_float+0x446>
 80083b0:	0022      	movs	r2, r4
 80083b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083b4:	3250      	adds	r2, #80	; 0x50
 80083b6:	e6cb      	b.n	8008150 <_printf_float+0x204>
 80083b8:	2500      	movs	r5, #0
 80083ba:	e7f5      	b.n	80083a8 <_printf_float+0x45c>
 80083bc:	002a      	movs	r2, r5
 80083be:	e7e1      	b.n	8008384 <_printf_float+0x438>
 80083c0:	0022      	movs	r2, r4
 80083c2:	2301      	movs	r3, #1
 80083c4:	0038      	movs	r0, r7
 80083c6:	9908      	ldr	r1, [sp, #32]
 80083c8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80083ca:	3219      	adds	r2, #25
 80083cc:	47b0      	blx	r6
 80083ce:	1c43      	adds	r3, r0, #1
 80083d0:	d100      	bne.n	80083d4 <_printf_float+0x488>
 80083d2:	e619      	b.n	8008008 <_printf_float+0xbc>
 80083d4:	3501      	adds	r5, #1
 80083d6:	68e3      	ldr	r3, [r4, #12]
 80083d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80083da:	1a9b      	subs	r3, r3, r2
 80083dc:	42ab      	cmp	r3, r5
 80083de:	dcef      	bgt.n	80083c0 <_printf_float+0x474>
 80083e0:	e6ea      	b.n	80081b8 <_printf_float+0x26c>
 80083e2:	2500      	movs	r5, #0
 80083e4:	e7f7      	b.n	80083d6 <_printf_float+0x48a>
 80083e6:	46c0      	nop			; (mov r8, r8)

080083e8 <_printf_common>:
 80083e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083ea:	0015      	movs	r5, r2
 80083ec:	9301      	str	r3, [sp, #4]
 80083ee:	688a      	ldr	r2, [r1, #8]
 80083f0:	690b      	ldr	r3, [r1, #16]
 80083f2:	000c      	movs	r4, r1
 80083f4:	9000      	str	r0, [sp, #0]
 80083f6:	4293      	cmp	r3, r2
 80083f8:	da00      	bge.n	80083fc <_printf_common+0x14>
 80083fa:	0013      	movs	r3, r2
 80083fc:	0022      	movs	r2, r4
 80083fe:	602b      	str	r3, [r5, #0]
 8008400:	3243      	adds	r2, #67	; 0x43
 8008402:	7812      	ldrb	r2, [r2, #0]
 8008404:	2a00      	cmp	r2, #0
 8008406:	d001      	beq.n	800840c <_printf_common+0x24>
 8008408:	3301      	adds	r3, #1
 800840a:	602b      	str	r3, [r5, #0]
 800840c:	6823      	ldr	r3, [r4, #0]
 800840e:	069b      	lsls	r3, r3, #26
 8008410:	d502      	bpl.n	8008418 <_printf_common+0x30>
 8008412:	682b      	ldr	r3, [r5, #0]
 8008414:	3302      	adds	r3, #2
 8008416:	602b      	str	r3, [r5, #0]
 8008418:	6822      	ldr	r2, [r4, #0]
 800841a:	2306      	movs	r3, #6
 800841c:	0017      	movs	r7, r2
 800841e:	401f      	ands	r7, r3
 8008420:	421a      	tst	r2, r3
 8008422:	d027      	beq.n	8008474 <_printf_common+0x8c>
 8008424:	0023      	movs	r3, r4
 8008426:	3343      	adds	r3, #67	; 0x43
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	1e5a      	subs	r2, r3, #1
 800842c:	4193      	sbcs	r3, r2
 800842e:	6822      	ldr	r2, [r4, #0]
 8008430:	0692      	lsls	r2, r2, #26
 8008432:	d430      	bmi.n	8008496 <_printf_common+0xae>
 8008434:	0022      	movs	r2, r4
 8008436:	9901      	ldr	r1, [sp, #4]
 8008438:	9800      	ldr	r0, [sp, #0]
 800843a:	9e08      	ldr	r6, [sp, #32]
 800843c:	3243      	adds	r2, #67	; 0x43
 800843e:	47b0      	blx	r6
 8008440:	1c43      	adds	r3, r0, #1
 8008442:	d025      	beq.n	8008490 <_printf_common+0xa8>
 8008444:	2306      	movs	r3, #6
 8008446:	6820      	ldr	r0, [r4, #0]
 8008448:	682a      	ldr	r2, [r5, #0]
 800844a:	68e1      	ldr	r1, [r4, #12]
 800844c:	2500      	movs	r5, #0
 800844e:	4003      	ands	r3, r0
 8008450:	2b04      	cmp	r3, #4
 8008452:	d103      	bne.n	800845c <_printf_common+0x74>
 8008454:	1a8d      	subs	r5, r1, r2
 8008456:	43eb      	mvns	r3, r5
 8008458:	17db      	asrs	r3, r3, #31
 800845a:	401d      	ands	r5, r3
 800845c:	68a3      	ldr	r3, [r4, #8]
 800845e:	6922      	ldr	r2, [r4, #16]
 8008460:	4293      	cmp	r3, r2
 8008462:	dd01      	ble.n	8008468 <_printf_common+0x80>
 8008464:	1a9b      	subs	r3, r3, r2
 8008466:	18ed      	adds	r5, r5, r3
 8008468:	2700      	movs	r7, #0
 800846a:	42bd      	cmp	r5, r7
 800846c:	d120      	bne.n	80084b0 <_printf_common+0xc8>
 800846e:	2000      	movs	r0, #0
 8008470:	e010      	b.n	8008494 <_printf_common+0xac>
 8008472:	3701      	adds	r7, #1
 8008474:	68e3      	ldr	r3, [r4, #12]
 8008476:	682a      	ldr	r2, [r5, #0]
 8008478:	1a9b      	subs	r3, r3, r2
 800847a:	42bb      	cmp	r3, r7
 800847c:	ddd2      	ble.n	8008424 <_printf_common+0x3c>
 800847e:	0022      	movs	r2, r4
 8008480:	2301      	movs	r3, #1
 8008482:	9901      	ldr	r1, [sp, #4]
 8008484:	9800      	ldr	r0, [sp, #0]
 8008486:	9e08      	ldr	r6, [sp, #32]
 8008488:	3219      	adds	r2, #25
 800848a:	47b0      	blx	r6
 800848c:	1c43      	adds	r3, r0, #1
 800848e:	d1f0      	bne.n	8008472 <_printf_common+0x8a>
 8008490:	2001      	movs	r0, #1
 8008492:	4240      	negs	r0, r0
 8008494:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008496:	2030      	movs	r0, #48	; 0x30
 8008498:	18e1      	adds	r1, r4, r3
 800849a:	3143      	adds	r1, #67	; 0x43
 800849c:	7008      	strb	r0, [r1, #0]
 800849e:	0021      	movs	r1, r4
 80084a0:	1c5a      	adds	r2, r3, #1
 80084a2:	3145      	adds	r1, #69	; 0x45
 80084a4:	7809      	ldrb	r1, [r1, #0]
 80084a6:	18a2      	adds	r2, r4, r2
 80084a8:	3243      	adds	r2, #67	; 0x43
 80084aa:	3302      	adds	r3, #2
 80084ac:	7011      	strb	r1, [r2, #0]
 80084ae:	e7c1      	b.n	8008434 <_printf_common+0x4c>
 80084b0:	0022      	movs	r2, r4
 80084b2:	2301      	movs	r3, #1
 80084b4:	9901      	ldr	r1, [sp, #4]
 80084b6:	9800      	ldr	r0, [sp, #0]
 80084b8:	9e08      	ldr	r6, [sp, #32]
 80084ba:	321a      	adds	r2, #26
 80084bc:	47b0      	blx	r6
 80084be:	1c43      	adds	r3, r0, #1
 80084c0:	d0e6      	beq.n	8008490 <_printf_common+0xa8>
 80084c2:	3701      	adds	r7, #1
 80084c4:	e7d1      	b.n	800846a <_printf_common+0x82>
	...

080084c8 <_printf_i>:
 80084c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084ca:	b08b      	sub	sp, #44	; 0x2c
 80084cc:	9206      	str	r2, [sp, #24]
 80084ce:	000a      	movs	r2, r1
 80084d0:	3243      	adds	r2, #67	; 0x43
 80084d2:	9307      	str	r3, [sp, #28]
 80084d4:	9005      	str	r0, [sp, #20]
 80084d6:	9204      	str	r2, [sp, #16]
 80084d8:	7e0a      	ldrb	r2, [r1, #24]
 80084da:	000c      	movs	r4, r1
 80084dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084de:	2a78      	cmp	r2, #120	; 0x78
 80084e0:	d806      	bhi.n	80084f0 <_printf_i+0x28>
 80084e2:	2a62      	cmp	r2, #98	; 0x62
 80084e4:	d808      	bhi.n	80084f8 <_printf_i+0x30>
 80084e6:	2a00      	cmp	r2, #0
 80084e8:	d100      	bne.n	80084ec <_printf_i+0x24>
 80084ea:	e0c0      	b.n	800866e <_printf_i+0x1a6>
 80084ec:	2a58      	cmp	r2, #88	; 0x58
 80084ee:	d052      	beq.n	8008596 <_printf_i+0xce>
 80084f0:	0026      	movs	r6, r4
 80084f2:	3642      	adds	r6, #66	; 0x42
 80084f4:	7032      	strb	r2, [r6, #0]
 80084f6:	e022      	b.n	800853e <_printf_i+0x76>
 80084f8:	0010      	movs	r0, r2
 80084fa:	3863      	subs	r0, #99	; 0x63
 80084fc:	2815      	cmp	r0, #21
 80084fe:	d8f7      	bhi.n	80084f0 <_printf_i+0x28>
 8008500:	f7f7 fe14 	bl	800012c <__gnu_thumb1_case_shi>
 8008504:	001f0016 	.word	0x001f0016
 8008508:	fff6fff6 	.word	0xfff6fff6
 800850c:	fff6fff6 	.word	0xfff6fff6
 8008510:	fff6001f 	.word	0xfff6001f
 8008514:	fff6fff6 	.word	0xfff6fff6
 8008518:	00a8fff6 	.word	0x00a8fff6
 800851c:	009a0036 	.word	0x009a0036
 8008520:	fff6fff6 	.word	0xfff6fff6
 8008524:	fff600b9 	.word	0xfff600b9
 8008528:	fff60036 	.word	0xfff60036
 800852c:	009efff6 	.word	0x009efff6
 8008530:	0026      	movs	r6, r4
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	3642      	adds	r6, #66	; 0x42
 8008536:	1d11      	adds	r1, r2, #4
 8008538:	6019      	str	r1, [r3, #0]
 800853a:	6813      	ldr	r3, [r2, #0]
 800853c:	7033      	strb	r3, [r6, #0]
 800853e:	2301      	movs	r3, #1
 8008540:	e0a7      	b.n	8008692 <_printf_i+0x1ca>
 8008542:	6808      	ldr	r0, [r1, #0]
 8008544:	6819      	ldr	r1, [r3, #0]
 8008546:	1d0a      	adds	r2, r1, #4
 8008548:	0605      	lsls	r5, r0, #24
 800854a:	d50b      	bpl.n	8008564 <_printf_i+0x9c>
 800854c:	680d      	ldr	r5, [r1, #0]
 800854e:	601a      	str	r2, [r3, #0]
 8008550:	2d00      	cmp	r5, #0
 8008552:	da03      	bge.n	800855c <_printf_i+0x94>
 8008554:	232d      	movs	r3, #45	; 0x2d
 8008556:	9a04      	ldr	r2, [sp, #16]
 8008558:	426d      	negs	r5, r5
 800855a:	7013      	strb	r3, [r2, #0]
 800855c:	4b61      	ldr	r3, [pc, #388]	; (80086e4 <_printf_i+0x21c>)
 800855e:	270a      	movs	r7, #10
 8008560:	9303      	str	r3, [sp, #12]
 8008562:	e032      	b.n	80085ca <_printf_i+0x102>
 8008564:	680d      	ldr	r5, [r1, #0]
 8008566:	601a      	str	r2, [r3, #0]
 8008568:	0641      	lsls	r1, r0, #25
 800856a:	d5f1      	bpl.n	8008550 <_printf_i+0x88>
 800856c:	b22d      	sxth	r5, r5
 800856e:	e7ef      	b.n	8008550 <_printf_i+0x88>
 8008570:	680d      	ldr	r5, [r1, #0]
 8008572:	6819      	ldr	r1, [r3, #0]
 8008574:	1d08      	adds	r0, r1, #4
 8008576:	6018      	str	r0, [r3, #0]
 8008578:	062e      	lsls	r6, r5, #24
 800857a:	d501      	bpl.n	8008580 <_printf_i+0xb8>
 800857c:	680d      	ldr	r5, [r1, #0]
 800857e:	e003      	b.n	8008588 <_printf_i+0xc0>
 8008580:	066d      	lsls	r5, r5, #25
 8008582:	d5fb      	bpl.n	800857c <_printf_i+0xb4>
 8008584:	680d      	ldr	r5, [r1, #0]
 8008586:	b2ad      	uxth	r5, r5
 8008588:	4b56      	ldr	r3, [pc, #344]	; (80086e4 <_printf_i+0x21c>)
 800858a:	270a      	movs	r7, #10
 800858c:	9303      	str	r3, [sp, #12]
 800858e:	2a6f      	cmp	r2, #111	; 0x6f
 8008590:	d117      	bne.n	80085c2 <_printf_i+0xfa>
 8008592:	2708      	movs	r7, #8
 8008594:	e015      	b.n	80085c2 <_printf_i+0xfa>
 8008596:	3145      	adds	r1, #69	; 0x45
 8008598:	700a      	strb	r2, [r1, #0]
 800859a:	4a52      	ldr	r2, [pc, #328]	; (80086e4 <_printf_i+0x21c>)
 800859c:	9203      	str	r2, [sp, #12]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	6821      	ldr	r1, [r4, #0]
 80085a2:	ca20      	ldmia	r2!, {r5}
 80085a4:	601a      	str	r2, [r3, #0]
 80085a6:	0608      	lsls	r0, r1, #24
 80085a8:	d550      	bpl.n	800864c <_printf_i+0x184>
 80085aa:	07cb      	lsls	r3, r1, #31
 80085ac:	d502      	bpl.n	80085b4 <_printf_i+0xec>
 80085ae:	2320      	movs	r3, #32
 80085b0:	4319      	orrs	r1, r3
 80085b2:	6021      	str	r1, [r4, #0]
 80085b4:	2710      	movs	r7, #16
 80085b6:	2d00      	cmp	r5, #0
 80085b8:	d103      	bne.n	80085c2 <_printf_i+0xfa>
 80085ba:	2320      	movs	r3, #32
 80085bc:	6822      	ldr	r2, [r4, #0]
 80085be:	439a      	bics	r2, r3
 80085c0:	6022      	str	r2, [r4, #0]
 80085c2:	0023      	movs	r3, r4
 80085c4:	2200      	movs	r2, #0
 80085c6:	3343      	adds	r3, #67	; 0x43
 80085c8:	701a      	strb	r2, [r3, #0]
 80085ca:	6863      	ldr	r3, [r4, #4]
 80085cc:	60a3      	str	r3, [r4, #8]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	db03      	blt.n	80085da <_printf_i+0x112>
 80085d2:	2204      	movs	r2, #4
 80085d4:	6821      	ldr	r1, [r4, #0]
 80085d6:	4391      	bics	r1, r2
 80085d8:	6021      	str	r1, [r4, #0]
 80085da:	2d00      	cmp	r5, #0
 80085dc:	d102      	bne.n	80085e4 <_printf_i+0x11c>
 80085de:	9e04      	ldr	r6, [sp, #16]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00c      	beq.n	80085fe <_printf_i+0x136>
 80085e4:	9e04      	ldr	r6, [sp, #16]
 80085e6:	0028      	movs	r0, r5
 80085e8:	0039      	movs	r1, r7
 80085ea:	f7f7 fe2f 	bl	800024c <__aeabi_uidivmod>
 80085ee:	9b03      	ldr	r3, [sp, #12]
 80085f0:	3e01      	subs	r6, #1
 80085f2:	5c5b      	ldrb	r3, [r3, r1]
 80085f4:	7033      	strb	r3, [r6, #0]
 80085f6:	002b      	movs	r3, r5
 80085f8:	0005      	movs	r5, r0
 80085fa:	429f      	cmp	r7, r3
 80085fc:	d9f3      	bls.n	80085e6 <_printf_i+0x11e>
 80085fe:	2f08      	cmp	r7, #8
 8008600:	d109      	bne.n	8008616 <_printf_i+0x14e>
 8008602:	6823      	ldr	r3, [r4, #0]
 8008604:	07db      	lsls	r3, r3, #31
 8008606:	d506      	bpl.n	8008616 <_printf_i+0x14e>
 8008608:	6863      	ldr	r3, [r4, #4]
 800860a:	6922      	ldr	r2, [r4, #16]
 800860c:	4293      	cmp	r3, r2
 800860e:	dc02      	bgt.n	8008616 <_printf_i+0x14e>
 8008610:	2330      	movs	r3, #48	; 0x30
 8008612:	3e01      	subs	r6, #1
 8008614:	7033      	strb	r3, [r6, #0]
 8008616:	9b04      	ldr	r3, [sp, #16]
 8008618:	1b9b      	subs	r3, r3, r6
 800861a:	6123      	str	r3, [r4, #16]
 800861c:	9b07      	ldr	r3, [sp, #28]
 800861e:	0021      	movs	r1, r4
 8008620:	9300      	str	r3, [sp, #0]
 8008622:	9805      	ldr	r0, [sp, #20]
 8008624:	9b06      	ldr	r3, [sp, #24]
 8008626:	aa09      	add	r2, sp, #36	; 0x24
 8008628:	f7ff fede 	bl	80083e8 <_printf_common>
 800862c:	1c43      	adds	r3, r0, #1
 800862e:	d135      	bne.n	800869c <_printf_i+0x1d4>
 8008630:	2001      	movs	r0, #1
 8008632:	4240      	negs	r0, r0
 8008634:	b00b      	add	sp, #44	; 0x2c
 8008636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008638:	2220      	movs	r2, #32
 800863a:	6809      	ldr	r1, [r1, #0]
 800863c:	430a      	orrs	r2, r1
 800863e:	6022      	str	r2, [r4, #0]
 8008640:	0022      	movs	r2, r4
 8008642:	2178      	movs	r1, #120	; 0x78
 8008644:	3245      	adds	r2, #69	; 0x45
 8008646:	7011      	strb	r1, [r2, #0]
 8008648:	4a27      	ldr	r2, [pc, #156]	; (80086e8 <_printf_i+0x220>)
 800864a:	e7a7      	b.n	800859c <_printf_i+0xd4>
 800864c:	0648      	lsls	r0, r1, #25
 800864e:	d5ac      	bpl.n	80085aa <_printf_i+0xe2>
 8008650:	b2ad      	uxth	r5, r5
 8008652:	e7aa      	b.n	80085aa <_printf_i+0xe2>
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	680d      	ldr	r5, [r1, #0]
 8008658:	1d10      	adds	r0, r2, #4
 800865a:	6949      	ldr	r1, [r1, #20]
 800865c:	6018      	str	r0, [r3, #0]
 800865e:	6813      	ldr	r3, [r2, #0]
 8008660:	062e      	lsls	r6, r5, #24
 8008662:	d501      	bpl.n	8008668 <_printf_i+0x1a0>
 8008664:	6019      	str	r1, [r3, #0]
 8008666:	e002      	b.n	800866e <_printf_i+0x1a6>
 8008668:	066d      	lsls	r5, r5, #25
 800866a:	d5fb      	bpl.n	8008664 <_printf_i+0x19c>
 800866c:	8019      	strh	r1, [r3, #0]
 800866e:	2300      	movs	r3, #0
 8008670:	9e04      	ldr	r6, [sp, #16]
 8008672:	6123      	str	r3, [r4, #16]
 8008674:	e7d2      	b.n	800861c <_printf_i+0x154>
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	1d11      	adds	r1, r2, #4
 800867a:	6019      	str	r1, [r3, #0]
 800867c:	6816      	ldr	r6, [r2, #0]
 800867e:	2100      	movs	r1, #0
 8008680:	0030      	movs	r0, r6
 8008682:	6862      	ldr	r2, [r4, #4]
 8008684:	f000 ff0a 	bl	800949c <memchr>
 8008688:	2800      	cmp	r0, #0
 800868a:	d001      	beq.n	8008690 <_printf_i+0x1c8>
 800868c:	1b80      	subs	r0, r0, r6
 800868e:	6060      	str	r0, [r4, #4]
 8008690:	6863      	ldr	r3, [r4, #4]
 8008692:	6123      	str	r3, [r4, #16]
 8008694:	2300      	movs	r3, #0
 8008696:	9a04      	ldr	r2, [sp, #16]
 8008698:	7013      	strb	r3, [r2, #0]
 800869a:	e7bf      	b.n	800861c <_printf_i+0x154>
 800869c:	6923      	ldr	r3, [r4, #16]
 800869e:	0032      	movs	r2, r6
 80086a0:	9906      	ldr	r1, [sp, #24]
 80086a2:	9805      	ldr	r0, [sp, #20]
 80086a4:	9d07      	ldr	r5, [sp, #28]
 80086a6:	47a8      	blx	r5
 80086a8:	1c43      	adds	r3, r0, #1
 80086aa:	d0c1      	beq.n	8008630 <_printf_i+0x168>
 80086ac:	6823      	ldr	r3, [r4, #0]
 80086ae:	079b      	lsls	r3, r3, #30
 80086b0:	d415      	bmi.n	80086de <_printf_i+0x216>
 80086b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086b4:	68e0      	ldr	r0, [r4, #12]
 80086b6:	4298      	cmp	r0, r3
 80086b8:	dabc      	bge.n	8008634 <_printf_i+0x16c>
 80086ba:	0018      	movs	r0, r3
 80086bc:	e7ba      	b.n	8008634 <_printf_i+0x16c>
 80086be:	0022      	movs	r2, r4
 80086c0:	2301      	movs	r3, #1
 80086c2:	9906      	ldr	r1, [sp, #24]
 80086c4:	9805      	ldr	r0, [sp, #20]
 80086c6:	9e07      	ldr	r6, [sp, #28]
 80086c8:	3219      	adds	r2, #25
 80086ca:	47b0      	blx	r6
 80086cc:	1c43      	adds	r3, r0, #1
 80086ce:	d0af      	beq.n	8008630 <_printf_i+0x168>
 80086d0:	3501      	adds	r5, #1
 80086d2:	68e3      	ldr	r3, [r4, #12]
 80086d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086d6:	1a9b      	subs	r3, r3, r2
 80086d8:	42ab      	cmp	r3, r5
 80086da:	dcf0      	bgt.n	80086be <_printf_i+0x1f6>
 80086dc:	e7e9      	b.n	80086b2 <_printf_i+0x1ea>
 80086de:	2500      	movs	r5, #0
 80086e0:	e7f7      	b.n	80086d2 <_printf_i+0x20a>
 80086e2:	46c0      	nop			; (mov r8, r8)
 80086e4:	0800af5a 	.word	0x0800af5a
 80086e8:	0800af6b 	.word	0x0800af6b

080086ec <siprintf>:
 80086ec:	b40e      	push	{r1, r2, r3}
 80086ee:	b500      	push	{lr}
 80086f0:	490b      	ldr	r1, [pc, #44]	; (8008720 <siprintf+0x34>)
 80086f2:	b09c      	sub	sp, #112	; 0x70
 80086f4:	ab1d      	add	r3, sp, #116	; 0x74
 80086f6:	9002      	str	r0, [sp, #8]
 80086f8:	9006      	str	r0, [sp, #24]
 80086fa:	9107      	str	r1, [sp, #28]
 80086fc:	9104      	str	r1, [sp, #16]
 80086fe:	4809      	ldr	r0, [pc, #36]	; (8008724 <siprintf+0x38>)
 8008700:	4909      	ldr	r1, [pc, #36]	; (8008728 <siprintf+0x3c>)
 8008702:	cb04      	ldmia	r3!, {r2}
 8008704:	9105      	str	r1, [sp, #20]
 8008706:	6800      	ldr	r0, [r0, #0]
 8008708:	a902      	add	r1, sp, #8
 800870a:	9301      	str	r3, [sp, #4]
 800870c:	f001 fb90 	bl	8009e30 <_svfiprintf_r>
 8008710:	2300      	movs	r3, #0
 8008712:	9a02      	ldr	r2, [sp, #8]
 8008714:	7013      	strb	r3, [r2, #0]
 8008716:	b01c      	add	sp, #112	; 0x70
 8008718:	bc08      	pop	{r3}
 800871a:	b003      	add	sp, #12
 800871c:	4718      	bx	r3
 800871e:	46c0      	nop			; (mov r8, r8)
 8008720:	7fffffff 	.word	0x7fffffff
 8008724:	20000044 	.word	0x20000044
 8008728:	ffff0208 	.word	0xffff0208

0800872c <quorem>:
 800872c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800872e:	0006      	movs	r6, r0
 8008730:	690d      	ldr	r5, [r1, #16]
 8008732:	6933      	ldr	r3, [r6, #16]
 8008734:	b087      	sub	sp, #28
 8008736:	2000      	movs	r0, #0
 8008738:	9102      	str	r1, [sp, #8]
 800873a:	42ab      	cmp	r3, r5
 800873c:	db6b      	blt.n	8008816 <quorem+0xea>
 800873e:	000b      	movs	r3, r1
 8008740:	3d01      	subs	r5, #1
 8008742:	00ac      	lsls	r4, r5, #2
 8008744:	3314      	adds	r3, #20
 8008746:	9305      	str	r3, [sp, #20]
 8008748:	191b      	adds	r3, r3, r4
 800874a:	9303      	str	r3, [sp, #12]
 800874c:	0033      	movs	r3, r6
 800874e:	3314      	adds	r3, #20
 8008750:	9301      	str	r3, [sp, #4]
 8008752:	191c      	adds	r4, r3, r4
 8008754:	9b03      	ldr	r3, [sp, #12]
 8008756:	6827      	ldr	r7, [r4, #0]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	0038      	movs	r0, r7
 800875c:	9300      	str	r3, [sp, #0]
 800875e:	3301      	adds	r3, #1
 8008760:	0019      	movs	r1, r3
 8008762:	9304      	str	r3, [sp, #16]
 8008764:	f7f7 fcec 	bl	8000140 <__udivsi3>
 8008768:	9b04      	ldr	r3, [sp, #16]
 800876a:	9000      	str	r0, [sp, #0]
 800876c:	429f      	cmp	r7, r3
 800876e:	d329      	bcc.n	80087c4 <quorem+0x98>
 8008770:	2300      	movs	r3, #0
 8008772:	469c      	mov	ip, r3
 8008774:	9801      	ldr	r0, [sp, #4]
 8008776:	9f05      	ldr	r7, [sp, #20]
 8008778:	9304      	str	r3, [sp, #16]
 800877a:	cf08      	ldmia	r7!, {r3}
 800877c:	9a00      	ldr	r2, [sp, #0]
 800877e:	b299      	uxth	r1, r3
 8008780:	4351      	muls	r1, r2
 8008782:	0c1b      	lsrs	r3, r3, #16
 8008784:	4353      	muls	r3, r2
 8008786:	4461      	add	r1, ip
 8008788:	0c0a      	lsrs	r2, r1, #16
 800878a:	189b      	adds	r3, r3, r2
 800878c:	0c1a      	lsrs	r2, r3, #16
 800878e:	9305      	str	r3, [sp, #20]
 8008790:	6803      	ldr	r3, [r0, #0]
 8008792:	4694      	mov	ip, r2
 8008794:	b29a      	uxth	r2, r3
 8008796:	9b04      	ldr	r3, [sp, #16]
 8008798:	b289      	uxth	r1, r1
 800879a:	18d2      	adds	r2, r2, r3
 800879c:	6803      	ldr	r3, [r0, #0]
 800879e:	1a52      	subs	r2, r2, r1
 80087a0:	0c19      	lsrs	r1, r3, #16
 80087a2:	466b      	mov	r3, sp
 80087a4:	8a9b      	ldrh	r3, [r3, #20]
 80087a6:	1acb      	subs	r3, r1, r3
 80087a8:	1411      	asrs	r1, r2, #16
 80087aa:	185b      	adds	r3, r3, r1
 80087ac:	1419      	asrs	r1, r3, #16
 80087ae:	b292      	uxth	r2, r2
 80087b0:	041b      	lsls	r3, r3, #16
 80087b2:	431a      	orrs	r2, r3
 80087b4:	9b03      	ldr	r3, [sp, #12]
 80087b6:	9104      	str	r1, [sp, #16]
 80087b8:	c004      	stmia	r0!, {r2}
 80087ba:	42bb      	cmp	r3, r7
 80087bc:	d2dd      	bcs.n	800877a <quorem+0x4e>
 80087be:	6823      	ldr	r3, [r4, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d02e      	beq.n	8008822 <quorem+0xf6>
 80087c4:	0030      	movs	r0, r6
 80087c6:	9902      	ldr	r1, [sp, #8]
 80087c8:	f001 f902 	bl	80099d0 <__mcmp>
 80087cc:	2800      	cmp	r0, #0
 80087ce:	db21      	blt.n	8008814 <quorem+0xe8>
 80087d0:	0030      	movs	r0, r6
 80087d2:	2400      	movs	r4, #0
 80087d4:	9b00      	ldr	r3, [sp, #0]
 80087d6:	9902      	ldr	r1, [sp, #8]
 80087d8:	3301      	adds	r3, #1
 80087da:	9300      	str	r3, [sp, #0]
 80087dc:	3014      	adds	r0, #20
 80087de:	3114      	adds	r1, #20
 80087e0:	6802      	ldr	r2, [r0, #0]
 80087e2:	c908      	ldmia	r1!, {r3}
 80087e4:	b292      	uxth	r2, r2
 80087e6:	1914      	adds	r4, r2, r4
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	1aa2      	subs	r2, r4, r2
 80087ec:	6804      	ldr	r4, [r0, #0]
 80087ee:	0c1b      	lsrs	r3, r3, #16
 80087f0:	0c24      	lsrs	r4, r4, #16
 80087f2:	1ae3      	subs	r3, r4, r3
 80087f4:	1414      	asrs	r4, r2, #16
 80087f6:	191b      	adds	r3, r3, r4
 80087f8:	141c      	asrs	r4, r3, #16
 80087fa:	b292      	uxth	r2, r2
 80087fc:	041b      	lsls	r3, r3, #16
 80087fe:	4313      	orrs	r3, r2
 8008800:	c008      	stmia	r0!, {r3}
 8008802:	9b03      	ldr	r3, [sp, #12]
 8008804:	428b      	cmp	r3, r1
 8008806:	d2eb      	bcs.n	80087e0 <quorem+0xb4>
 8008808:	9a01      	ldr	r2, [sp, #4]
 800880a:	00ab      	lsls	r3, r5, #2
 800880c:	18d3      	adds	r3, r2, r3
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	2a00      	cmp	r2, #0
 8008812:	d010      	beq.n	8008836 <quorem+0x10a>
 8008814:	9800      	ldr	r0, [sp, #0]
 8008816:	b007      	add	sp, #28
 8008818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800881a:	6823      	ldr	r3, [r4, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d104      	bne.n	800882a <quorem+0xfe>
 8008820:	3d01      	subs	r5, #1
 8008822:	9b01      	ldr	r3, [sp, #4]
 8008824:	3c04      	subs	r4, #4
 8008826:	42a3      	cmp	r3, r4
 8008828:	d3f7      	bcc.n	800881a <quorem+0xee>
 800882a:	6135      	str	r5, [r6, #16]
 800882c:	e7ca      	b.n	80087c4 <quorem+0x98>
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	2a00      	cmp	r2, #0
 8008832:	d104      	bne.n	800883e <quorem+0x112>
 8008834:	3d01      	subs	r5, #1
 8008836:	9a01      	ldr	r2, [sp, #4]
 8008838:	3b04      	subs	r3, #4
 800883a:	429a      	cmp	r2, r3
 800883c:	d3f7      	bcc.n	800882e <quorem+0x102>
 800883e:	6135      	str	r5, [r6, #16]
 8008840:	e7e8      	b.n	8008814 <quorem+0xe8>
	...

08008844 <_dtoa_r>:
 8008844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008846:	b09d      	sub	sp, #116	; 0x74
 8008848:	9202      	str	r2, [sp, #8]
 800884a:	9303      	str	r3, [sp, #12]
 800884c:	9b02      	ldr	r3, [sp, #8]
 800884e:	9c03      	ldr	r4, [sp, #12]
 8008850:	930a      	str	r3, [sp, #40]	; 0x28
 8008852:	940b      	str	r4, [sp, #44]	; 0x2c
 8008854:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008856:	0007      	movs	r7, r0
 8008858:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800885a:	2c00      	cmp	r4, #0
 800885c:	d10e      	bne.n	800887c <_dtoa_r+0x38>
 800885e:	2010      	movs	r0, #16
 8008860:	f000 fe12 	bl	8009488 <malloc>
 8008864:	1e02      	subs	r2, r0, #0
 8008866:	6278      	str	r0, [r7, #36]	; 0x24
 8008868:	d104      	bne.n	8008874 <_dtoa_r+0x30>
 800886a:	21ea      	movs	r1, #234	; 0xea
 800886c:	4bc0      	ldr	r3, [pc, #768]	; (8008b70 <_dtoa_r+0x32c>)
 800886e:	48c1      	ldr	r0, [pc, #772]	; (8008b74 <_dtoa_r+0x330>)
 8008870:	f001 fbf0 	bl	800a054 <__assert_func>
 8008874:	6044      	str	r4, [r0, #4]
 8008876:	6084      	str	r4, [r0, #8]
 8008878:	6004      	str	r4, [r0, #0]
 800887a:	60c4      	str	r4, [r0, #12]
 800887c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887e:	6819      	ldr	r1, [r3, #0]
 8008880:	2900      	cmp	r1, #0
 8008882:	d00a      	beq.n	800889a <_dtoa_r+0x56>
 8008884:	685a      	ldr	r2, [r3, #4]
 8008886:	2301      	movs	r3, #1
 8008888:	4093      	lsls	r3, r2
 800888a:	604a      	str	r2, [r1, #4]
 800888c:	608b      	str	r3, [r1, #8]
 800888e:	0038      	movs	r0, r7
 8008890:	f000 fe5c 	bl	800954c <_Bfree>
 8008894:	2200      	movs	r2, #0
 8008896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008898:	601a      	str	r2, [r3, #0]
 800889a:	9b03      	ldr	r3, [sp, #12]
 800889c:	2b00      	cmp	r3, #0
 800889e:	da21      	bge.n	80088e4 <_dtoa_r+0xa0>
 80088a0:	2301      	movs	r3, #1
 80088a2:	602b      	str	r3, [r5, #0]
 80088a4:	9b03      	ldr	r3, [sp, #12]
 80088a6:	005b      	lsls	r3, r3, #1
 80088a8:	085b      	lsrs	r3, r3, #1
 80088aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80088ac:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80088ae:	4bb2      	ldr	r3, [pc, #712]	; (8008b78 <_dtoa_r+0x334>)
 80088b0:	002a      	movs	r2, r5
 80088b2:	9318      	str	r3, [sp, #96]	; 0x60
 80088b4:	401a      	ands	r2, r3
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d117      	bne.n	80088ea <_dtoa_r+0xa6>
 80088ba:	4bb0      	ldr	r3, [pc, #704]	; (8008b7c <_dtoa_r+0x338>)
 80088bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80088be:	0328      	lsls	r0, r5, #12
 80088c0:	6013      	str	r3, [r2, #0]
 80088c2:	9b02      	ldr	r3, [sp, #8]
 80088c4:	0b00      	lsrs	r0, r0, #12
 80088c6:	4318      	orrs	r0, r3
 80088c8:	d101      	bne.n	80088ce <_dtoa_r+0x8a>
 80088ca:	f000 fdc3 	bl	8009454 <_dtoa_r+0xc10>
 80088ce:	48ac      	ldr	r0, [pc, #688]	; (8008b80 <_dtoa_r+0x33c>)
 80088d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80088d2:	9005      	str	r0, [sp, #20]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d002      	beq.n	80088de <_dtoa_r+0x9a>
 80088d8:	4baa      	ldr	r3, [pc, #680]	; (8008b84 <_dtoa_r+0x340>)
 80088da:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80088dc:	6013      	str	r3, [r2, #0]
 80088de:	9805      	ldr	r0, [sp, #20]
 80088e0:	b01d      	add	sp, #116	; 0x74
 80088e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088e4:	2300      	movs	r3, #0
 80088e6:	602b      	str	r3, [r5, #0]
 80088e8:	e7e0      	b.n	80088ac <_dtoa_r+0x68>
 80088ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088ec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80088ee:	9312      	str	r3, [sp, #72]	; 0x48
 80088f0:	9413      	str	r4, [sp, #76]	; 0x4c
 80088f2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80088f4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80088f6:	2200      	movs	r2, #0
 80088f8:	2300      	movs	r3, #0
 80088fa:	f7f7 fda7 	bl	800044c <__aeabi_dcmpeq>
 80088fe:	1e04      	subs	r4, r0, #0
 8008900:	d00b      	beq.n	800891a <_dtoa_r+0xd6>
 8008902:	2301      	movs	r3, #1
 8008904:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008906:	6013      	str	r3, [r2, #0]
 8008908:	4b9f      	ldr	r3, [pc, #636]	; (8008b88 <_dtoa_r+0x344>)
 800890a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800890c:	9305      	str	r3, [sp, #20]
 800890e:	2a00      	cmp	r2, #0
 8008910:	d0e5      	beq.n	80088de <_dtoa_r+0x9a>
 8008912:	4a9e      	ldr	r2, [pc, #632]	; (8008b8c <_dtoa_r+0x348>)
 8008914:	9926      	ldr	r1, [sp, #152]	; 0x98
 8008916:	600a      	str	r2, [r1, #0]
 8008918:	e7e1      	b.n	80088de <_dtoa_r+0x9a>
 800891a:	ab1a      	add	r3, sp, #104	; 0x68
 800891c:	9301      	str	r3, [sp, #4]
 800891e:	ab1b      	add	r3, sp, #108	; 0x6c
 8008920:	9300      	str	r3, [sp, #0]
 8008922:	0038      	movs	r0, r7
 8008924:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008926:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008928:	f001 f906 	bl	8009b38 <__d2b>
 800892c:	006e      	lsls	r6, r5, #1
 800892e:	9004      	str	r0, [sp, #16]
 8008930:	0d76      	lsrs	r6, r6, #21
 8008932:	d100      	bne.n	8008936 <_dtoa_r+0xf2>
 8008934:	e07c      	b.n	8008a30 <_dtoa_r+0x1ec>
 8008936:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008938:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800893a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800893c:	4a94      	ldr	r2, [pc, #592]	; (8008b90 <_dtoa_r+0x34c>)
 800893e:	031b      	lsls	r3, r3, #12
 8008940:	0b1b      	lsrs	r3, r3, #12
 8008942:	431a      	orrs	r2, r3
 8008944:	0011      	movs	r1, r2
 8008946:	4b93      	ldr	r3, [pc, #588]	; (8008b94 <_dtoa_r+0x350>)
 8008948:	9416      	str	r4, [sp, #88]	; 0x58
 800894a:	18f6      	adds	r6, r6, r3
 800894c:	2200      	movs	r2, #0
 800894e:	4b92      	ldr	r3, [pc, #584]	; (8008b98 <_dtoa_r+0x354>)
 8008950:	f7f9 fe3a 	bl	80025c8 <__aeabi_dsub>
 8008954:	4a91      	ldr	r2, [pc, #580]	; (8008b9c <_dtoa_r+0x358>)
 8008956:	4b92      	ldr	r3, [pc, #584]	; (8008ba0 <_dtoa_r+0x35c>)
 8008958:	f7f9 fbca 	bl	80020f0 <__aeabi_dmul>
 800895c:	4a91      	ldr	r2, [pc, #580]	; (8008ba4 <_dtoa_r+0x360>)
 800895e:	4b92      	ldr	r3, [pc, #584]	; (8008ba8 <_dtoa_r+0x364>)
 8008960:	f7f8 fc56 	bl	8001210 <__aeabi_dadd>
 8008964:	0004      	movs	r4, r0
 8008966:	0030      	movs	r0, r6
 8008968:	000d      	movs	r5, r1
 800896a:	f7fa fa13 	bl	8002d94 <__aeabi_i2d>
 800896e:	4a8f      	ldr	r2, [pc, #572]	; (8008bac <_dtoa_r+0x368>)
 8008970:	4b8f      	ldr	r3, [pc, #572]	; (8008bb0 <_dtoa_r+0x36c>)
 8008972:	f7f9 fbbd 	bl	80020f0 <__aeabi_dmul>
 8008976:	0002      	movs	r2, r0
 8008978:	000b      	movs	r3, r1
 800897a:	0020      	movs	r0, r4
 800897c:	0029      	movs	r1, r5
 800897e:	f7f8 fc47 	bl	8001210 <__aeabi_dadd>
 8008982:	0004      	movs	r4, r0
 8008984:	000d      	movs	r5, r1
 8008986:	f7fa f9cf 	bl	8002d28 <__aeabi_d2iz>
 800898a:	2200      	movs	r2, #0
 800898c:	9002      	str	r0, [sp, #8]
 800898e:	2300      	movs	r3, #0
 8008990:	0020      	movs	r0, r4
 8008992:	0029      	movs	r1, r5
 8008994:	f7f7 fd60 	bl	8000458 <__aeabi_dcmplt>
 8008998:	2800      	cmp	r0, #0
 800899a:	d00b      	beq.n	80089b4 <_dtoa_r+0x170>
 800899c:	9802      	ldr	r0, [sp, #8]
 800899e:	f7fa f9f9 	bl	8002d94 <__aeabi_i2d>
 80089a2:	002b      	movs	r3, r5
 80089a4:	0022      	movs	r2, r4
 80089a6:	f7f7 fd51 	bl	800044c <__aeabi_dcmpeq>
 80089aa:	4243      	negs	r3, r0
 80089ac:	4158      	adcs	r0, r3
 80089ae:	9b02      	ldr	r3, [sp, #8]
 80089b0:	1a1b      	subs	r3, r3, r0
 80089b2:	9302      	str	r3, [sp, #8]
 80089b4:	2301      	movs	r3, #1
 80089b6:	9315      	str	r3, [sp, #84]	; 0x54
 80089b8:	9b02      	ldr	r3, [sp, #8]
 80089ba:	2b16      	cmp	r3, #22
 80089bc:	d80f      	bhi.n	80089de <_dtoa_r+0x19a>
 80089be:	9812      	ldr	r0, [sp, #72]	; 0x48
 80089c0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80089c2:	00da      	lsls	r2, r3, #3
 80089c4:	4b7b      	ldr	r3, [pc, #492]	; (8008bb4 <_dtoa_r+0x370>)
 80089c6:	189b      	adds	r3, r3, r2
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	f7f7 fd44 	bl	8000458 <__aeabi_dcmplt>
 80089d0:	2800      	cmp	r0, #0
 80089d2:	d049      	beq.n	8008a68 <_dtoa_r+0x224>
 80089d4:	9b02      	ldr	r3, [sp, #8]
 80089d6:	3b01      	subs	r3, #1
 80089d8:	9302      	str	r3, [sp, #8]
 80089da:	2300      	movs	r3, #0
 80089dc:	9315      	str	r3, [sp, #84]	; 0x54
 80089de:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80089e0:	1b9e      	subs	r6, r3, r6
 80089e2:	2300      	movs	r3, #0
 80089e4:	9308      	str	r3, [sp, #32]
 80089e6:	0033      	movs	r3, r6
 80089e8:	3b01      	subs	r3, #1
 80089ea:	930d      	str	r3, [sp, #52]	; 0x34
 80089ec:	d504      	bpl.n	80089f8 <_dtoa_r+0x1b4>
 80089ee:	2301      	movs	r3, #1
 80089f0:	1b9b      	subs	r3, r3, r6
 80089f2:	9308      	str	r3, [sp, #32]
 80089f4:	2300      	movs	r3, #0
 80089f6:	930d      	str	r3, [sp, #52]	; 0x34
 80089f8:	9b02      	ldr	r3, [sp, #8]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	db36      	blt.n	8008a6c <_dtoa_r+0x228>
 80089fe:	9a02      	ldr	r2, [sp, #8]
 8008a00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a02:	4694      	mov	ip, r2
 8008a04:	4463      	add	r3, ip
 8008a06:	930d      	str	r3, [sp, #52]	; 0x34
 8008a08:	2300      	movs	r3, #0
 8008a0a:	9214      	str	r2, [sp, #80]	; 0x50
 8008a0c:	930e      	str	r3, [sp, #56]	; 0x38
 8008a0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a10:	2401      	movs	r4, #1
 8008a12:	2b09      	cmp	r3, #9
 8008a14:	d862      	bhi.n	8008adc <_dtoa_r+0x298>
 8008a16:	2b05      	cmp	r3, #5
 8008a18:	dd02      	ble.n	8008a20 <_dtoa_r+0x1dc>
 8008a1a:	2400      	movs	r4, #0
 8008a1c:	3b04      	subs	r3, #4
 8008a1e:	9322      	str	r3, [sp, #136]	; 0x88
 8008a20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a22:	1e98      	subs	r0, r3, #2
 8008a24:	2803      	cmp	r0, #3
 8008a26:	d862      	bhi.n	8008aee <_dtoa_r+0x2aa>
 8008a28:	f7f7 fb76 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008a2c:	56343629 	.word	0x56343629
 8008a30:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008a32:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008a34:	189e      	adds	r6, r3, r2
 8008a36:	4b60      	ldr	r3, [pc, #384]	; (8008bb8 <_dtoa_r+0x374>)
 8008a38:	18f2      	adds	r2, r6, r3
 8008a3a:	2a20      	cmp	r2, #32
 8008a3c:	dd0f      	ble.n	8008a5e <_dtoa_r+0x21a>
 8008a3e:	2340      	movs	r3, #64	; 0x40
 8008a40:	1a9b      	subs	r3, r3, r2
 8008a42:	409d      	lsls	r5, r3
 8008a44:	4b5d      	ldr	r3, [pc, #372]	; (8008bbc <_dtoa_r+0x378>)
 8008a46:	9802      	ldr	r0, [sp, #8]
 8008a48:	18f3      	adds	r3, r6, r3
 8008a4a:	40d8      	lsrs	r0, r3
 8008a4c:	4328      	orrs	r0, r5
 8008a4e:	f7fa f9d1 	bl	8002df4 <__aeabi_ui2d>
 8008a52:	2301      	movs	r3, #1
 8008a54:	4c5a      	ldr	r4, [pc, #360]	; (8008bc0 <_dtoa_r+0x37c>)
 8008a56:	3e01      	subs	r6, #1
 8008a58:	1909      	adds	r1, r1, r4
 8008a5a:	9316      	str	r3, [sp, #88]	; 0x58
 8008a5c:	e776      	b.n	800894c <_dtoa_r+0x108>
 8008a5e:	2320      	movs	r3, #32
 8008a60:	9802      	ldr	r0, [sp, #8]
 8008a62:	1a9b      	subs	r3, r3, r2
 8008a64:	4098      	lsls	r0, r3
 8008a66:	e7f2      	b.n	8008a4e <_dtoa_r+0x20a>
 8008a68:	9015      	str	r0, [sp, #84]	; 0x54
 8008a6a:	e7b8      	b.n	80089de <_dtoa_r+0x19a>
 8008a6c:	9b08      	ldr	r3, [sp, #32]
 8008a6e:	9a02      	ldr	r2, [sp, #8]
 8008a70:	1a9b      	subs	r3, r3, r2
 8008a72:	9308      	str	r3, [sp, #32]
 8008a74:	4253      	negs	r3, r2
 8008a76:	930e      	str	r3, [sp, #56]	; 0x38
 8008a78:	2300      	movs	r3, #0
 8008a7a:	9314      	str	r3, [sp, #80]	; 0x50
 8008a7c:	e7c7      	b.n	8008a0e <_dtoa_r+0x1ca>
 8008a7e:	2300      	movs	r3, #0
 8008a80:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	dc36      	bgt.n	8008af6 <_dtoa_r+0x2b2>
 8008a88:	2301      	movs	r3, #1
 8008a8a:	001a      	movs	r2, r3
 8008a8c:	930c      	str	r3, [sp, #48]	; 0x30
 8008a8e:	9306      	str	r3, [sp, #24]
 8008a90:	9223      	str	r2, [sp, #140]	; 0x8c
 8008a92:	e00d      	b.n	8008ab0 <_dtoa_r+0x26c>
 8008a94:	2301      	movs	r3, #1
 8008a96:	e7f3      	b.n	8008a80 <_dtoa_r+0x23c>
 8008a98:	2300      	movs	r3, #0
 8008a9a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008a9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a9e:	4694      	mov	ip, r2
 8008aa0:	9b02      	ldr	r3, [sp, #8]
 8008aa2:	4463      	add	r3, ip
 8008aa4:	930c      	str	r3, [sp, #48]	; 0x30
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	9306      	str	r3, [sp, #24]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	dc00      	bgt.n	8008ab0 <_dtoa_r+0x26c>
 8008aae:	2301      	movs	r3, #1
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ab4:	6042      	str	r2, [r0, #4]
 8008ab6:	3204      	adds	r2, #4
 8008ab8:	0015      	movs	r5, r2
 8008aba:	3514      	adds	r5, #20
 8008abc:	6841      	ldr	r1, [r0, #4]
 8008abe:	429d      	cmp	r5, r3
 8008ac0:	d91d      	bls.n	8008afe <_dtoa_r+0x2ba>
 8008ac2:	0038      	movs	r0, r7
 8008ac4:	f000 fcfe 	bl	80094c4 <_Balloc>
 8008ac8:	9005      	str	r0, [sp, #20]
 8008aca:	2800      	cmp	r0, #0
 8008acc:	d11b      	bne.n	8008b06 <_dtoa_r+0x2c2>
 8008ace:	21d5      	movs	r1, #213	; 0xd5
 8008ad0:	0002      	movs	r2, r0
 8008ad2:	4b3c      	ldr	r3, [pc, #240]	; (8008bc4 <_dtoa_r+0x380>)
 8008ad4:	0049      	lsls	r1, r1, #1
 8008ad6:	e6ca      	b.n	800886e <_dtoa_r+0x2a>
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e7de      	b.n	8008a9a <_dtoa_r+0x256>
 8008adc:	2300      	movs	r3, #0
 8008ade:	940f      	str	r4, [sp, #60]	; 0x3c
 8008ae0:	9322      	str	r3, [sp, #136]	; 0x88
 8008ae2:	3b01      	subs	r3, #1
 8008ae4:	930c      	str	r3, [sp, #48]	; 0x30
 8008ae6:	9306      	str	r3, [sp, #24]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	3313      	adds	r3, #19
 8008aec:	e7d0      	b.n	8008a90 <_dtoa_r+0x24c>
 8008aee:	2301      	movs	r3, #1
 8008af0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008af2:	3b02      	subs	r3, #2
 8008af4:	e7f6      	b.n	8008ae4 <_dtoa_r+0x2a0>
 8008af6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008af8:	930c      	str	r3, [sp, #48]	; 0x30
 8008afa:	9306      	str	r3, [sp, #24]
 8008afc:	e7d8      	b.n	8008ab0 <_dtoa_r+0x26c>
 8008afe:	3101      	adds	r1, #1
 8008b00:	6041      	str	r1, [r0, #4]
 8008b02:	0052      	lsls	r2, r2, #1
 8008b04:	e7d8      	b.n	8008ab8 <_dtoa_r+0x274>
 8008b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b08:	9a05      	ldr	r2, [sp, #20]
 8008b0a:	601a      	str	r2, [r3, #0]
 8008b0c:	9b06      	ldr	r3, [sp, #24]
 8008b0e:	2b0e      	cmp	r3, #14
 8008b10:	d900      	bls.n	8008b14 <_dtoa_r+0x2d0>
 8008b12:	e0eb      	b.n	8008cec <_dtoa_r+0x4a8>
 8008b14:	2c00      	cmp	r4, #0
 8008b16:	d100      	bne.n	8008b1a <_dtoa_r+0x2d6>
 8008b18:	e0e8      	b.n	8008cec <_dtoa_r+0x4a8>
 8008b1a:	9b02      	ldr	r3, [sp, #8]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	dd68      	ble.n	8008bf2 <_dtoa_r+0x3ae>
 8008b20:	001a      	movs	r2, r3
 8008b22:	210f      	movs	r1, #15
 8008b24:	4b23      	ldr	r3, [pc, #140]	; (8008bb4 <_dtoa_r+0x370>)
 8008b26:	400a      	ands	r2, r1
 8008b28:	00d2      	lsls	r2, r2, #3
 8008b2a:	189b      	adds	r3, r3, r2
 8008b2c:	681d      	ldr	r5, [r3, #0]
 8008b2e:	685e      	ldr	r6, [r3, #4]
 8008b30:	9b02      	ldr	r3, [sp, #8]
 8008b32:	111c      	asrs	r4, r3, #4
 8008b34:	2302      	movs	r3, #2
 8008b36:	9310      	str	r3, [sp, #64]	; 0x40
 8008b38:	9b02      	ldr	r3, [sp, #8]
 8008b3a:	05db      	lsls	r3, r3, #23
 8008b3c:	d50b      	bpl.n	8008b56 <_dtoa_r+0x312>
 8008b3e:	4b22      	ldr	r3, [pc, #136]	; (8008bc8 <_dtoa_r+0x384>)
 8008b40:	400c      	ands	r4, r1
 8008b42:	6a1a      	ldr	r2, [r3, #32]
 8008b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b46:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008b48:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008b4a:	f7f8 fecb 	bl	80018e4 <__aeabi_ddiv>
 8008b4e:	2303      	movs	r3, #3
 8008b50:	900a      	str	r0, [sp, #40]	; 0x28
 8008b52:	910b      	str	r1, [sp, #44]	; 0x2c
 8008b54:	9310      	str	r3, [sp, #64]	; 0x40
 8008b56:	4b1c      	ldr	r3, [pc, #112]	; (8008bc8 <_dtoa_r+0x384>)
 8008b58:	9307      	str	r3, [sp, #28]
 8008b5a:	2c00      	cmp	r4, #0
 8008b5c:	d136      	bne.n	8008bcc <_dtoa_r+0x388>
 8008b5e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008b60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b62:	002a      	movs	r2, r5
 8008b64:	0033      	movs	r3, r6
 8008b66:	f7f8 febd 	bl	80018e4 <__aeabi_ddiv>
 8008b6a:	900a      	str	r0, [sp, #40]	; 0x28
 8008b6c:	910b      	str	r1, [sp, #44]	; 0x2c
 8008b6e:	e05c      	b.n	8008c2a <_dtoa_r+0x3e6>
 8008b70:	0800af89 	.word	0x0800af89
 8008b74:	0800afa0 	.word	0x0800afa0
 8008b78:	7ff00000 	.word	0x7ff00000
 8008b7c:	0000270f 	.word	0x0000270f
 8008b80:	0800af85 	.word	0x0800af85
 8008b84:	0800af88 	.word	0x0800af88
 8008b88:	0800af58 	.word	0x0800af58
 8008b8c:	0800af59 	.word	0x0800af59
 8008b90:	3ff00000 	.word	0x3ff00000
 8008b94:	fffffc01 	.word	0xfffffc01
 8008b98:	3ff80000 	.word	0x3ff80000
 8008b9c:	636f4361 	.word	0x636f4361
 8008ba0:	3fd287a7 	.word	0x3fd287a7
 8008ba4:	8b60c8b3 	.word	0x8b60c8b3
 8008ba8:	3fc68a28 	.word	0x3fc68a28
 8008bac:	509f79fb 	.word	0x509f79fb
 8008bb0:	3fd34413 	.word	0x3fd34413
 8008bb4:	0800b098 	.word	0x0800b098
 8008bb8:	00000432 	.word	0x00000432
 8008bbc:	00000412 	.word	0x00000412
 8008bc0:	fe100000 	.word	0xfe100000
 8008bc4:	0800afff 	.word	0x0800afff
 8008bc8:	0800b070 	.word	0x0800b070
 8008bcc:	2301      	movs	r3, #1
 8008bce:	421c      	tst	r4, r3
 8008bd0:	d00b      	beq.n	8008bea <_dtoa_r+0x3a6>
 8008bd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008bd4:	0028      	movs	r0, r5
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	9310      	str	r3, [sp, #64]	; 0x40
 8008bda:	9b07      	ldr	r3, [sp, #28]
 8008bdc:	0031      	movs	r1, r6
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	f7f9 fa85 	bl	80020f0 <__aeabi_dmul>
 8008be6:	0005      	movs	r5, r0
 8008be8:	000e      	movs	r6, r1
 8008bea:	9b07      	ldr	r3, [sp, #28]
 8008bec:	1064      	asrs	r4, r4, #1
 8008bee:	3308      	adds	r3, #8
 8008bf0:	e7b2      	b.n	8008b58 <_dtoa_r+0x314>
 8008bf2:	2302      	movs	r3, #2
 8008bf4:	9310      	str	r3, [sp, #64]	; 0x40
 8008bf6:	9b02      	ldr	r3, [sp, #8]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d016      	beq.n	8008c2a <_dtoa_r+0x3e6>
 8008bfc:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008bfe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008c00:	425c      	negs	r4, r3
 8008c02:	230f      	movs	r3, #15
 8008c04:	4ab5      	ldr	r2, [pc, #724]	; (8008edc <_dtoa_r+0x698>)
 8008c06:	4023      	ands	r3, r4
 8008c08:	00db      	lsls	r3, r3, #3
 8008c0a:	18d3      	adds	r3, r2, r3
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	f7f9 fa6e 	bl	80020f0 <__aeabi_dmul>
 8008c14:	2601      	movs	r6, #1
 8008c16:	2300      	movs	r3, #0
 8008c18:	900a      	str	r0, [sp, #40]	; 0x28
 8008c1a:	910b      	str	r1, [sp, #44]	; 0x2c
 8008c1c:	4db0      	ldr	r5, [pc, #704]	; (8008ee0 <_dtoa_r+0x69c>)
 8008c1e:	1124      	asrs	r4, r4, #4
 8008c20:	2c00      	cmp	r4, #0
 8008c22:	d000      	beq.n	8008c26 <_dtoa_r+0x3e2>
 8008c24:	e094      	b.n	8008d50 <_dtoa_r+0x50c>
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d19f      	bne.n	8008b6a <_dtoa_r+0x326>
 8008c2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d100      	bne.n	8008c32 <_dtoa_r+0x3ee>
 8008c30:	e09b      	b.n	8008d6a <_dtoa_r+0x526>
 8008c32:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008c34:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008c36:	2200      	movs	r2, #0
 8008c38:	0020      	movs	r0, r4
 8008c3a:	0029      	movs	r1, r5
 8008c3c:	4ba9      	ldr	r3, [pc, #676]	; (8008ee4 <_dtoa_r+0x6a0>)
 8008c3e:	f7f7 fc0b 	bl	8000458 <__aeabi_dcmplt>
 8008c42:	2800      	cmp	r0, #0
 8008c44:	d100      	bne.n	8008c48 <_dtoa_r+0x404>
 8008c46:	e090      	b.n	8008d6a <_dtoa_r+0x526>
 8008c48:	9b06      	ldr	r3, [sp, #24]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d100      	bne.n	8008c50 <_dtoa_r+0x40c>
 8008c4e:	e08c      	b.n	8008d6a <_dtoa_r+0x526>
 8008c50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	dd46      	ble.n	8008ce4 <_dtoa_r+0x4a0>
 8008c56:	9b02      	ldr	r3, [sp, #8]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	0020      	movs	r0, r4
 8008c5c:	0029      	movs	r1, r5
 8008c5e:	1e5e      	subs	r6, r3, #1
 8008c60:	4ba1      	ldr	r3, [pc, #644]	; (8008ee8 <_dtoa_r+0x6a4>)
 8008c62:	f7f9 fa45 	bl	80020f0 <__aeabi_dmul>
 8008c66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c68:	900a      	str	r0, [sp, #40]	; 0x28
 8008c6a:	910b      	str	r1, [sp, #44]	; 0x2c
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	9310      	str	r3, [sp, #64]	; 0x40
 8008c70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c72:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008c74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008c76:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008c78:	9307      	str	r3, [sp, #28]
 8008c7a:	f7fa f88b 	bl	8002d94 <__aeabi_i2d>
 8008c7e:	0022      	movs	r2, r4
 8008c80:	002b      	movs	r3, r5
 8008c82:	f7f9 fa35 	bl	80020f0 <__aeabi_dmul>
 8008c86:	2200      	movs	r2, #0
 8008c88:	4b98      	ldr	r3, [pc, #608]	; (8008eec <_dtoa_r+0x6a8>)
 8008c8a:	f7f8 fac1 	bl	8001210 <__aeabi_dadd>
 8008c8e:	9010      	str	r0, [sp, #64]	; 0x40
 8008c90:	9111      	str	r1, [sp, #68]	; 0x44
 8008c92:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008c94:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c96:	920a      	str	r2, [sp, #40]	; 0x28
 8008c98:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c9a:	4a95      	ldr	r2, [pc, #596]	; (8008ef0 <_dtoa_r+0x6ac>)
 8008c9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c9e:	4694      	mov	ip, r2
 8008ca0:	4463      	add	r3, ip
 8008ca2:	9317      	str	r3, [sp, #92]	; 0x5c
 8008ca4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ca6:	9b07      	ldr	r3, [sp, #28]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d161      	bne.n	8008d70 <_dtoa_r+0x52c>
 8008cac:	2200      	movs	r2, #0
 8008cae:	0020      	movs	r0, r4
 8008cb0:	0029      	movs	r1, r5
 8008cb2:	4b90      	ldr	r3, [pc, #576]	; (8008ef4 <_dtoa_r+0x6b0>)
 8008cb4:	f7f9 fc88 	bl	80025c8 <__aeabi_dsub>
 8008cb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008cbc:	0004      	movs	r4, r0
 8008cbe:	000d      	movs	r5, r1
 8008cc0:	f7f7 fbde 	bl	8000480 <__aeabi_dcmpgt>
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	d000      	beq.n	8008cca <_dtoa_r+0x486>
 8008cc8:	e2b5      	b.n	8009236 <_dtoa_r+0x9f2>
 8008cca:	488b      	ldr	r0, [pc, #556]	; (8008ef8 <_dtoa_r+0x6b4>)
 8008ccc:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008cce:	4684      	mov	ip, r0
 8008cd0:	4461      	add	r1, ip
 8008cd2:	000b      	movs	r3, r1
 8008cd4:	0020      	movs	r0, r4
 8008cd6:	0029      	movs	r1, r5
 8008cd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cda:	f7f7 fbbd 	bl	8000458 <__aeabi_dcmplt>
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	d000      	beq.n	8008ce4 <_dtoa_r+0x4a0>
 8008ce2:	e2a5      	b.n	8009230 <_dtoa_r+0x9ec>
 8008ce4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ce6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008ce8:	930a      	str	r3, [sp, #40]	; 0x28
 8008cea:	940b      	str	r4, [sp, #44]	; 0x2c
 8008cec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	da00      	bge.n	8008cf4 <_dtoa_r+0x4b0>
 8008cf2:	e171      	b.n	8008fd8 <_dtoa_r+0x794>
 8008cf4:	9a02      	ldr	r2, [sp, #8]
 8008cf6:	2a0e      	cmp	r2, #14
 8008cf8:	dd00      	ble.n	8008cfc <_dtoa_r+0x4b8>
 8008cfa:	e16d      	b.n	8008fd8 <_dtoa_r+0x794>
 8008cfc:	4b77      	ldr	r3, [pc, #476]	; (8008edc <_dtoa_r+0x698>)
 8008cfe:	00d2      	lsls	r2, r2, #3
 8008d00:	189b      	adds	r3, r3, r2
 8008d02:	685c      	ldr	r4, [r3, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	9308      	str	r3, [sp, #32]
 8008d08:	9409      	str	r4, [sp, #36]	; 0x24
 8008d0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	db00      	blt.n	8008d12 <_dtoa_r+0x4ce>
 8008d10:	e0f6      	b.n	8008f00 <_dtoa_r+0x6bc>
 8008d12:	9b06      	ldr	r3, [sp, #24]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	dd00      	ble.n	8008d1a <_dtoa_r+0x4d6>
 8008d18:	e0f2      	b.n	8008f00 <_dtoa_r+0x6bc>
 8008d1a:	d000      	beq.n	8008d1e <_dtoa_r+0x4da>
 8008d1c:	e288      	b.n	8009230 <_dtoa_r+0x9ec>
 8008d1e:	9808      	ldr	r0, [sp, #32]
 8008d20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d22:	2200      	movs	r2, #0
 8008d24:	4b73      	ldr	r3, [pc, #460]	; (8008ef4 <_dtoa_r+0x6b0>)
 8008d26:	f7f9 f9e3 	bl	80020f0 <__aeabi_dmul>
 8008d2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d2e:	f7f7 fbb1 	bl	8000494 <__aeabi_dcmpge>
 8008d32:	9e06      	ldr	r6, [sp, #24]
 8008d34:	0035      	movs	r5, r6
 8008d36:	2800      	cmp	r0, #0
 8008d38:	d000      	beq.n	8008d3c <_dtoa_r+0x4f8>
 8008d3a:	e25f      	b.n	80091fc <_dtoa_r+0x9b8>
 8008d3c:	9b05      	ldr	r3, [sp, #20]
 8008d3e:	9a05      	ldr	r2, [sp, #20]
 8008d40:	3301      	adds	r3, #1
 8008d42:	9307      	str	r3, [sp, #28]
 8008d44:	2331      	movs	r3, #49	; 0x31
 8008d46:	7013      	strb	r3, [r2, #0]
 8008d48:	9b02      	ldr	r3, [sp, #8]
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	9302      	str	r3, [sp, #8]
 8008d4e:	e25a      	b.n	8009206 <_dtoa_r+0x9c2>
 8008d50:	4234      	tst	r4, r6
 8008d52:	d007      	beq.n	8008d64 <_dtoa_r+0x520>
 8008d54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d56:	3301      	adds	r3, #1
 8008d58:	9310      	str	r3, [sp, #64]	; 0x40
 8008d5a:	682a      	ldr	r2, [r5, #0]
 8008d5c:	686b      	ldr	r3, [r5, #4]
 8008d5e:	f7f9 f9c7 	bl	80020f0 <__aeabi_dmul>
 8008d62:	0033      	movs	r3, r6
 8008d64:	1064      	asrs	r4, r4, #1
 8008d66:	3508      	adds	r5, #8
 8008d68:	e75a      	b.n	8008c20 <_dtoa_r+0x3dc>
 8008d6a:	9e02      	ldr	r6, [sp, #8]
 8008d6c:	9b06      	ldr	r3, [sp, #24]
 8008d6e:	e780      	b.n	8008c72 <_dtoa_r+0x42e>
 8008d70:	9b07      	ldr	r3, [sp, #28]
 8008d72:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008d74:	1e5a      	subs	r2, r3, #1
 8008d76:	4b59      	ldr	r3, [pc, #356]	; (8008edc <_dtoa_r+0x698>)
 8008d78:	00d2      	lsls	r2, r2, #3
 8008d7a:	189b      	adds	r3, r3, r2
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	2900      	cmp	r1, #0
 8008d82:	d051      	beq.n	8008e28 <_dtoa_r+0x5e4>
 8008d84:	2000      	movs	r0, #0
 8008d86:	495d      	ldr	r1, [pc, #372]	; (8008efc <_dtoa_r+0x6b8>)
 8008d88:	f7f8 fdac 	bl	80018e4 <__aeabi_ddiv>
 8008d8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d90:	f7f9 fc1a 	bl	80025c8 <__aeabi_dsub>
 8008d94:	9a05      	ldr	r2, [sp, #20]
 8008d96:	9b05      	ldr	r3, [sp, #20]
 8008d98:	4694      	mov	ip, r2
 8008d9a:	9310      	str	r3, [sp, #64]	; 0x40
 8008d9c:	9b07      	ldr	r3, [sp, #28]
 8008d9e:	900a      	str	r0, [sp, #40]	; 0x28
 8008da0:	910b      	str	r1, [sp, #44]	; 0x2c
 8008da2:	4463      	add	r3, ip
 8008da4:	9319      	str	r3, [sp, #100]	; 0x64
 8008da6:	0029      	movs	r1, r5
 8008da8:	0020      	movs	r0, r4
 8008daa:	f7f9 ffbd 	bl	8002d28 <__aeabi_d2iz>
 8008dae:	9017      	str	r0, [sp, #92]	; 0x5c
 8008db0:	f7f9 fff0 	bl	8002d94 <__aeabi_i2d>
 8008db4:	0002      	movs	r2, r0
 8008db6:	000b      	movs	r3, r1
 8008db8:	0020      	movs	r0, r4
 8008dba:	0029      	movs	r1, r5
 8008dbc:	f7f9 fc04 	bl	80025c8 <__aeabi_dsub>
 8008dc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008dc2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	9307      	str	r3, [sp, #28]
 8008dc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008dca:	0004      	movs	r4, r0
 8008dcc:	3330      	adds	r3, #48	; 0x30
 8008dce:	7013      	strb	r3, [r2, #0]
 8008dd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008dd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dd4:	000d      	movs	r5, r1
 8008dd6:	f7f7 fb3f 	bl	8000458 <__aeabi_dcmplt>
 8008dda:	2800      	cmp	r0, #0
 8008ddc:	d175      	bne.n	8008eca <_dtoa_r+0x686>
 8008dde:	0022      	movs	r2, r4
 8008de0:	002b      	movs	r3, r5
 8008de2:	2000      	movs	r0, #0
 8008de4:	493f      	ldr	r1, [pc, #252]	; (8008ee4 <_dtoa_r+0x6a0>)
 8008de6:	f7f9 fbef 	bl	80025c8 <__aeabi_dsub>
 8008dea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008dec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dee:	f7f7 fb33 	bl	8000458 <__aeabi_dcmplt>
 8008df2:	2800      	cmp	r0, #0
 8008df4:	d000      	beq.n	8008df8 <_dtoa_r+0x5b4>
 8008df6:	e0d1      	b.n	8008f9c <_dtoa_r+0x758>
 8008df8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008dfa:	9a07      	ldr	r2, [sp, #28]
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d100      	bne.n	8008e02 <_dtoa_r+0x5be>
 8008e00:	e770      	b.n	8008ce4 <_dtoa_r+0x4a0>
 8008e02:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008e04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e06:	2200      	movs	r2, #0
 8008e08:	4b37      	ldr	r3, [pc, #220]	; (8008ee8 <_dtoa_r+0x6a4>)
 8008e0a:	f7f9 f971 	bl	80020f0 <__aeabi_dmul>
 8008e0e:	4b36      	ldr	r3, [pc, #216]	; (8008ee8 <_dtoa_r+0x6a4>)
 8008e10:	900a      	str	r0, [sp, #40]	; 0x28
 8008e12:	910b      	str	r1, [sp, #44]	; 0x2c
 8008e14:	2200      	movs	r2, #0
 8008e16:	0020      	movs	r0, r4
 8008e18:	0029      	movs	r1, r5
 8008e1a:	f7f9 f969 	bl	80020f0 <__aeabi_dmul>
 8008e1e:	9b07      	ldr	r3, [sp, #28]
 8008e20:	0004      	movs	r4, r0
 8008e22:	000d      	movs	r5, r1
 8008e24:	9310      	str	r3, [sp, #64]	; 0x40
 8008e26:	e7be      	b.n	8008da6 <_dtoa_r+0x562>
 8008e28:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008e2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e2c:	f7f9 f960 	bl	80020f0 <__aeabi_dmul>
 8008e30:	9a05      	ldr	r2, [sp, #20]
 8008e32:	9b05      	ldr	r3, [sp, #20]
 8008e34:	4694      	mov	ip, r2
 8008e36:	930a      	str	r3, [sp, #40]	; 0x28
 8008e38:	9b07      	ldr	r3, [sp, #28]
 8008e3a:	9010      	str	r0, [sp, #64]	; 0x40
 8008e3c:	9111      	str	r1, [sp, #68]	; 0x44
 8008e3e:	4463      	add	r3, ip
 8008e40:	9319      	str	r3, [sp, #100]	; 0x64
 8008e42:	0029      	movs	r1, r5
 8008e44:	0020      	movs	r0, r4
 8008e46:	f7f9 ff6f 	bl	8002d28 <__aeabi_d2iz>
 8008e4a:	9017      	str	r0, [sp, #92]	; 0x5c
 8008e4c:	f7f9 ffa2 	bl	8002d94 <__aeabi_i2d>
 8008e50:	0002      	movs	r2, r0
 8008e52:	000b      	movs	r3, r1
 8008e54:	0020      	movs	r0, r4
 8008e56:	0029      	movs	r1, r5
 8008e58:	f7f9 fbb6 	bl	80025c8 <__aeabi_dsub>
 8008e5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e60:	3330      	adds	r3, #48	; 0x30
 8008e62:	7013      	strb	r3, [r2, #0]
 8008e64:	0013      	movs	r3, r2
 8008e66:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008e68:	3301      	adds	r3, #1
 8008e6a:	0004      	movs	r4, r0
 8008e6c:	000d      	movs	r5, r1
 8008e6e:	930a      	str	r3, [sp, #40]	; 0x28
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d12c      	bne.n	8008ece <_dtoa_r+0x68a>
 8008e74:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008e76:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008e78:	9a05      	ldr	r2, [sp, #20]
 8008e7a:	9b07      	ldr	r3, [sp, #28]
 8008e7c:	4694      	mov	ip, r2
 8008e7e:	4463      	add	r3, ip
 8008e80:	2200      	movs	r2, #0
 8008e82:	9307      	str	r3, [sp, #28]
 8008e84:	4b1d      	ldr	r3, [pc, #116]	; (8008efc <_dtoa_r+0x6b8>)
 8008e86:	f7f8 f9c3 	bl	8001210 <__aeabi_dadd>
 8008e8a:	0002      	movs	r2, r0
 8008e8c:	000b      	movs	r3, r1
 8008e8e:	0020      	movs	r0, r4
 8008e90:	0029      	movs	r1, r5
 8008e92:	f7f7 faf5 	bl	8000480 <__aeabi_dcmpgt>
 8008e96:	2800      	cmp	r0, #0
 8008e98:	d000      	beq.n	8008e9c <_dtoa_r+0x658>
 8008e9a:	e07f      	b.n	8008f9c <_dtoa_r+0x758>
 8008e9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ea0:	2000      	movs	r0, #0
 8008ea2:	4916      	ldr	r1, [pc, #88]	; (8008efc <_dtoa_r+0x6b8>)
 8008ea4:	f7f9 fb90 	bl	80025c8 <__aeabi_dsub>
 8008ea8:	0002      	movs	r2, r0
 8008eaa:	000b      	movs	r3, r1
 8008eac:	0020      	movs	r0, r4
 8008eae:	0029      	movs	r1, r5
 8008eb0:	f7f7 fad2 	bl	8000458 <__aeabi_dcmplt>
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	d100      	bne.n	8008eba <_dtoa_r+0x676>
 8008eb8:	e714      	b.n	8008ce4 <_dtoa_r+0x4a0>
 8008eba:	9b07      	ldr	r3, [sp, #28]
 8008ebc:	001a      	movs	r2, r3
 8008ebe:	3a01      	subs	r2, #1
 8008ec0:	9207      	str	r2, [sp, #28]
 8008ec2:	7812      	ldrb	r2, [r2, #0]
 8008ec4:	2a30      	cmp	r2, #48	; 0x30
 8008ec6:	d0f8      	beq.n	8008eba <_dtoa_r+0x676>
 8008ec8:	9307      	str	r3, [sp, #28]
 8008eca:	9602      	str	r6, [sp, #8]
 8008ecc:	e054      	b.n	8008f78 <_dtoa_r+0x734>
 8008ece:	2200      	movs	r2, #0
 8008ed0:	4b05      	ldr	r3, [pc, #20]	; (8008ee8 <_dtoa_r+0x6a4>)
 8008ed2:	f7f9 f90d 	bl	80020f0 <__aeabi_dmul>
 8008ed6:	0004      	movs	r4, r0
 8008ed8:	000d      	movs	r5, r1
 8008eda:	e7b2      	b.n	8008e42 <_dtoa_r+0x5fe>
 8008edc:	0800b098 	.word	0x0800b098
 8008ee0:	0800b070 	.word	0x0800b070
 8008ee4:	3ff00000 	.word	0x3ff00000
 8008ee8:	40240000 	.word	0x40240000
 8008eec:	401c0000 	.word	0x401c0000
 8008ef0:	fcc00000 	.word	0xfcc00000
 8008ef4:	40140000 	.word	0x40140000
 8008ef8:	7cc00000 	.word	0x7cc00000
 8008efc:	3fe00000 	.word	0x3fe00000
 8008f00:	9b06      	ldr	r3, [sp, #24]
 8008f02:	9e05      	ldr	r6, [sp, #20]
 8008f04:	3b01      	subs	r3, #1
 8008f06:	199b      	adds	r3, r3, r6
 8008f08:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008f0a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008f0c:	930a      	str	r3, [sp, #40]	; 0x28
 8008f0e:	9a08      	ldr	r2, [sp, #32]
 8008f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f12:	0020      	movs	r0, r4
 8008f14:	0029      	movs	r1, r5
 8008f16:	f7f8 fce5 	bl	80018e4 <__aeabi_ddiv>
 8008f1a:	f7f9 ff05 	bl	8002d28 <__aeabi_d2iz>
 8008f1e:	9006      	str	r0, [sp, #24]
 8008f20:	f7f9 ff38 	bl	8002d94 <__aeabi_i2d>
 8008f24:	9a08      	ldr	r2, [sp, #32]
 8008f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f28:	f7f9 f8e2 	bl	80020f0 <__aeabi_dmul>
 8008f2c:	0002      	movs	r2, r0
 8008f2e:	000b      	movs	r3, r1
 8008f30:	0020      	movs	r0, r4
 8008f32:	0029      	movs	r1, r5
 8008f34:	f7f9 fb48 	bl	80025c8 <__aeabi_dsub>
 8008f38:	0033      	movs	r3, r6
 8008f3a:	9a06      	ldr	r2, [sp, #24]
 8008f3c:	3601      	adds	r6, #1
 8008f3e:	3230      	adds	r2, #48	; 0x30
 8008f40:	701a      	strb	r2, [r3, #0]
 8008f42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f44:	9607      	str	r6, [sp, #28]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d139      	bne.n	8008fbe <_dtoa_r+0x77a>
 8008f4a:	0002      	movs	r2, r0
 8008f4c:	000b      	movs	r3, r1
 8008f4e:	f7f8 f95f 	bl	8001210 <__aeabi_dadd>
 8008f52:	9a08      	ldr	r2, [sp, #32]
 8008f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f56:	0004      	movs	r4, r0
 8008f58:	000d      	movs	r5, r1
 8008f5a:	f7f7 fa91 	bl	8000480 <__aeabi_dcmpgt>
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	d11b      	bne.n	8008f9a <_dtoa_r+0x756>
 8008f62:	9a08      	ldr	r2, [sp, #32]
 8008f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f66:	0020      	movs	r0, r4
 8008f68:	0029      	movs	r1, r5
 8008f6a:	f7f7 fa6f 	bl	800044c <__aeabi_dcmpeq>
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	d002      	beq.n	8008f78 <_dtoa_r+0x734>
 8008f72:	9b06      	ldr	r3, [sp, #24]
 8008f74:	07db      	lsls	r3, r3, #31
 8008f76:	d410      	bmi.n	8008f9a <_dtoa_r+0x756>
 8008f78:	0038      	movs	r0, r7
 8008f7a:	9904      	ldr	r1, [sp, #16]
 8008f7c:	f000 fae6 	bl	800954c <_Bfree>
 8008f80:	2300      	movs	r3, #0
 8008f82:	9a07      	ldr	r2, [sp, #28]
 8008f84:	9802      	ldr	r0, [sp, #8]
 8008f86:	7013      	strb	r3, [r2, #0]
 8008f88:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008f8a:	3001      	adds	r0, #1
 8008f8c:	6018      	str	r0, [r3, #0]
 8008f8e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d100      	bne.n	8008f96 <_dtoa_r+0x752>
 8008f94:	e4a3      	b.n	80088de <_dtoa_r+0x9a>
 8008f96:	601a      	str	r2, [r3, #0]
 8008f98:	e4a1      	b.n	80088de <_dtoa_r+0x9a>
 8008f9a:	9e02      	ldr	r6, [sp, #8]
 8008f9c:	9b07      	ldr	r3, [sp, #28]
 8008f9e:	9307      	str	r3, [sp, #28]
 8008fa0:	3b01      	subs	r3, #1
 8008fa2:	781a      	ldrb	r2, [r3, #0]
 8008fa4:	2a39      	cmp	r2, #57	; 0x39
 8008fa6:	d106      	bne.n	8008fb6 <_dtoa_r+0x772>
 8008fa8:	9a05      	ldr	r2, [sp, #20]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d1f7      	bne.n	8008f9e <_dtoa_r+0x75a>
 8008fae:	2230      	movs	r2, #48	; 0x30
 8008fb0:	9905      	ldr	r1, [sp, #20]
 8008fb2:	3601      	adds	r6, #1
 8008fb4:	700a      	strb	r2, [r1, #0]
 8008fb6:	781a      	ldrb	r2, [r3, #0]
 8008fb8:	3201      	adds	r2, #1
 8008fba:	701a      	strb	r2, [r3, #0]
 8008fbc:	e785      	b.n	8008eca <_dtoa_r+0x686>
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	4bad      	ldr	r3, [pc, #692]	; (8009278 <_dtoa_r+0xa34>)
 8008fc2:	f7f9 f895 	bl	80020f0 <__aeabi_dmul>
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	2300      	movs	r3, #0
 8008fca:	0004      	movs	r4, r0
 8008fcc:	000d      	movs	r5, r1
 8008fce:	f7f7 fa3d 	bl	800044c <__aeabi_dcmpeq>
 8008fd2:	2800      	cmp	r0, #0
 8008fd4:	d09b      	beq.n	8008f0e <_dtoa_r+0x6ca>
 8008fd6:	e7cf      	b.n	8008f78 <_dtoa_r+0x734>
 8008fd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008fda:	2a00      	cmp	r2, #0
 8008fdc:	d100      	bne.n	8008fe0 <_dtoa_r+0x79c>
 8008fde:	e082      	b.n	80090e6 <_dtoa_r+0x8a2>
 8008fe0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008fe2:	2a01      	cmp	r2, #1
 8008fe4:	dc66      	bgt.n	80090b4 <_dtoa_r+0x870>
 8008fe6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008fe8:	2a00      	cmp	r2, #0
 8008fea:	d05f      	beq.n	80090ac <_dtoa_r+0x868>
 8008fec:	4aa3      	ldr	r2, [pc, #652]	; (800927c <_dtoa_r+0xa38>)
 8008fee:	189b      	adds	r3, r3, r2
 8008ff0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008ff2:	9c08      	ldr	r4, [sp, #32]
 8008ff4:	9a08      	ldr	r2, [sp, #32]
 8008ff6:	2101      	movs	r1, #1
 8008ff8:	18d2      	adds	r2, r2, r3
 8008ffa:	9208      	str	r2, [sp, #32]
 8008ffc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ffe:	0038      	movs	r0, r7
 8009000:	18d3      	adds	r3, r2, r3
 8009002:	930d      	str	r3, [sp, #52]	; 0x34
 8009004:	f000 fb52 	bl	80096ac <__i2b>
 8009008:	0005      	movs	r5, r0
 800900a:	2c00      	cmp	r4, #0
 800900c:	dd0e      	ble.n	800902c <_dtoa_r+0x7e8>
 800900e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009010:	2b00      	cmp	r3, #0
 8009012:	dd0b      	ble.n	800902c <_dtoa_r+0x7e8>
 8009014:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009016:	0023      	movs	r3, r4
 8009018:	4294      	cmp	r4, r2
 800901a:	dd00      	ble.n	800901e <_dtoa_r+0x7da>
 800901c:	0013      	movs	r3, r2
 800901e:	9a08      	ldr	r2, [sp, #32]
 8009020:	1ae4      	subs	r4, r4, r3
 8009022:	1ad2      	subs	r2, r2, r3
 8009024:	9208      	str	r2, [sp, #32]
 8009026:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009028:	1ad3      	subs	r3, r2, r3
 800902a:	930d      	str	r3, [sp, #52]	; 0x34
 800902c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800902e:	2b00      	cmp	r3, #0
 8009030:	d01f      	beq.n	8009072 <_dtoa_r+0x82e>
 8009032:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009034:	2b00      	cmp	r3, #0
 8009036:	d05a      	beq.n	80090ee <_dtoa_r+0x8aa>
 8009038:	2e00      	cmp	r6, #0
 800903a:	dd11      	ble.n	8009060 <_dtoa_r+0x81c>
 800903c:	0029      	movs	r1, r5
 800903e:	0032      	movs	r2, r6
 8009040:	0038      	movs	r0, r7
 8009042:	f000 fbf9 	bl	8009838 <__pow5mult>
 8009046:	9a04      	ldr	r2, [sp, #16]
 8009048:	0001      	movs	r1, r0
 800904a:	0005      	movs	r5, r0
 800904c:	0038      	movs	r0, r7
 800904e:	f000 fb43 	bl	80096d8 <__multiply>
 8009052:	9904      	ldr	r1, [sp, #16]
 8009054:	9007      	str	r0, [sp, #28]
 8009056:	0038      	movs	r0, r7
 8009058:	f000 fa78 	bl	800954c <_Bfree>
 800905c:	9b07      	ldr	r3, [sp, #28]
 800905e:	9304      	str	r3, [sp, #16]
 8009060:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009062:	1b9a      	subs	r2, r3, r6
 8009064:	42b3      	cmp	r3, r6
 8009066:	d004      	beq.n	8009072 <_dtoa_r+0x82e>
 8009068:	0038      	movs	r0, r7
 800906a:	9904      	ldr	r1, [sp, #16]
 800906c:	f000 fbe4 	bl	8009838 <__pow5mult>
 8009070:	9004      	str	r0, [sp, #16]
 8009072:	2101      	movs	r1, #1
 8009074:	0038      	movs	r0, r7
 8009076:	f000 fb19 	bl	80096ac <__i2b>
 800907a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800907c:	0006      	movs	r6, r0
 800907e:	2b00      	cmp	r3, #0
 8009080:	dd37      	ble.n	80090f2 <_dtoa_r+0x8ae>
 8009082:	001a      	movs	r2, r3
 8009084:	0001      	movs	r1, r0
 8009086:	0038      	movs	r0, r7
 8009088:	f000 fbd6 	bl	8009838 <__pow5mult>
 800908c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800908e:	0006      	movs	r6, r0
 8009090:	2b01      	cmp	r3, #1
 8009092:	dd33      	ble.n	80090fc <_dtoa_r+0x8b8>
 8009094:	2300      	movs	r3, #0
 8009096:	9307      	str	r3, [sp, #28]
 8009098:	6933      	ldr	r3, [r6, #16]
 800909a:	3303      	adds	r3, #3
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	18f3      	adds	r3, r6, r3
 80090a0:	6858      	ldr	r0, [r3, #4]
 80090a2:	f000 fabb 	bl	800961c <__hi0bits>
 80090a6:	2320      	movs	r3, #32
 80090a8:	1a18      	subs	r0, r3, r0
 80090aa:	e03f      	b.n	800912c <_dtoa_r+0x8e8>
 80090ac:	2336      	movs	r3, #54	; 0x36
 80090ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80090b0:	1a9b      	subs	r3, r3, r2
 80090b2:	e79d      	b.n	8008ff0 <_dtoa_r+0x7ac>
 80090b4:	9b06      	ldr	r3, [sp, #24]
 80090b6:	1e5e      	subs	r6, r3, #1
 80090b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090ba:	42b3      	cmp	r3, r6
 80090bc:	db08      	blt.n	80090d0 <_dtoa_r+0x88c>
 80090be:	1b9e      	subs	r6, r3, r6
 80090c0:	9b06      	ldr	r3, [sp, #24]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	da0c      	bge.n	80090e0 <_dtoa_r+0x89c>
 80090c6:	9b08      	ldr	r3, [sp, #32]
 80090c8:	9a06      	ldr	r2, [sp, #24]
 80090ca:	1a9c      	subs	r4, r3, r2
 80090cc:	2300      	movs	r3, #0
 80090ce:	e791      	b.n	8008ff4 <_dtoa_r+0x7b0>
 80090d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80090d4:	1af3      	subs	r3, r6, r3
 80090d6:	18d3      	adds	r3, r2, r3
 80090d8:	960e      	str	r6, [sp, #56]	; 0x38
 80090da:	9314      	str	r3, [sp, #80]	; 0x50
 80090dc:	2600      	movs	r6, #0
 80090de:	e7ef      	b.n	80090c0 <_dtoa_r+0x87c>
 80090e0:	9c08      	ldr	r4, [sp, #32]
 80090e2:	9b06      	ldr	r3, [sp, #24]
 80090e4:	e786      	b.n	8008ff4 <_dtoa_r+0x7b0>
 80090e6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80090e8:	9c08      	ldr	r4, [sp, #32]
 80090ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80090ec:	e78d      	b.n	800900a <_dtoa_r+0x7c6>
 80090ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090f0:	e7ba      	b.n	8009068 <_dtoa_r+0x824>
 80090f2:	2300      	movs	r3, #0
 80090f4:	9307      	str	r3, [sp, #28]
 80090f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	dc13      	bgt.n	8009124 <_dtoa_r+0x8e0>
 80090fc:	2300      	movs	r3, #0
 80090fe:	9307      	str	r3, [sp, #28]
 8009100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009102:	2b00      	cmp	r3, #0
 8009104:	d10e      	bne.n	8009124 <_dtoa_r+0x8e0>
 8009106:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009108:	031b      	lsls	r3, r3, #12
 800910a:	d10b      	bne.n	8009124 <_dtoa_r+0x8e0>
 800910c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800910e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009110:	4213      	tst	r3, r2
 8009112:	d007      	beq.n	8009124 <_dtoa_r+0x8e0>
 8009114:	9b08      	ldr	r3, [sp, #32]
 8009116:	3301      	adds	r3, #1
 8009118:	9308      	str	r3, [sp, #32]
 800911a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800911c:	3301      	adds	r3, #1
 800911e:	930d      	str	r3, [sp, #52]	; 0x34
 8009120:	2301      	movs	r3, #1
 8009122:	9307      	str	r3, [sp, #28]
 8009124:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009126:	2001      	movs	r0, #1
 8009128:	2b00      	cmp	r3, #0
 800912a:	d1b5      	bne.n	8009098 <_dtoa_r+0x854>
 800912c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800912e:	221f      	movs	r2, #31
 8009130:	1818      	adds	r0, r3, r0
 8009132:	0003      	movs	r3, r0
 8009134:	4013      	ands	r3, r2
 8009136:	4210      	tst	r0, r2
 8009138:	d046      	beq.n	80091c8 <_dtoa_r+0x984>
 800913a:	3201      	adds	r2, #1
 800913c:	1ad2      	subs	r2, r2, r3
 800913e:	2a04      	cmp	r2, #4
 8009140:	dd3f      	ble.n	80091c2 <_dtoa_r+0x97e>
 8009142:	221c      	movs	r2, #28
 8009144:	1ad3      	subs	r3, r2, r3
 8009146:	9a08      	ldr	r2, [sp, #32]
 8009148:	18e4      	adds	r4, r4, r3
 800914a:	18d2      	adds	r2, r2, r3
 800914c:	9208      	str	r2, [sp, #32]
 800914e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009150:	18d3      	adds	r3, r2, r3
 8009152:	930d      	str	r3, [sp, #52]	; 0x34
 8009154:	9b08      	ldr	r3, [sp, #32]
 8009156:	2b00      	cmp	r3, #0
 8009158:	dd05      	ble.n	8009166 <_dtoa_r+0x922>
 800915a:	001a      	movs	r2, r3
 800915c:	0038      	movs	r0, r7
 800915e:	9904      	ldr	r1, [sp, #16]
 8009160:	f000 fbc6 	bl	80098f0 <__lshift>
 8009164:	9004      	str	r0, [sp, #16]
 8009166:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009168:	2b00      	cmp	r3, #0
 800916a:	dd05      	ble.n	8009178 <_dtoa_r+0x934>
 800916c:	0031      	movs	r1, r6
 800916e:	001a      	movs	r2, r3
 8009170:	0038      	movs	r0, r7
 8009172:	f000 fbbd 	bl	80098f0 <__lshift>
 8009176:	0006      	movs	r6, r0
 8009178:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800917a:	2b00      	cmp	r3, #0
 800917c:	d026      	beq.n	80091cc <_dtoa_r+0x988>
 800917e:	0031      	movs	r1, r6
 8009180:	9804      	ldr	r0, [sp, #16]
 8009182:	f000 fc25 	bl	80099d0 <__mcmp>
 8009186:	2800      	cmp	r0, #0
 8009188:	da20      	bge.n	80091cc <_dtoa_r+0x988>
 800918a:	9b02      	ldr	r3, [sp, #8]
 800918c:	220a      	movs	r2, #10
 800918e:	3b01      	subs	r3, #1
 8009190:	9302      	str	r3, [sp, #8]
 8009192:	0038      	movs	r0, r7
 8009194:	2300      	movs	r3, #0
 8009196:	9904      	ldr	r1, [sp, #16]
 8009198:	f000 f9fc 	bl	8009594 <__multadd>
 800919c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800919e:	9004      	str	r0, [sp, #16]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d100      	bne.n	80091a6 <_dtoa_r+0x962>
 80091a4:	e160      	b.n	8009468 <_dtoa_r+0xc24>
 80091a6:	2300      	movs	r3, #0
 80091a8:	0029      	movs	r1, r5
 80091aa:	220a      	movs	r2, #10
 80091ac:	0038      	movs	r0, r7
 80091ae:	f000 f9f1 	bl	8009594 <__multadd>
 80091b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091b4:	0005      	movs	r5, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	dc47      	bgt.n	800924a <_dtoa_r+0xa06>
 80091ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091bc:	2b02      	cmp	r3, #2
 80091be:	dc0d      	bgt.n	80091dc <_dtoa_r+0x998>
 80091c0:	e043      	b.n	800924a <_dtoa_r+0xa06>
 80091c2:	2a04      	cmp	r2, #4
 80091c4:	d0c6      	beq.n	8009154 <_dtoa_r+0x910>
 80091c6:	0013      	movs	r3, r2
 80091c8:	331c      	adds	r3, #28
 80091ca:	e7bc      	b.n	8009146 <_dtoa_r+0x902>
 80091cc:	9b06      	ldr	r3, [sp, #24]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	dc35      	bgt.n	800923e <_dtoa_r+0x9fa>
 80091d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	dd32      	ble.n	800923e <_dtoa_r+0x9fa>
 80091d8:	9b06      	ldr	r3, [sp, #24]
 80091da:	930c      	str	r3, [sp, #48]	; 0x30
 80091dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d10c      	bne.n	80091fc <_dtoa_r+0x9b8>
 80091e2:	0031      	movs	r1, r6
 80091e4:	2205      	movs	r2, #5
 80091e6:	0038      	movs	r0, r7
 80091e8:	f000 f9d4 	bl	8009594 <__multadd>
 80091ec:	0006      	movs	r6, r0
 80091ee:	0001      	movs	r1, r0
 80091f0:	9804      	ldr	r0, [sp, #16]
 80091f2:	f000 fbed 	bl	80099d0 <__mcmp>
 80091f6:	2800      	cmp	r0, #0
 80091f8:	dd00      	ble.n	80091fc <_dtoa_r+0x9b8>
 80091fa:	e59f      	b.n	8008d3c <_dtoa_r+0x4f8>
 80091fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80091fe:	43db      	mvns	r3, r3
 8009200:	9302      	str	r3, [sp, #8]
 8009202:	9b05      	ldr	r3, [sp, #20]
 8009204:	9307      	str	r3, [sp, #28]
 8009206:	2400      	movs	r4, #0
 8009208:	0031      	movs	r1, r6
 800920a:	0038      	movs	r0, r7
 800920c:	f000 f99e 	bl	800954c <_Bfree>
 8009210:	2d00      	cmp	r5, #0
 8009212:	d100      	bne.n	8009216 <_dtoa_r+0x9d2>
 8009214:	e6b0      	b.n	8008f78 <_dtoa_r+0x734>
 8009216:	2c00      	cmp	r4, #0
 8009218:	d005      	beq.n	8009226 <_dtoa_r+0x9e2>
 800921a:	42ac      	cmp	r4, r5
 800921c:	d003      	beq.n	8009226 <_dtoa_r+0x9e2>
 800921e:	0021      	movs	r1, r4
 8009220:	0038      	movs	r0, r7
 8009222:	f000 f993 	bl	800954c <_Bfree>
 8009226:	0029      	movs	r1, r5
 8009228:	0038      	movs	r0, r7
 800922a:	f000 f98f 	bl	800954c <_Bfree>
 800922e:	e6a3      	b.n	8008f78 <_dtoa_r+0x734>
 8009230:	2600      	movs	r6, #0
 8009232:	0035      	movs	r5, r6
 8009234:	e7e2      	b.n	80091fc <_dtoa_r+0x9b8>
 8009236:	9602      	str	r6, [sp, #8]
 8009238:	9e07      	ldr	r6, [sp, #28]
 800923a:	0035      	movs	r5, r6
 800923c:	e57e      	b.n	8008d3c <_dtoa_r+0x4f8>
 800923e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009240:	2b00      	cmp	r3, #0
 8009242:	d100      	bne.n	8009246 <_dtoa_r+0xa02>
 8009244:	e0c8      	b.n	80093d8 <_dtoa_r+0xb94>
 8009246:	9b06      	ldr	r3, [sp, #24]
 8009248:	930c      	str	r3, [sp, #48]	; 0x30
 800924a:	2c00      	cmp	r4, #0
 800924c:	dd05      	ble.n	800925a <_dtoa_r+0xa16>
 800924e:	0029      	movs	r1, r5
 8009250:	0022      	movs	r2, r4
 8009252:	0038      	movs	r0, r7
 8009254:	f000 fb4c 	bl	80098f0 <__lshift>
 8009258:	0005      	movs	r5, r0
 800925a:	9b07      	ldr	r3, [sp, #28]
 800925c:	0028      	movs	r0, r5
 800925e:	2b00      	cmp	r3, #0
 8009260:	d01f      	beq.n	80092a2 <_dtoa_r+0xa5e>
 8009262:	0038      	movs	r0, r7
 8009264:	6869      	ldr	r1, [r5, #4]
 8009266:	f000 f92d 	bl	80094c4 <_Balloc>
 800926a:	1e04      	subs	r4, r0, #0
 800926c:	d10c      	bne.n	8009288 <_dtoa_r+0xa44>
 800926e:	0002      	movs	r2, r0
 8009270:	4b03      	ldr	r3, [pc, #12]	; (8009280 <_dtoa_r+0xa3c>)
 8009272:	4904      	ldr	r1, [pc, #16]	; (8009284 <_dtoa_r+0xa40>)
 8009274:	f7ff fafb 	bl	800886e <_dtoa_r+0x2a>
 8009278:	40240000 	.word	0x40240000
 800927c:	00000433 	.word	0x00000433
 8009280:	0800afff 	.word	0x0800afff
 8009284:	000002ea 	.word	0x000002ea
 8009288:	0029      	movs	r1, r5
 800928a:	692b      	ldr	r3, [r5, #16]
 800928c:	310c      	adds	r1, #12
 800928e:	1c9a      	adds	r2, r3, #2
 8009290:	0092      	lsls	r2, r2, #2
 8009292:	300c      	adds	r0, #12
 8009294:	f000 f90d 	bl	80094b2 <memcpy>
 8009298:	2201      	movs	r2, #1
 800929a:	0021      	movs	r1, r4
 800929c:	0038      	movs	r0, r7
 800929e:	f000 fb27 	bl	80098f0 <__lshift>
 80092a2:	002c      	movs	r4, r5
 80092a4:	0005      	movs	r5, r0
 80092a6:	9b05      	ldr	r3, [sp, #20]
 80092a8:	9308      	str	r3, [sp, #32]
 80092aa:	0031      	movs	r1, r6
 80092ac:	9804      	ldr	r0, [sp, #16]
 80092ae:	f7ff fa3d 	bl	800872c <quorem>
 80092b2:	0003      	movs	r3, r0
 80092b4:	0021      	movs	r1, r4
 80092b6:	3330      	adds	r3, #48	; 0x30
 80092b8:	900e      	str	r0, [sp, #56]	; 0x38
 80092ba:	9804      	ldr	r0, [sp, #16]
 80092bc:	9306      	str	r3, [sp, #24]
 80092be:	f000 fb87 	bl	80099d0 <__mcmp>
 80092c2:	002a      	movs	r2, r5
 80092c4:	900f      	str	r0, [sp, #60]	; 0x3c
 80092c6:	0031      	movs	r1, r6
 80092c8:	0038      	movs	r0, r7
 80092ca:	f000 fb9d 	bl	8009a08 <__mdiff>
 80092ce:	68c3      	ldr	r3, [r0, #12]
 80092d0:	9007      	str	r0, [sp, #28]
 80092d2:	9310      	str	r3, [sp, #64]	; 0x40
 80092d4:	2301      	movs	r3, #1
 80092d6:	930d      	str	r3, [sp, #52]	; 0x34
 80092d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d104      	bne.n	80092e8 <_dtoa_r+0xaa4>
 80092de:	0001      	movs	r1, r0
 80092e0:	9804      	ldr	r0, [sp, #16]
 80092e2:	f000 fb75 	bl	80099d0 <__mcmp>
 80092e6:	900d      	str	r0, [sp, #52]	; 0x34
 80092e8:	0038      	movs	r0, r7
 80092ea:	9907      	ldr	r1, [sp, #28]
 80092ec:	f000 f92e 	bl	800954c <_Bfree>
 80092f0:	2301      	movs	r3, #1
 80092f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80092f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80092f6:	4018      	ands	r0, r3
 80092f8:	9b08      	ldr	r3, [sp, #32]
 80092fa:	3301      	adds	r3, #1
 80092fc:	9307      	str	r3, [sp, #28]
 80092fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009300:	4313      	orrs	r3, r2
 8009302:	4303      	orrs	r3, r0
 8009304:	d10c      	bne.n	8009320 <_dtoa_r+0xadc>
 8009306:	9b06      	ldr	r3, [sp, #24]
 8009308:	2b39      	cmp	r3, #57	; 0x39
 800930a:	d025      	beq.n	8009358 <_dtoa_r+0xb14>
 800930c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800930e:	2b00      	cmp	r3, #0
 8009310:	dd02      	ble.n	8009318 <_dtoa_r+0xad4>
 8009312:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009314:	3331      	adds	r3, #49	; 0x31
 8009316:	9306      	str	r3, [sp, #24]
 8009318:	9b08      	ldr	r3, [sp, #32]
 800931a:	9a06      	ldr	r2, [sp, #24]
 800931c:	701a      	strb	r2, [r3, #0]
 800931e:	e773      	b.n	8009208 <_dtoa_r+0x9c4>
 8009320:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009322:	2b00      	cmp	r3, #0
 8009324:	db03      	blt.n	800932e <_dtoa_r+0xaea>
 8009326:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009328:	4313      	orrs	r3, r2
 800932a:	4303      	orrs	r3, r0
 800932c:	d11f      	bne.n	800936e <_dtoa_r+0xb2a>
 800932e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009330:	2b00      	cmp	r3, #0
 8009332:	ddf1      	ble.n	8009318 <_dtoa_r+0xad4>
 8009334:	9904      	ldr	r1, [sp, #16]
 8009336:	2201      	movs	r2, #1
 8009338:	0038      	movs	r0, r7
 800933a:	f000 fad9 	bl	80098f0 <__lshift>
 800933e:	0031      	movs	r1, r6
 8009340:	9004      	str	r0, [sp, #16]
 8009342:	f000 fb45 	bl	80099d0 <__mcmp>
 8009346:	2800      	cmp	r0, #0
 8009348:	dc03      	bgt.n	8009352 <_dtoa_r+0xb0e>
 800934a:	d1e5      	bne.n	8009318 <_dtoa_r+0xad4>
 800934c:	9b06      	ldr	r3, [sp, #24]
 800934e:	07db      	lsls	r3, r3, #31
 8009350:	d5e2      	bpl.n	8009318 <_dtoa_r+0xad4>
 8009352:	9b06      	ldr	r3, [sp, #24]
 8009354:	2b39      	cmp	r3, #57	; 0x39
 8009356:	d1dc      	bne.n	8009312 <_dtoa_r+0xace>
 8009358:	2339      	movs	r3, #57	; 0x39
 800935a:	9a08      	ldr	r2, [sp, #32]
 800935c:	7013      	strb	r3, [r2, #0]
 800935e:	9b07      	ldr	r3, [sp, #28]
 8009360:	9307      	str	r3, [sp, #28]
 8009362:	3b01      	subs	r3, #1
 8009364:	781a      	ldrb	r2, [r3, #0]
 8009366:	2a39      	cmp	r2, #57	; 0x39
 8009368:	d06c      	beq.n	8009444 <_dtoa_r+0xc00>
 800936a:	3201      	adds	r2, #1
 800936c:	e7d6      	b.n	800931c <_dtoa_r+0xad8>
 800936e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009370:	2b00      	cmp	r3, #0
 8009372:	dd07      	ble.n	8009384 <_dtoa_r+0xb40>
 8009374:	9b06      	ldr	r3, [sp, #24]
 8009376:	2b39      	cmp	r3, #57	; 0x39
 8009378:	d0ee      	beq.n	8009358 <_dtoa_r+0xb14>
 800937a:	9b06      	ldr	r3, [sp, #24]
 800937c:	9a08      	ldr	r2, [sp, #32]
 800937e:	3301      	adds	r3, #1
 8009380:	7013      	strb	r3, [r2, #0]
 8009382:	e741      	b.n	8009208 <_dtoa_r+0x9c4>
 8009384:	9b08      	ldr	r3, [sp, #32]
 8009386:	9a06      	ldr	r2, [sp, #24]
 8009388:	701a      	strb	r2, [r3, #0]
 800938a:	2301      	movs	r3, #1
 800938c:	9a05      	ldr	r2, [sp, #20]
 800938e:	1a9b      	subs	r3, r3, r2
 8009390:	9a08      	ldr	r2, [sp, #32]
 8009392:	189b      	adds	r3, r3, r2
 8009394:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009396:	429a      	cmp	r2, r3
 8009398:	d03e      	beq.n	8009418 <_dtoa_r+0xbd4>
 800939a:	2300      	movs	r3, #0
 800939c:	220a      	movs	r2, #10
 800939e:	9904      	ldr	r1, [sp, #16]
 80093a0:	0038      	movs	r0, r7
 80093a2:	f000 f8f7 	bl	8009594 <__multadd>
 80093a6:	2300      	movs	r3, #0
 80093a8:	9004      	str	r0, [sp, #16]
 80093aa:	220a      	movs	r2, #10
 80093ac:	0021      	movs	r1, r4
 80093ae:	0038      	movs	r0, r7
 80093b0:	42ac      	cmp	r4, r5
 80093b2:	d106      	bne.n	80093c2 <_dtoa_r+0xb7e>
 80093b4:	f000 f8ee 	bl	8009594 <__multadd>
 80093b8:	0004      	movs	r4, r0
 80093ba:	0005      	movs	r5, r0
 80093bc:	9b07      	ldr	r3, [sp, #28]
 80093be:	9308      	str	r3, [sp, #32]
 80093c0:	e773      	b.n	80092aa <_dtoa_r+0xa66>
 80093c2:	f000 f8e7 	bl	8009594 <__multadd>
 80093c6:	0029      	movs	r1, r5
 80093c8:	0004      	movs	r4, r0
 80093ca:	2300      	movs	r3, #0
 80093cc:	220a      	movs	r2, #10
 80093ce:	0038      	movs	r0, r7
 80093d0:	f000 f8e0 	bl	8009594 <__multadd>
 80093d4:	0005      	movs	r5, r0
 80093d6:	e7f1      	b.n	80093bc <_dtoa_r+0xb78>
 80093d8:	9b06      	ldr	r3, [sp, #24]
 80093da:	930c      	str	r3, [sp, #48]	; 0x30
 80093dc:	2400      	movs	r4, #0
 80093de:	0031      	movs	r1, r6
 80093e0:	9804      	ldr	r0, [sp, #16]
 80093e2:	f7ff f9a3 	bl	800872c <quorem>
 80093e6:	9b05      	ldr	r3, [sp, #20]
 80093e8:	3030      	adds	r0, #48	; 0x30
 80093ea:	5518      	strb	r0, [r3, r4]
 80093ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093ee:	3401      	adds	r4, #1
 80093f0:	9006      	str	r0, [sp, #24]
 80093f2:	42a3      	cmp	r3, r4
 80093f4:	dd07      	ble.n	8009406 <_dtoa_r+0xbc2>
 80093f6:	2300      	movs	r3, #0
 80093f8:	220a      	movs	r2, #10
 80093fa:	0038      	movs	r0, r7
 80093fc:	9904      	ldr	r1, [sp, #16]
 80093fe:	f000 f8c9 	bl	8009594 <__multadd>
 8009402:	9004      	str	r0, [sp, #16]
 8009404:	e7eb      	b.n	80093de <_dtoa_r+0xb9a>
 8009406:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009408:	2001      	movs	r0, #1
 800940a:	2b00      	cmp	r3, #0
 800940c:	dd00      	ble.n	8009410 <_dtoa_r+0xbcc>
 800940e:	0018      	movs	r0, r3
 8009410:	2400      	movs	r4, #0
 8009412:	9b05      	ldr	r3, [sp, #20]
 8009414:	181b      	adds	r3, r3, r0
 8009416:	9307      	str	r3, [sp, #28]
 8009418:	9904      	ldr	r1, [sp, #16]
 800941a:	2201      	movs	r2, #1
 800941c:	0038      	movs	r0, r7
 800941e:	f000 fa67 	bl	80098f0 <__lshift>
 8009422:	0031      	movs	r1, r6
 8009424:	9004      	str	r0, [sp, #16]
 8009426:	f000 fad3 	bl	80099d0 <__mcmp>
 800942a:	2800      	cmp	r0, #0
 800942c:	dc97      	bgt.n	800935e <_dtoa_r+0xb1a>
 800942e:	d102      	bne.n	8009436 <_dtoa_r+0xbf2>
 8009430:	9b06      	ldr	r3, [sp, #24]
 8009432:	07db      	lsls	r3, r3, #31
 8009434:	d493      	bmi.n	800935e <_dtoa_r+0xb1a>
 8009436:	9b07      	ldr	r3, [sp, #28]
 8009438:	9307      	str	r3, [sp, #28]
 800943a:	3b01      	subs	r3, #1
 800943c:	781a      	ldrb	r2, [r3, #0]
 800943e:	2a30      	cmp	r2, #48	; 0x30
 8009440:	d0fa      	beq.n	8009438 <_dtoa_r+0xbf4>
 8009442:	e6e1      	b.n	8009208 <_dtoa_r+0x9c4>
 8009444:	9a05      	ldr	r2, [sp, #20]
 8009446:	429a      	cmp	r2, r3
 8009448:	d18a      	bne.n	8009360 <_dtoa_r+0xb1c>
 800944a:	9b02      	ldr	r3, [sp, #8]
 800944c:	3301      	adds	r3, #1
 800944e:	9302      	str	r3, [sp, #8]
 8009450:	2331      	movs	r3, #49	; 0x31
 8009452:	e795      	b.n	8009380 <_dtoa_r+0xb3c>
 8009454:	4b08      	ldr	r3, [pc, #32]	; (8009478 <_dtoa_r+0xc34>)
 8009456:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009458:	9305      	str	r3, [sp, #20]
 800945a:	4b08      	ldr	r3, [pc, #32]	; (800947c <_dtoa_r+0xc38>)
 800945c:	2a00      	cmp	r2, #0
 800945e:	d001      	beq.n	8009464 <_dtoa_r+0xc20>
 8009460:	f7ff fa3b 	bl	80088da <_dtoa_r+0x96>
 8009464:	f7ff fa3b 	bl	80088de <_dtoa_r+0x9a>
 8009468:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800946a:	2b00      	cmp	r3, #0
 800946c:	dcb6      	bgt.n	80093dc <_dtoa_r+0xb98>
 800946e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009470:	2b02      	cmp	r3, #2
 8009472:	dd00      	ble.n	8009476 <_dtoa_r+0xc32>
 8009474:	e6b2      	b.n	80091dc <_dtoa_r+0x998>
 8009476:	e7b1      	b.n	80093dc <_dtoa_r+0xb98>
 8009478:	0800af7c 	.word	0x0800af7c
 800947c:	0800af84 	.word	0x0800af84

08009480 <_localeconv_r>:
 8009480:	4800      	ldr	r0, [pc, #0]	; (8009484 <_localeconv_r+0x4>)
 8009482:	4770      	bx	lr
 8009484:	20000198 	.word	0x20000198

08009488 <malloc>:
 8009488:	b510      	push	{r4, lr}
 800948a:	4b03      	ldr	r3, [pc, #12]	; (8009498 <malloc+0x10>)
 800948c:	0001      	movs	r1, r0
 800948e:	6818      	ldr	r0, [r3, #0]
 8009490:	f000 fc0e 	bl	8009cb0 <_malloc_r>
 8009494:	bd10      	pop	{r4, pc}
 8009496:	46c0      	nop			; (mov r8, r8)
 8009498:	20000044 	.word	0x20000044

0800949c <memchr>:
 800949c:	b2c9      	uxtb	r1, r1
 800949e:	1882      	adds	r2, r0, r2
 80094a0:	4290      	cmp	r0, r2
 80094a2:	d101      	bne.n	80094a8 <memchr+0xc>
 80094a4:	2000      	movs	r0, #0
 80094a6:	4770      	bx	lr
 80094a8:	7803      	ldrb	r3, [r0, #0]
 80094aa:	428b      	cmp	r3, r1
 80094ac:	d0fb      	beq.n	80094a6 <memchr+0xa>
 80094ae:	3001      	adds	r0, #1
 80094b0:	e7f6      	b.n	80094a0 <memchr+0x4>

080094b2 <memcpy>:
 80094b2:	2300      	movs	r3, #0
 80094b4:	b510      	push	{r4, lr}
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d100      	bne.n	80094bc <memcpy+0xa>
 80094ba:	bd10      	pop	{r4, pc}
 80094bc:	5ccc      	ldrb	r4, [r1, r3]
 80094be:	54c4      	strb	r4, [r0, r3]
 80094c0:	3301      	adds	r3, #1
 80094c2:	e7f8      	b.n	80094b6 <memcpy+0x4>

080094c4 <_Balloc>:
 80094c4:	b570      	push	{r4, r5, r6, lr}
 80094c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80094c8:	0006      	movs	r6, r0
 80094ca:	000c      	movs	r4, r1
 80094cc:	2d00      	cmp	r5, #0
 80094ce:	d10e      	bne.n	80094ee <_Balloc+0x2a>
 80094d0:	2010      	movs	r0, #16
 80094d2:	f7ff ffd9 	bl	8009488 <malloc>
 80094d6:	1e02      	subs	r2, r0, #0
 80094d8:	6270      	str	r0, [r6, #36]	; 0x24
 80094da:	d104      	bne.n	80094e6 <_Balloc+0x22>
 80094dc:	2166      	movs	r1, #102	; 0x66
 80094de:	4b19      	ldr	r3, [pc, #100]	; (8009544 <_Balloc+0x80>)
 80094e0:	4819      	ldr	r0, [pc, #100]	; (8009548 <_Balloc+0x84>)
 80094e2:	f000 fdb7 	bl	800a054 <__assert_func>
 80094e6:	6045      	str	r5, [r0, #4]
 80094e8:	6085      	str	r5, [r0, #8]
 80094ea:	6005      	str	r5, [r0, #0]
 80094ec:	60c5      	str	r5, [r0, #12]
 80094ee:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80094f0:	68eb      	ldr	r3, [r5, #12]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d013      	beq.n	800951e <_Balloc+0x5a>
 80094f6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80094f8:	00a2      	lsls	r2, r4, #2
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	189b      	adds	r3, r3, r2
 80094fe:	6818      	ldr	r0, [r3, #0]
 8009500:	2800      	cmp	r0, #0
 8009502:	d118      	bne.n	8009536 <_Balloc+0x72>
 8009504:	2101      	movs	r1, #1
 8009506:	000d      	movs	r5, r1
 8009508:	40a5      	lsls	r5, r4
 800950a:	1d6a      	adds	r2, r5, #5
 800950c:	0030      	movs	r0, r6
 800950e:	0092      	lsls	r2, r2, #2
 8009510:	f000 fb76 	bl	8009c00 <_calloc_r>
 8009514:	2800      	cmp	r0, #0
 8009516:	d00c      	beq.n	8009532 <_Balloc+0x6e>
 8009518:	6044      	str	r4, [r0, #4]
 800951a:	6085      	str	r5, [r0, #8]
 800951c:	e00d      	b.n	800953a <_Balloc+0x76>
 800951e:	2221      	movs	r2, #33	; 0x21
 8009520:	2104      	movs	r1, #4
 8009522:	0030      	movs	r0, r6
 8009524:	f000 fb6c 	bl	8009c00 <_calloc_r>
 8009528:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800952a:	60e8      	str	r0, [r5, #12]
 800952c:	68db      	ldr	r3, [r3, #12]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1e1      	bne.n	80094f6 <_Balloc+0x32>
 8009532:	2000      	movs	r0, #0
 8009534:	bd70      	pop	{r4, r5, r6, pc}
 8009536:	6802      	ldr	r2, [r0, #0]
 8009538:	601a      	str	r2, [r3, #0]
 800953a:	2300      	movs	r3, #0
 800953c:	6103      	str	r3, [r0, #16]
 800953e:	60c3      	str	r3, [r0, #12]
 8009540:	e7f8      	b.n	8009534 <_Balloc+0x70>
 8009542:	46c0      	nop			; (mov r8, r8)
 8009544:	0800af89 	.word	0x0800af89
 8009548:	0800b010 	.word	0x0800b010

0800954c <_Bfree>:
 800954c:	b570      	push	{r4, r5, r6, lr}
 800954e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009550:	0005      	movs	r5, r0
 8009552:	000c      	movs	r4, r1
 8009554:	2e00      	cmp	r6, #0
 8009556:	d10e      	bne.n	8009576 <_Bfree+0x2a>
 8009558:	2010      	movs	r0, #16
 800955a:	f7ff ff95 	bl	8009488 <malloc>
 800955e:	1e02      	subs	r2, r0, #0
 8009560:	6268      	str	r0, [r5, #36]	; 0x24
 8009562:	d104      	bne.n	800956e <_Bfree+0x22>
 8009564:	218a      	movs	r1, #138	; 0x8a
 8009566:	4b09      	ldr	r3, [pc, #36]	; (800958c <_Bfree+0x40>)
 8009568:	4809      	ldr	r0, [pc, #36]	; (8009590 <_Bfree+0x44>)
 800956a:	f000 fd73 	bl	800a054 <__assert_func>
 800956e:	6046      	str	r6, [r0, #4]
 8009570:	6086      	str	r6, [r0, #8]
 8009572:	6006      	str	r6, [r0, #0]
 8009574:	60c6      	str	r6, [r0, #12]
 8009576:	2c00      	cmp	r4, #0
 8009578:	d007      	beq.n	800958a <_Bfree+0x3e>
 800957a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800957c:	6862      	ldr	r2, [r4, #4]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	0092      	lsls	r2, r2, #2
 8009582:	189b      	adds	r3, r3, r2
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	6022      	str	r2, [r4, #0]
 8009588:	601c      	str	r4, [r3, #0]
 800958a:	bd70      	pop	{r4, r5, r6, pc}
 800958c:	0800af89 	.word	0x0800af89
 8009590:	0800b010 	.word	0x0800b010

08009594 <__multadd>:
 8009594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009596:	000e      	movs	r6, r1
 8009598:	9001      	str	r0, [sp, #4]
 800959a:	000c      	movs	r4, r1
 800959c:	001d      	movs	r5, r3
 800959e:	2000      	movs	r0, #0
 80095a0:	690f      	ldr	r7, [r1, #16]
 80095a2:	3614      	adds	r6, #20
 80095a4:	6833      	ldr	r3, [r6, #0]
 80095a6:	3001      	adds	r0, #1
 80095a8:	b299      	uxth	r1, r3
 80095aa:	4351      	muls	r1, r2
 80095ac:	0c1b      	lsrs	r3, r3, #16
 80095ae:	4353      	muls	r3, r2
 80095b0:	1949      	adds	r1, r1, r5
 80095b2:	0c0d      	lsrs	r5, r1, #16
 80095b4:	195b      	adds	r3, r3, r5
 80095b6:	0c1d      	lsrs	r5, r3, #16
 80095b8:	b289      	uxth	r1, r1
 80095ba:	041b      	lsls	r3, r3, #16
 80095bc:	185b      	adds	r3, r3, r1
 80095be:	c608      	stmia	r6!, {r3}
 80095c0:	4287      	cmp	r7, r0
 80095c2:	dcef      	bgt.n	80095a4 <__multadd+0x10>
 80095c4:	2d00      	cmp	r5, #0
 80095c6:	d022      	beq.n	800960e <__multadd+0x7a>
 80095c8:	68a3      	ldr	r3, [r4, #8]
 80095ca:	42bb      	cmp	r3, r7
 80095cc:	dc19      	bgt.n	8009602 <__multadd+0x6e>
 80095ce:	6863      	ldr	r3, [r4, #4]
 80095d0:	9801      	ldr	r0, [sp, #4]
 80095d2:	1c59      	adds	r1, r3, #1
 80095d4:	f7ff ff76 	bl	80094c4 <_Balloc>
 80095d8:	1e06      	subs	r6, r0, #0
 80095da:	d105      	bne.n	80095e8 <__multadd+0x54>
 80095dc:	0002      	movs	r2, r0
 80095de:	21b5      	movs	r1, #181	; 0xb5
 80095e0:	4b0c      	ldr	r3, [pc, #48]	; (8009614 <__multadd+0x80>)
 80095e2:	480d      	ldr	r0, [pc, #52]	; (8009618 <__multadd+0x84>)
 80095e4:	f000 fd36 	bl	800a054 <__assert_func>
 80095e8:	0021      	movs	r1, r4
 80095ea:	6923      	ldr	r3, [r4, #16]
 80095ec:	310c      	adds	r1, #12
 80095ee:	1c9a      	adds	r2, r3, #2
 80095f0:	0092      	lsls	r2, r2, #2
 80095f2:	300c      	adds	r0, #12
 80095f4:	f7ff ff5d 	bl	80094b2 <memcpy>
 80095f8:	0021      	movs	r1, r4
 80095fa:	9801      	ldr	r0, [sp, #4]
 80095fc:	f7ff ffa6 	bl	800954c <_Bfree>
 8009600:	0034      	movs	r4, r6
 8009602:	1d3b      	adds	r3, r7, #4
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	18e3      	adds	r3, r4, r3
 8009608:	605d      	str	r5, [r3, #4]
 800960a:	1c7b      	adds	r3, r7, #1
 800960c:	6123      	str	r3, [r4, #16]
 800960e:	0020      	movs	r0, r4
 8009610:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009612:	46c0      	nop			; (mov r8, r8)
 8009614:	0800afff 	.word	0x0800afff
 8009618:	0800b010 	.word	0x0800b010

0800961c <__hi0bits>:
 800961c:	0003      	movs	r3, r0
 800961e:	0c02      	lsrs	r2, r0, #16
 8009620:	2000      	movs	r0, #0
 8009622:	4282      	cmp	r2, r0
 8009624:	d101      	bne.n	800962a <__hi0bits+0xe>
 8009626:	041b      	lsls	r3, r3, #16
 8009628:	3010      	adds	r0, #16
 800962a:	0e1a      	lsrs	r2, r3, #24
 800962c:	d101      	bne.n	8009632 <__hi0bits+0x16>
 800962e:	3008      	adds	r0, #8
 8009630:	021b      	lsls	r3, r3, #8
 8009632:	0f1a      	lsrs	r2, r3, #28
 8009634:	d101      	bne.n	800963a <__hi0bits+0x1e>
 8009636:	3004      	adds	r0, #4
 8009638:	011b      	lsls	r3, r3, #4
 800963a:	0f9a      	lsrs	r2, r3, #30
 800963c:	d101      	bne.n	8009642 <__hi0bits+0x26>
 800963e:	3002      	adds	r0, #2
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	2b00      	cmp	r3, #0
 8009644:	db03      	blt.n	800964e <__hi0bits+0x32>
 8009646:	3001      	adds	r0, #1
 8009648:	005b      	lsls	r3, r3, #1
 800964a:	d400      	bmi.n	800964e <__hi0bits+0x32>
 800964c:	2020      	movs	r0, #32
 800964e:	4770      	bx	lr

08009650 <__lo0bits>:
 8009650:	6803      	ldr	r3, [r0, #0]
 8009652:	0002      	movs	r2, r0
 8009654:	2107      	movs	r1, #7
 8009656:	0018      	movs	r0, r3
 8009658:	4008      	ands	r0, r1
 800965a:	420b      	tst	r3, r1
 800965c:	d00d      	beq.n	800967a <__lo0bits+0x2a>
 800965e:	3906      	subs	r1, #6
 8009660:	2000      	movs	r0, #0
 8009662:	420b      	tst	r3, r1
 8009664:	d105      	bne.n	8009672 <__lo0bits+0x22>
 8009666:	3002      	adds	r0, #2
 8009668:	4203      	tst	r3, r0
 800966a:	d003      	beq.n	8009674 <__lo0bits+0x24>
 800966c:	40cb      	lsrs	r3, r1
 800966e:	0008      	movs	r0, r1
 8009670:	6013      	str	r3, [r2, #0]
 8009672:	4770      	bx	lr
 8009674:	089b      	lsrs	r3, r3, #2
 8009676:	6013      	str	r3, [r2, #0]
 8009678:	e7fb      	b.n	8009672 <__lo0bits+0x22>
 800967a:	b299      	uxth	r1, r3
 800967c:	2900      	cmp	r1, #0
 800967e:	d101      	bne.n	8009684 <__lo0bits+0x34>
 8009680:	2010      	movs	r0, #16
 8009682:	0c1b      	lsrs	r3, r3, #16
 8009684:	b2d9      	uxtb	r1, r3
 8009686:	2900      	cmp	r1, #0
 8009688:	d101      	bne.n	800968e <__lo0bits+0x3e>
 800968a:	3008      	adds	r0, #8
 800968c:	0a1b      	lsrs	r3, r3, #8
 800968e:	0719      	lsls	r1, r3, #28
 8009690:	d101      	bne.n	8009696 <__lo0bits+0x46>
 8009692:	3004      	adds	r0, #4
 8009694:	091b      	lsrs	r3, r3, #4
 8009696:	0799      	lsls	r1, r3, #30
 8009698:	d101      	bne.n	800969e <__lo0bits+0x4e>
 800969a:	3002      	adds	r0, #2
 800969c:	089b      	lsrs	r3, r3, #2
 800969e:	07d9      	lsls	r1, r3, #31
 80096a0:	d4e9      	bmi.n	8009676 <__lo0bits+0x26>
 80096a2:	3001      	adds	r0, #1
 80096a4:	085b      	lsrs	r3, r3, #1
 80096a6:	d1e6      	bne.n	8009676 <__lo0bits+0x26>
 80096a8:	2020      	movs	r0, #32
 80096aa:	e7e2      	b.n	8009672 <__lo0bits+0x22>

080096ac <__i2b>:
 80096ac:	b510      	push	{r4, lr}
 80096ae:	000c      	movs	r4, r1
 80096b0:	2101      	movs	r1, #1
 80096b2:	f7ff ff07 	bl	80094c4 <_Balloc>
 80096b6:	2800      	cmp	r0, #0
 80096b8:	d106      	bne.n	80096c8 <__i2b+0x1c>
 80096ba:	21a0      	movs	r1, #160	; 0xa0
 80096bc:	0002      	movs	r2, r0
 80096be:	4b04      	ldr	r3, [pc, #16]	; (80096d0 <__i2b+0x24>)
 80096c0:	4804      	ldr	r0, [pc, #16]	; (80096d4 <__i2b+0x28>)
 80096c2:	0049      	lsls	r1, r1, #1
 80096c4:	f000 fcc6 	bl	800a054 <__assert_func>
 80096c8:	2301      	movs	r3, #1
 80096ca:	6144      	str	r4, [r0, #20]
 80096cc:	6103      	str	r3, [r0, #16]
 80096ce:	bd10      	pop	{r4, pc}
 80096d0:	0800afff 	.word	0x0800afff
 80096d4:	0800b010 	.word	0x0800b010

080096d8 <__multiply>:
 80096d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096da:	690b      	ldr	r3, [r1, #16]
 80096dc:	0014      	movs	r4, r2
 80096de:	6912      	ldr	r2, [r2, #16]
 80096e0:	000d      	movs	r5, r1
 80096e2:	b089      	sub	sp, #36	; 0x24
 80096e4:	4293      	cmp	r3, r2
 80096e6:	da01      	bge.n	80096ec <__multiply+0x14>
 80096e8:	0025      	movs	r5, r4
 80096ea:	000c      	movs	r4, r1
 80096ec:	692f      	ldr	r7, [r5, #16]
 80096ee:	6926      	ldr	r6, [r4, #16]
 80096f0:	6869      	ldr	r1, [r5, #4]
 80096f2:	19bb      	adds	r3, r7, r6
 80096f4:	9302      	str	r3, [sp, #8]
 80096f6:	68ab      	ldr	r3, [r5, #8]
 80096f8:	19ba      	adds	r2, r7, r6
 80096fa:	4293      	cmp	r3, r2
 80096fc:	da00      	bge.n	8009700 <__multiply+0x28>
 80096fe:	3101      	adds	r1, #1
 8009700:	f7ff fee0 	bl	80094c4 <_Balloc>
 8009704:	9001      	str	r0, [sp, #4]
 8009706:	2800      	cmp	r0, #0
 8009708:	d106      	bne.n	8009718 <__multiply+0x40>
 800970a:	215e      	movs	r1, #94	; 0x5e
 800970c:	0002      	movs	r2, r0
 800970e:	4b48      	ldr	r3, [pc, #288]	; (8009830 <__multiply+0x158>)
 8009710:	4848      	ldr	r0, [pc, #288]	; (8009834 <__multiply+0x15c>)
 8009712:	31ff      	adds	r1, #255	; 0xff
 8009714:	f000 fc9e 	bl	800a054 <__assert_func>
 8009718:	9b01      	ldr	r3, [sp, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	3314      	adds	r3, #20
 800971e:	469c      	mov	ip, r3
 8009720:	19bb      	adds	r3, r7, r6
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	4463      	add	r3, ip
 8009726:	9303      	str	r3, [sp, #12]
 8009728:	4663      	mov	r3, ip
 800972a:	9903      	ldr	r1, [sp, #12]
 800972c:	428b      	cmp	r3, r1
 800972e:	d32c      	bcc.n	800978a <__multiply+0xb2>
 8009730:	002b      	movs	r3, r5
 8009732:	0022      	movs	r2, r4
 8009734:	3314      	adds	r3, #20
 8009736:	00bf      	lsls	r7, r7, #2
 8009738:	3214      	adds	r2, #20
 800973a:	9306      	str	r3, [sp, #24]
 800973c:	00b6      	lsls	r6, r6, #2
 800973e:	19db      	adds	r3, r3, r7
 8009740:	9304      	str	r3, [sp, #16]
 8009742:	1993      	adds	r3, r2, r6
 8009744:	9307      	str	r3, [sp, #28]
 8009746:	2304      	movs	r3, #4
 8009748:	9305      	str	r3, [sp, #20]
 800974a:	002b      	movs	r3, r5
 800974c:	9904      	ldr	r1, [sp, #16]
 800974e:	3315      	adds	r3, #21
 8009750:	9200      	str	r2, [sp, #0]
 8009752:	4299      	cmp	r1, r3
 8009754:	d305      	bcc.n	8009762 <__multiply+0x8a>
 8009756:	1b4b      	subs	r3, r1, r5
 8009758:	3b15      	subs	r3, #21
 800975a:	089b      	lsrs	r3, r3, #2
 800975c:	3301      	adds	r3, #1
 800975e:	009b      	lsls	r3, r3, #2
 8009760:	9305      	str	r3, [sp, #20]
 8009762:	9b07      	ldr	r3, [sp, #28]
 8009764:	9a00      	ldr	r2, [sp, #0]
 8009766:	429a      	cmp	r2, r3
 8009768:	d311      	bcc.n	800978e <__multiply+0xb6>
 800976a:	9b02      	ldr	r3, [sp, #8]
 800976c:	2b00      	cmp	r3, #0
 800976e:	dd06      	ble.n	800977e <__multiply+0xa6>
 8009770:	9b03      	ldr	r3, [sp, #12]
 8009772:	3b04      	subs	r3, #4
 8009774:	9303      	str	r3, [sp, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	9300      	str	r3, [sp, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d054      	beq.n	8009828 <__multiply+0x150>
 800977e:	9b01      	ldr	r3, [sp, #4]
 8009780:	9a02      	ldr	r2, [sp, #8]
 8009782:	0018      	movs	r0, r3
 8009784:	611a      	str	r2, [r3, #16]
 8009786:	b009      	add	sp, #36	; 0x24
 8009788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800978a:	c304      	stmia	r3!, {r2}
 800978c:	e7cd      	b.n	800972a <__multiply+0x52>
 800978e:	9b00      	ldr	r3, [sp, #0]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	b298      	uxth	r0, r3
 8009794:	2800      	cmp	r0, #0
 8009796:	d01c      	beq.n	80097d2 <__multiply+0xfa>
 8009798:	4667      	mov	r7, ip
 800979a:	2400      	movs	r4, #0
 800979c:	9e06      	ldr	r6, [sp, #24]
 800979e:	ce02      	ldmia	r6!, {r1}
 80097a0:	683a      	ldr	r2, [r7, #0]
 80097a2:	b28b      	uxth	r3, r1
 80097a4:	4343      	muls	r3, r0
 80097a6:	0c09      	lsrs	r1, r1, #16
 80097a8:	4341      	muls	r1, r0
 80097aa:	b292      	uxth	r2, r2
 80097ac:	189b      	adds	r3, r3, r2
 80097ae:	191b      	adds	r3, r3, r4
 80097b0:	000c      	movs	r4, r1
 80097b2:	683a      	ldr	r2, [r7, #0]
 80097b4:	0c11      	lsrs	r1, r2, #16
 80097b6:	1861      	adds	r1, r4, r1
 80097b8:	0c1c      	lsrs	r4, r3, #16
 80097ba:	1909      	adds	r1, r1, r4
 80097bc:	0c0c      	lsrs	r4, r1, #16
 80097be:	b29b      	uxth	r3, r3
 80097c0:	0409      	lsls	r1, r1, #16
 80097c2:	430b      	orrs	r3, r1
 80097c4:	c708      	stmia	r7!, {r3}
 80097c6:	9b04      	ldr	r3, [sp, #16]
 80097c8:	42b3      	cmp	r3, r6
 80097ca:	d8e8      	bhi.n	800979e <__multiply+0xc6>
 80097cc:	4663      	mov	r3, ip
 80097ce:	9a05      	ldr	r2, [sp, #20]
 80097d0:	509c      	str	r4, [r3, r2]
 80097d2:	9b00      	ldr	r3, [sp, #0]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	0c1e      	lsrs	r6, r3, #16
 80097d8:	d020      	beq.n	800981c <__multiply+0x144>
 80097da:	4663      	mov	r3, ip
 80097dc:	002c      	movs	r4, r5
 80097de:	4660      	mov	r0, ip
 80097e0:	2700      	movs	r7, #0
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	3414      	adds	r4, #20
 80097e6:	6822      	ldr	r2, [r4, #0]
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	b291      	uxth	r1, r2
 80097ec:	4371      	muls	r1, r6
 80097ee:	6802      	ldr	r2, [r0, #0]
 80097f0:	0c12      	lsrs	r2, r2, #16
 80097f2:	1889      	adds	r1, r1, r2
 80097f4:	19cf      	adds	r7, r1, r7
 80097f6:	0439      	lsls	r1, r7, #16
 80097f8:	430b      	orrs	r3, r1
 80097fa:	6003      	str	r3, [r0, #0]
 80097fc:	cc02      	ldmia	r4!, {r1}
 80097fe:	6843      	ldr	r3, [r0, #4]
 8009800:	0c09      	lsrs	r1, r1, #16
 8009802:	4371      	muls	r1, r6
 8009804:	b29b      	uxth	r3, r3
 8009806:	0c3f      	lsrs	r7, r7, #16
 8009808:	18cb      	adds	r3, r1, r3
 800980a:	9a04      	ldr	r2, [sp, #16]
 800980c:	19db      	adds	r3, r3, r7
 800980e:	0c1f      	lsrs	r7, r3, #16
 8009810:	3004      	adds	r0, #4
 8009812:	42a2      	cmp	r2, r4
 8009814:	d8e7      	bhi.n	80097e6 <__multiply+0x10e>
 8009816:	4662      	mov	r2, ip
 8009818:	9905      	ldr	r1, [sp, #20]
 800981a:	5053      	str	r3, [r2, r1]
 800981c:	9b00      	ldr	r3, [sp, #0]
 800981e:	3304      	adds	r3, #4
 8009820:	9300      	str	r3, [sp, #0]
 8009822:	2304      	movs	r3, #4
 8009824:	449c      	add	ip, r3
 8009826:	e79c      	b.n	8009762 <__multiply+0x8a>
 8009828:	9b02      	ldr	r3, [sp, #8]
 800982a:	3b01      	subs	r3, #1
 800982c:	9302      	str	r3, [sp, #8]
 800982e:	e79c      	b.n	800976a <__multiply+0x92>
 8009830:	0800afff 	.word	0x0800afff
 8009834:	0800b010 	.word	0x0800b010

08009838 <__pow5mult>:
 8009838:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800983a:	2303      	movs	r3, #3
 800983c:	0015      	movs	r5, r2
 800983e:	0007      	movs	r7, r0
 8009840:	000e      	movs	r6, r1
 8009842:	401a      	ands	r2, r3
 8009844:	421d      	tst	r5, r3
 8009846:	d008      	beq.n	800985a <__pow5mult+0x22>
 8009848:	4925      	ldr	r1, [pc, #148]	; (80098e0 <__pow5mult+0xa8>)
 800984a:	3a01      	subs	r2, #1
 800984c:	0092      	lsls	r2, r2, #2
 800984e:	5852      	ldr	r2, [r2, r1]
 8009850:	2300      	movs	r3, #0
 8009852:	0031      	movs	r1, r6
 8009854:	f7ff fe9e 	bl	8009594 <__multadd>
 8009858:	0006      	movs	r6, r0
 800985a:	10ad      	asrs	r5, r5, #2
 800985c:	d03d      	beq.n	80098da <__pow5mult+0xa2>
 800985e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009860:	2c00      	cmp	r4, #0
 8009862:	d10f      	bne.n	8009884 <__pow5mult+0x4c>
 8009864:	2010      	movs	r0, #16
 8009866:	f7ff fe0f 	bl	8009488 <malloc>
 800986a:	1e02      	subs	r2, r0, #0
 800986c:	6278      	str	r0, [r7, #36]	; 0x24
 800986e:	d105      	bne.n	800987c <__pow5mult+0x44>
 8009870:	21d7      	movs	r1, #215	; 0xd7
 8009872:	4b1c      	ldr	r3, [pc, #112]	; (80098e4 <__pow5mult+0xac>)
 8009874:	481c      	ldr	r0, [pc, #112]	; (80098e8 <__pow5mult+0xb0>)
 8009876:	0049      	lsls	r1, r1, #1
 8009878:	f000 fbec 	bl	800a054 <__assert_func>
 800987c:	6044      	str	r4, [r0, #4]
 800987e:	6084      	str	r4, [r0, #8]
 8009880:	6004      	str	r4, [r0, #0]
 8009882:	60c4      	str	r4, [r0, #12]
 8009884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009886:	689c      	ldr	r4, [r3, #8]
 8009888:	9301      	str	r3, [sp, #4]
 800988a:	2c00      	cmp	r4, #0
 800988c:	d108      	bne.n	80098a0 <__pow5mult+0x68>
 800988e:	0038      	movs	r0, r7
 8009890:	4916      	ldr	r1, [pc, #88]	; (80098ec <__pow5mult+0xb4>)
 8009892:	f7ff ff0b 	bl	80096ac <__i2b>
 8009896:	9b01      	ldr	r3, [sp, #4]
 8009898:	0004      	movs	r4, r0
 800989a:	6098      	str	r0, [r3, #8]
 800989c:	2300      	movs	r3, #0
 800989e:	6003      	str	r3, [r0, #0]
 80098a0:	2301      	movs	r3, #1
 80098a2:	421d      	tst	r5, r3
 80098a4:	d00a      	beq.n	80098bc <__pow5mult+0x84>
 80098a6:	0031      	movs	r1, r6
 80098a8:	0022      	movs	r2, r4
 80098aa:	0038      	movs	r0, r7
 80098ac:	f7ff ff14 	bl	80096d8 <__multiply>
 80098b0:	0031      	movs	r1, r6
 80098b2:	9001      	str	r0, [sp, #4]
 80098b4:	0038      	movs	r0, r7
 80098b6:	f7ff fe49 	bl	800954c <_Bfree>
 80098ba:	9e01      	ldr	r6, [sp, #4]
 80098bc:	106d      	asrs	r5, r5, #1
 80098be:	d00c      	beq.n	80098da <__pow5mult+0xa2>
 80098c0:	6820      	ldr	r0, [r4, #0]
 80098c2:	2800      	cmp	r0, #0
 80098c4:	d107      	bne.n	80098d6 <__pow5mult+0x9e>
 80098c6:	0022      	movs	r2, r4
 80098c8:	0021      	movs	r1, r4
 80098ca:	0038      	movs	r0, r7
 80098cc:	f7ff ff04 	bl	80096d8 <__multiply>
 80098d0:	2300      	movs	r3, #0
 80098d2:	6020      	str	r0, [r4, #0]
 80098d4:	6003      	str	r3, [r0, #0]
 80098d6:	0004      	movs	r4, r0
 80098d8:	e7e2      	b.n	80098a0 <__pow5mult+0x68>
 80098da:	0030      	movs	r0, r6
 80098dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80098de:	46c0      	nop			; (mov r8, r8)
 80098e0:	0800b160 	.word	0x0800b160
 80098e4:	0800af89 	.word	0x0800af89
 80098e8:	0800b010 	.word	0x0800b010
 80098ec:	00000271 	.word	0x00000271

080098f0 <__lshift>:
 80098f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098f2:	000c      	movs	r4, r1
 80098f4:	0017      	movs	r7, r2
 80098f6:	6923      	ldr	r3, [r4, #16]
 80098f8:	1155      	asrs	r5, r2, #5
 80098fa:	b087      	sub	sp, #28
 80098fc:	18eb      	adds	r3, r5, r3
 80098fe:	9302      	str	r3, [sp, #8]
 8009900:	3301      	adds	r3, #1
 8009902:	9301      	str	r3, [sp, #4]
 8009904:	6849      	ldr	r1, [r1, #4]
 8009906:	68a3      	ldr	r3, [r4, #8]
 8009908:	9004      	str	r0, [sp, #16]
 800990a:	9a01      	ldr	r2, [sp, #4]
 800990c:	4293      	cmp	r3, r2
 800990e:	db11      	blt.n	8009934 <__lshift+0x44>
 8009910:	9804      	ldr	r0, [sp, #16]
 8009912:	f7ff fdd7 	bl	80094c4 <_Balloc>
 8009916:	0002      	movs	r2, r0
 8009918:	2300      	movs	r3, #0
 800991a:	3214      	adds	r2, #20
 800991c:	0006      	movs	r6, r0
 800991e:	0011      	movs	r1, r2
 8009920:	9203      	str	r2, [sp, #12]
 8009922:	4298      	cmp	r0, r3
 8009924:	d10d      	bne.n	8009942 <__lshift+0x52>
 8009926:	21da      	movs	r1, #218	; 0xda
 8009928:	0002      	movs	r2, r0
 800992a:	4b27      	ldr	r3, [pc, #156]	; (80099c8 <__lshift+0xd8>)
 800992c:	4827      	ldr	r0, [pc, #156]	; (80099cc <__lshift+0xdc>)
 800992e:	31ff      	adds	r1, #255	; 0xff
 8009930:	f000 fb90 	bl	800a054 <__assert_func>
 8009934:	3101      	adds	r1, #1
 8009936:	005b      	lsls	r3, r3, #1
 8009938:	e7e7      	b.n	800990a <__lshift+0x1a>
 800993a:	2200      	movs	r2, #0
 800993c:	0098      	lsls	r0, r3, #2
 800993e:	500a      	str	r2, [r1, r0]
 8009940:	3301      	adds	r3, #1
 8009942:	42ab      	cmp	r3, r5
 8009944:	dbf9      	blt.n	800993a <__lshift+0x4a>
 8009946:	43eb      	mvns	r3, r5
 8009948:	17db      	asrs	r3, r3, #31
 800994a:	401d      	ands	r5, r3
 800994c:	9b03      	ldr	r3, [sp, #12]
 800994e:	00ad      	lsls	r5, r5, #2
 8009950:	211f      	movs	r1, #31
 8009952:	0038      	movs	r0, r7
 8009954:	195d      	adds	r5, r3, r5
 8009956:	0023      	movs	r3, r4
 8009958:	6922      	ldr	r2, [r4, #16]
 800995a:	3314      	adds	r3, #20
 800995c:	0092      	lsls	r2, r2, #2
 800995e:	4008      	ands	r0, r1
 8009960:	4684      	mov	ip, r0
 8009962:	189a      	adds	r2, r3, r2
 8009964:	420f      	tst	r7, r1
 8009966:	d02a      	beq.n	80099be <__lshift+0xce>
 8009968:	3101      	adds	r1, #1
 800996a:	1a09      	subs	r1, r1, r0
 800996c:	9105      	str	r1, [sp, #20]
 800996e:	2100      	movs	r1, #0
 8009970:	9503      	str	r5, [sp, #12]
 8009972:	4667      	mov	r7, ip
 8009974:	6818      	ldr	r0, [r3, #0]
 8009976:	40b8      	lsls	r0, r7
 8009978:	4301      	orrs	r1, r0
 800997a:	9803      	ldr	r0, [sp, #12]
 800997c:	c002      	stmia	r0!, {r1}
 800997e:	cb02      	ldmia	r3!, {r1}
 8009980:	9003      	str	r0, [sp, #12]
 8009982:	9805      	ldr	r0, [sp, #20]
 8009984:	40c1      	lsrs	r1, r0
 8009986:	429a      	cmp	r2, r3
 8009988:	d8f3      	bhi.n	8009972 <__lshift+0x82>
 800998a:	0020      	movs	r0, r4
 800998c:	3015      	adds	r0, #21
 800998e:	2304      	movs	r3, #4
 8009990:	4282      	cmp	r2, r0
 8009992:	d304      	bcc.n	800999e <__lshift+0xae>
 8009994:	1b13      	subs	r3, r2, r4
 8009996:	3b15      	subs	r3, #21
 8009998:	089b      	lsrs	r3, r3, #2
 800999a:	3301      	adds	r3, #1
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	50e9      	str	r1, [r5, r3]
 80099a0:	2900      	cmp	r1, #0
 80099a2:	d002      	beq.n	80099aa <__lshift+0xba>
 80099a4:	9b02      	ldr	r3, [sp, #8]
 80099a6:	3302      	adds	r3, #2
 80099a8:	9301      	str	r3, [sp, #4]
 80099aa:	9b01      	ldr	r3, [sp, #4]
 80099ac:	9804      	ldr	r0, [sp, #16]
 80099ae:	3b01      	subs	r3, #1
 80099b0:	0021      	movs	r1, r4
 80099b2:	6133      	str	r3, [r6, #16]
 80099b4:	f7ff fdca 	bl	800954c <_Bfree>
 80099b8:	0030      	movs	r0, r6
 80099ba:	b007      	add	sp, #28
 80099bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099be:	cb02      	ldmia	r3!, {r1}
 80099c0:	c502      	stmia	r5!, {r1}
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d8fb      	bhi.n	80099be <__lshift+0xce>
 80099c6:	e7f0      	b.n	80099aa <__lshift+0xba>
 80099c8:	0800afff 	.word	0x0800afff
 80099cc:	0800b010 	.word	0x0800b010

080099d0 <__mcmp>:
 80099d0:	6902      	ldr	r2, [r0, #16]
 80099d2:	690b      	ldr	r3, [r1, #16]
 80099d4:	b530      	push	{r4, r5, lr}
 80099d6:	0004      	movs	r4, r0
 80099d8:	1ad0      	subs	r0, r2, r3
 80099da:	429a      	cmp	r2, r3
 80099dc:	d10d      	bne.n	80099fa <__mcmp+0x2a>
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	3414      	adds	r4, #20
 80099e2:	3114      	adds	r1, #20
 80099e4:	18e2      	adds	r2, r4, r3
 80099e6:	18c9      	adds	r1, r1, r3
 80099e8:	3a04      	subs	r2, #4
 80099ea:	3904      	subs	r1, #4
 80099ec:	6815      	ldr	r5, [r2, #0]
 80099ee:	680b      	ldr	r3, [r1, #0]
 80099f0:	429d      	cmp	r5, r3
 80099f2:	d003      	beq.n	80099fc <__mcmp+0x2c>
 80099f4:	2001      	movs	r0, #1
 80099f6:	429d      	cmp	r5, r3
 80099f8:	d303      	bcc.n	8009a02 <__mcmp+0x32>
 80099fa:	bd30      	pop	{r4, r5, pc}
 80099fc:	4294      	cmp	r4, r2
 80099fe:	d3f3      	bcc.n	80099e8 <__mcmp+0x18>
 8009a00:	e7fb      	b.n	80099fa <__mcmp+0x2a>
 8009a02:	4240      	negs	r0, r0
 8009a04:	e7f9      	b.n	80099fa <__mcmp+0x2a>
	...

08009a08 <__mdiff>:
 8009a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a0a:	000e      	movs	r6, r1
 8009a0c:	0007      	movs	r7, r0
 8009a0e:	0011      	movs	r1, r2
 8009a10:	0030      	movs	r0, r6
 8009a12:	b087      	sub	sp, #28
 8009a14:	0014      	movs	r4, r2
 8009a16:	f7ff ffdb 	bl	80099d0 <__mcmp>
 8009a1a:	1e05      	subs	r5, r0, #0
 8009a1c:	d110      	bne.n	8009a40 <__mdiff+0x38>
 8009a1e:	0001      	movs	r1, r0
 8009a20:	0038      	movs	r0, r7
 8009a22:	f7ff fd4f 	bl	80094c4 <_Balloc>
 8009a26:	1e02      	subs	r2, r0, #0
 8009a28:	d104      	bne.n	8009a34 <__mdiff+0x2c>
 8009a2a:	4b40      	ldr	r3, [pc, #256]	; (8009b2c <__mdiff+0x124>)
 8009a2c:	4940      	ldr	r1, [pc, #256]	; (8009b30 <__mdiff+0x128>)
 8009a2e:	4841      	ldr	r0, [pc, #260]	; (8009b34 <__mdiff+0x12c>)
 8009a30:	f000 fb10 	bl	800a054 <__assert_func>
 8009a34:	2301      	movs	r3, #1
 8009a36:	6145      	str	r5, [r0, #20]
 8009a38:	6103      	str	r3, [r0, #16]
 8009a3a:	0010      	movs	r0, r2
 8009a3c:	b007      	add	sp, #28
 8009a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a40:	2301      	movs	r3, #1
 8009a42:	9301      	str	r3, [sp, #4]
 8009a44:	2800      	cmp	r0, #0
 8009a46:	db04      	blt.n	8009a52 <__mdiff+0x4a>
 8009a48:	0023      	movs	r3, r4
 8009a4a:	0034      	movs	r4, r6
 8009a4c:	001e      	movs	r6, r3
 8009a4e:	2300      	movs	r3, #0
 8009a50:	9301      	str	r3, [sp, #4]
 8009a52:	0038      	movs	r0, r7
 8009a54:	6861      	ldr	r1, [r4, #4]
 8009a56:	f7ff fd35 	bl	80094c4 <_Balloc>
 8009a5a:	1e02      	subs	r2, r0, #0
 8009a5c:	d103      	bne.n	8009a66 <__mdiff+0x5e>
 8009a5e:	2190      	movs	r1, #144	; 0x90
 8009a60:	4b32      	ldr	r3, [pc, #200]	; (8009b2c <__mdiff+0x124>)
 8009a62:	0089      	lsls	r1, r1, #2
 8009a64:	e7e3      	b.n	8009a2e <__mdiff+0x26>
 8009a66:	9b01      	ldr	r3, [sp, #4]
 8009a68:	2700      	movs	r7, #0
 8009a6a:	60c3      	str	r3, [r0, #12]
 8009a6c:	6920      	ldr	r0, [r4, #16]
 8009a6e:	3414      	adds	r4, #20
 8009a70:	9401      	str	r4, [sp, #4]
 8009a72:	9b01      	ldr	r3, [sp, #4]
 8009a74:	0084      	lsls	r4, r0, #2
 8009a76:	191b      	adds	r3, r3, r4
 8009a78:	0034      	movs	r4, r6
 8009a7a:	9302      	str	r3, [sp, #8]
 8009a7c:	6933      	ldr	r3, [r6, #16]
 8009a7e:	3414      	adds	r4, #20
 8009a80:	0099      	lsls	r1, r3, #2
 8009a82:	1863      	adds	r3, r4, r1
 8009a84:	9303      	str	r3, [sp, #12]
 8009a86:	0013      	movs	r3, r2
 8009a88:	3314      	adds	r3, #20
 8009a8a:	469c      	mov	ip, r3
 8009a8c:	9305      	str	r3, [sp, #20]
 8009a8e:	9b01      	ldr	r3, [sp, #4]
 8009a90:	9304      	str	r3, [sp, #16]
 8009a92:	9b04      	ldr	r3, [sp, #16]
 8009a94:	cc02      	ldmia	r4!, {r1}
 8009a96:	cb20      	ldmia	r3!, {r5}
 8009a98:	9304      	str	r3, [sp, #16]
 8009a9a:	b2ab      	uxth	r3, r5
 8009a9c:	19df      	adds	r7, r3, r7
 8009a9e:	b28b      	uxth	r3, r1
 8009aa0:	1afb      	subs	r3, r7, r3
 8009aa2:	0c2d      	lsrs	r5, r5, #16
 8009aa4:	0c09      	lsrs	r1, r1, #16
 8009aa6:	1a69      	subs	r1, r5, r1
 8009aa8:	141d      	asrs	r5, r3, #16
 8009aaa:	1949      	adds	r1, r1, r5
 8009aac:	140f      	asrs	r7, r1, #16
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	0409      	lsls	r1, r1, #16
 8009ab2:	430b      	orrs	r3, r1
 8009ab4:	4661      	mov	r1, ip
 8009ab6:	c108      	stmia	r1!, {r3}
 8009ab8:	9b03      	ldr	r3, [sp, #12]
 8009aba:	468c      	mov	ip, r1
 8009abc:	42a3      	cmp	r3, r4
 8009abe:	d8e8      	bhi.n	8009a92 <__mdiff+0x8a>
 8009ac0:	0031      	movs	r1, r6
 8009ac2:	9c03      	ldr	r4, [sp, #12]
 8009ac4:	3115      	adds	r1, #21
 8009ac6:	2304      	movs	r3, #4
 8009ac8:	428c      	cmp	r4, r1
 8009aca:	d304      	bcc.n	8009ad6 <__mdiff+0xce>
 8009acc:	1ba3      	subs	r3, r4, r6
 8009ace:	3b15      	subs	r3, #21
 8009ad0:	089b      	lsrs	r3, r3, #2
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	9901      	ldr	r1, [sp, #4]
 8009ad8:	18cc      	adds	r4, r1, r3
 8009ada:	9905      	ldr	r1, [sp, #20]
 8009adc:	0026      	movs	r6, r4
 8009ade:	18cb      	adds	r3, r1, r3
 8009ae0:	469c      	mov	ip, r3
 8009ae2:	9902      	ldr	r1, [sp, #8]
 8009ae4:	428e      	cmp	r6, r1
 8009ae6:	d310      	bcc.n	8009b0a <__mdiff+0x102>
 8009ae8:	9e02      	ldr	r6, [sp, #8]
 8009aea:	1ee5      	subs	r5, r4, #3
 8009aec:	2100      	movs	r1, #0
 8009aee:	42ae      	cmp	r6, r5
 8009af0:	d304      	bcc.n	8009afc <__mdiff+0xf4>
 8009af2:	0031      	movs	r1, r6
 8009af4:	3103      	adds	r1, #3
 8009af6:	1b09      	subs	r1, r1, r4
 8009af8:	0889      	lsrs	r1, r1, #2
 8009afa:	0089      	lsls	r1, r1, #2
 8009afc:	185b      	adds	r3, r3, r1
 8009afe:	3b04      	subs	r3, #4
 8009b00:	6819      	ldr	r1, [r3, #0]
 8009b02:	2900      	cmp	r1, #0
 8009b04:	d00f      	beq.n	8009b26 <__mdiff+0x11e>
 8009b06:	6110      	str	r0, [r2, #16]
 8009b08:	e797      	b.n	8009a3a <__mdiff+0x32>
 8009b0a:	ce02      	ldmia	r6!, {r1}
 8009b0c:	b28d      	uxth	r5, r1
 8009b0e:	19ed      	adds	r5, r5, r7
 8009b10:	0c0f      	lsrs	r7, r1, #16
 8009b12:	1429      	asrs	r1, r5, #16
 8009b14:	1879      	adds	r1, r7, r1
 8009b16:	140f      	asrs	r7, r1, #16
 8009b18:	b2ad      	uxth	r5, r5
 8009b1a:	0409      	lsls	r1, r1, #16
 8009b1c:	430d      	orrs	r5, r1
 8009b1e:	4661      	mov	r1, ip
 8009b20:	c120      	stmia	r1!, {r5}
 8009b22:	468c      	mov	ip, r1
 8009b24:	e7dd      	b.n	8009ae2 <__mdiff+0xda>
 8009b26:	3801      	subs	r0, #1
 8009b28:	e7e9      	b.n	8009afe <__mdiff+0xf6>
 8009b2a:	46c0      	nop			; (mov r8, r8)
 8009b2c:	0800afff 	.word	0x0800afff
 8009b30:	00000232 	.word	0x00000232
 8009b34:	0800b010 	.word	0x0800b010

08009b38 <__d2b>:
 8009b38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b3a:	2101      	movs	r1, #1
 8009b3c:	0014      	movs	r4, r2
 8009b3e:	001e      	movs	r6, r3
 8009b40:	9f08      	ldr	r7, [sp, #32]
 8009b42:	f7ff fcbf 	bl	80094c4 <_Balloc>
 8009b46:	1e05      	subs	r5, r0, #0
 8009b48:	d105      	bne.n	8009b56 <__d2b+0x1e>
 8009b4a:	0002      	movs	r2, r0
 8009b4c:	4b26      	ldr	r3, [pc, #152]	; (8009be8 <__d2b+0xb0>)
 8009b4e:	4927      	ldr	r1, [pc, #156]	; (8009bec <__d2b+0xb4>)
 8009b50:	4827      	ldr	r0, [pc, #156]	; (8009bf0 <__d2b+0xb8>)
 8009b52:	f000 fa7f 	bl	800a054 <__assert_func>
 8009b56:	0333      	lsls	r3, r6, #12
 8009b58:	0076      	lsls	r6, r6, #1
 8009b5a:	0b1b      	lsrs	r3, r3, #12
 8009b5c:	0d76      	lsrs	r6, r6, #21
 8009b5e:	d124      	bne.n	8009baa <__d2b+0x72>
 8009b60:	9301      	str	r3, [sp, #4]
 8009b62:	2c00      	cmp	r4, #0
 8009b64:	d027      	beq.n	8009bb6 <__d2b+0x7e>
 8009b66:	4668      	mov	r0, sp
 8009b68:	9400      	str	r4, [sp, #0]
 8009b6a:	f7ff fd71 	bl	8009650 <__lo0bits>
 8009b6e:	9c00      	ldr	r4, [sp, #0]
 8009b70:	2800      	cmp	r0, #0
 8009b72:	d01e      	beq.n	8009bb2 <__d2b+0x7a>
 8009b74:	9b01      	ldr	r3, [sp, #4]
 8009b76:	2120      	movs	r1, #32
 8009b78:	001a      	movs	r2, r3
 8009b7a:	1a09      	subs	r1, r1, r0
 8009b7c:	408a      	lsls	r2, r1
 8009b7e:	40c3      	lsrs	r3, r0
 8009b80:	4322      	orrs	r2, r4
 8009b82:	616a      	str	r2, [r5, #20]
 8009b84:	9301      	str	r3, [sp, #4]
 8009b86:	9c01      	ldr	r4, [sp, #4]
 8009b88:	61ac      	str	r4, [r5, #24]
 8009b8a:	1e63      	subs	r3, r4, #1
 8009b8c:	419c      	sbcs	r4, r3
 8009b8e:	3401      	adds	r4, #1
 8009b90:	612c      	str	r4, [r5, #16]
 8009b92:	2e00      	cmp	r6, #0
 8009b94:	d018      	beq.n	8009bc8 <__d2b+0x90>
 8009b96:	4b17      	ldr	r3, [pc, #92]	; (8009bf4 <__d2b+0xbc>)
 8009b98:	18f6      	adds	r6, r6, r3
 8009b9a:	2335      	movs	r3, #53	; 0x35
 8009b9c:	1836      	adds	r6, r6, r0
 8009b9e:	1a18      	subs	r0, r3, r0
 8009ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ba2:	603e      	str	r6, [r7, #0]
 8009ba4:	6018      	str	r0, [r3, #0]
 8009ba6:	0028      	movs	r0, r5
 8009ba8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009baa:	2280      	movs	r2, #128	; 0x80
 8009bac:	0352      	lsls	r2, r2, #13
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	e7d6      	b.n	8009b60 <__d2b+0x28>
 8009bb2:	616c      	str	r4, [r5, #20]
 8009bb4:	e7e7      	b.n	8009b86 <__d2b+0x4e>
 8009bb6:	a801      	add	r0, sp, #4
 8009bb8:	f7ff fd4a 	bl	8009650 <__lo0bits>
 8009bbc:	2401      	movs	r4, #1
 8009bbe:	9b01      	ldr	r3, [sp, #4]
 8009bc0:	612c      	str	r4, [r5, #16]
 8009bc2:	616b      	str	r3, [r5, #20]
 8009bc4:	3020      	adds	r0, #32
 8009bc6:	e7e4      	b.n	8009b92 <__d2b+0x5a>
 8009bc8:	4b0b      	ldr	r3, [pc, #44]	; (8009bf8 <__d2b+0xc0>)
 8009bca:	18c0      	adds	r0, r0, r3
 8009bcc:	4b0b      	ldr	r3, [pc, #44]	; (8009bfc <__d2b+0xc4>)
 8009bce:	6038      	str	r0, [r7, #0]
 8009bd0:	18e3      	adds	r3, r4, r3
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	18eb      	adds	r3, r5, r3
 8009bd6:	6958      	ldr	r0, [r3, #20]
 8009bd8:	f7ff fd20 	bl	800961c <__hi0bits>
 8009bdc:	0164      	lsls	r4, r4, #5
 8009bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009be0:	1a24      	subs	r4, r4, r0
 8009be2:	601c      	str	r4, [r3, #0]
 8009be4:	e7df      	b.n	8009ba6 <__d2b+0x6e>
 8009be6:	46c0      	nop			; (mov r8, r8)
 8009be8:	0800afff 	.word	0x0800afff
 8009bec:	0000030a 	.word	0x0000030a
 8009bf0:	0800b010 	.word	0x0800b010
 8009bf4:	fffffbcd 	.word	0xfffffbcd
 8009bf8:	fffffbce 	.word	0xfffffbce
 8009bfc:	3fffffff 	.word	0x3fffffff

08009c00 <_calloc_r>:
 8009c00:	434a      	muls	r2, r1
 8009c02:	b570      	push	{r4, r5, r6, lr}
 8009c04:	0011      	movs	r1, r2
 8009c06:	0015      	movs	r5, r2
 8009c08:	f000 f852 	bl	8009cb0 <_malloc_r>
 8009c0c:	1e04      	subs	r4, r0, #0
 8009c0e:	d003      	beq.n	8009c18 <_calloc_r+0x18>
 8009c10:	002a      	movs	r2, r5
 8009c12:	2100      	movs	r1, #0
 8009c14:	f7fe f8e8 	bl	8007de8 <memset>
 8009c18:	0020      	movs	r0, r4
 8009c1a:	bd70      	pop	{r4, r5, r6, pc}

08009c1c <_free_r>:
 8009c1c:	b570      	push	{r4, r5, r6, lr}
 8009c1e:	0005      	movs	r5, r0
 8009c20:	2900      	cmp	r1, #0
 8009c22:	d010      	beq.n	8009c46 <_free_r+0x2a>
 8009c24:	1f0c      	subs	r4, r1, #4
 8009c26:	6823      	ldr	r3, [r4, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	da00      	bge.n	8009c2e <_free_r+0x12>
 8009c2c:	18e4      	adds	r4, r4, r3
 8009c2e:	0028      	movs	r0, r5
 8009c30:	f000 fa64 	bl	800a0fc <__malloc_lock>
 8009c34:	4a1d      	ldr	r2, [pc, #116]	; (8009cac <_free_r+0x90>)
 8009c36:	6813      	ldr	r3, [r2, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d105      	bne.n	8009c48 <_free_r+0x2c>
 8009c3c:	6063      	str	r3, [r4, #4]
 8009c3e:	6014      	str	r4, [r2, #0]
 8009c40:	0028      	movs	r0, r5
 8009c42:	f000 fa63 	bl	800a10c <__malloc_unlock>
 8009c46:	bd70      	pop	{r4, r5, r6, pc}
 8009c48:	42a3      	cmp	r3, r4
 8009c4a:	d908      	bls.n	8009c5e <_free_r+0x42>
 8009c4c:	6821      	ldr	r1, [r4, #0]
 8009c4e:	1860      	adds	r0, r4, r1
 8009c50:	4283      	cmp	r3, r0
 8009c52:	d1f3      	bne.n	8009c3c <_free_r+0x20>
 8009c54:	6818      	ldr	r0, [r3, #0]
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	1841      	adds	r1, r0, r1
 8009c5a:	6021      	str	r1, [r4, #0]
 8009c5c:	e7ee      	b.n	8009c3c <_free_r+0x20>
 8009c5e:	001a      	movs	r2, r3
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d001      	beq.n	8009c6a <_free_r+0x4e>
 8009c66:	42a3      	cmp	r3, r4
 8009c68:	d9f9      	bls.n	8009c5e <_free_r+0x42>
 8009c6a:	6811      	ldr	r1, [r2, #0]
 8009c6c:	1850      	adds	r0, r2, r1
 8009c6e:	42a0      	cmp	r0, r4
 8009c70:	d10b      	bne.n	8009c8a <_free_r+0x6e>
 8009c72:	6820      	ldr	r0, [r4, #0]
 8009c74:	1809      	adds	r1, r1, r0
 8009c76:	1850      	adds	r0, r2, r1
 8009c78:	6011      	str	r1, [r2, #0]
 8009c7a:	4283      	cmp	r3, r0
 8009c7c:	d1e0      	bne.n	8009c40 <_free_r+0x24>
 8009c7e:	6818      	ldr	r0, [r3, #0]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	1841      	adds	r1, r0, r1
 8009c84:	6011      	str	r1, [r2, #0]
 8009c86:	6053      	str	r3, [r2, #4]
 8009c88:	e7da      	b.n	8009c40 <_free_r+0x24>
 8009c8a:	42a0      	cmp	r0, r4
 8009c8c:	d902      	bls.n	8009c94 <_free_r+0x78>
 8009c8e:	230c      	movs	r3, #12
 8009c90:	602b      	str	r3, [r5, #0]
 8009c92:	e7d5      	b.n	8009c40 <_free_r+0x24>
 8009c94:	6821      	ldr	r1, [r4, #0]
 8009c96:	1860      	adds	r0, r4, r1
 8009c98:	4283      	cmp	r3, r0
 8009c9a:	d103      	bne.n	8009ca4 <_free_r+0x88>
 8009c9c:	6818      	ldr	r0, [r3, #0]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	1841      	adds	r1, r0, r1
 8009ca2:	6021      	str	r1, [r4, #0]
 8009ca4:	6063      	str	r3, [r4, #4]
 8009ca6:	6054      	str	r4, [r2, #4]
 8009ca8:	e7ca      	b.n	8009c40 <_free_r+0x24>
 8009caa:	46c0      	nop			; (mov r8, r8)
 8009cac:	20000234 	.word	0x20000234

08009cb0 <_malloc_r>:
 8009cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cb2:	2303      	movs	r3, #3
 8009cb4:	1ccd      	adds	r5, r1, #3
 8009cb6:	439d      	bics	r5, r3
 8009cb8:	3508      	adds	r5, #8
 8009cba:	0006      	movs	r6, r0
 8009cbc:	2d0c      	cmp	r5, #12
 8009cbe:	d21f      	bcs.n	8009d00 <_malloc_r+0x50>
 8009cc0:	250c      	movs	r5, #12
 8009cc2:	42a9      	cmp	r1, r5
 8009cc4:	d81e      	bhi.n	8009d04 <_malloc_r+0x54>
 8009cc6:	0030      	movs	r0, r6
 8009cc8:	f000 fa18 	bl	800a0fc <__malloc_lock>
 8009ccc:	4925      	ldr	r1, [pc, #148]	; (8009d64 <_malloc_r+0xb4>)
 8009cce:	680a      	ldr	r2, [r1, #0]
 8009cd0:	0014      	movs	r4, r2
 8009cd2:	2c00      	cmp	r4, #0
 8009cd4:	d11a      	bne.n	8009d0c <_malloc_r+0x5c>
 8009cd6:	4f24      	ldr	r7, [pc, #144]	; (8009d68 <_malloc_r+0xb8>)
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d104      	bne.n	8009ce8 <_malloc_r+0x38>
 8009cde:	0021      	movs	r1, r4
 8009ce0:	0030      	movs	r0, r6
 8009ce2:	f000 f9a5 	bl	800a030 <_sbrk_r>
 8009ce6:	6038      	str	r0, [r7, #0]
 8009ce8:	0029      	movs	r1, r5
 8009cea:	0030      	movs	r0, r6
 8009cec:	f000 f9a0 	bl	800a030 <_sbrk_r>
 8009cf0:	1c43      	adds	r3, r0, #1
 8009cf2:	d12b      	bne.n	8009d4c <_malloc_r+0x9c>
 8009cf4:	230c      	movs	r3, #12
 8009cf6:	0030      	movs	r0, r6
 8009cf8:	6033      	str	r3, [r6, #0]
 8009cfa:	f000 fa07 	bl	800a10c <__malloc_unlock>
 8009cfe:	e003      	b.n	8009d08 <_malloc_r+0x58>
 8009d00:	2d00      	cmp	r5, #0
 8009d02:	dade      	bge.n	8009cc2 <_malloc_r+0x12>
 8009d04:	230c      	movs	r3, #12
 8009d06:	6033      	str	r3, [r6, #0]
 8009d08:	2000      	movs	r0, #0
 8009d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d0c:	6823      	ldr	r3, [r4, #0]
 8009d0e:	1b5b      	subs	r3, r3, r5
 8009d10:	d419      	bmi.n	8009d46 <_malloc_r+0x96>
 8009d12:	2b0b      	cmp	r3, #11
 8009d14:	d903      	bls.n	8009d1e <_malloc_r+0x6e>
 8009d16:	6023      	str	r3, [r4, #0]
 8009d18:	18e4      	adds	r4, r4, r3
 8009d1a:	6025      	str	r5, [r4, #0]
 8009d1c:	e003      	b.n	8009d26 <_malloc_r+0x76>
 8009d1e:	6863      	ldr	r3, [r4, #4]
 8009d20:	42a2      	cmp	r2, r4
 8009d22:	d10e      	bne.n	8009d42 <_malloc_r+0x92>
 8009d24:	600b      	str	r3, [r1, #0]
 8009d26:	0030      	movs	r0, r6
 8009d28:	f000 f9f0 	bl	800a10c <__malloc_unlock>
 8009d2c:	0020      	movs	r0, r4
 8009d2e:	2207      	movs	r2, #7
 8009d30:	300b      	adds	r0, #11
 8009d32:	1d23      	adds	r3, r4, #4
 8009d34:	4390      	bics	r0, r2
 8009d36:	1ac2      	subs	r2, r0, r3
 8009d38:	4298      	cmp	r0, r3
 8009d3a:	d0e6      	beq.n	8009d0a <_malloc_r+0x5a>
 8009d3c:	1a1b      	subs	r3, r3, r0
 8009d3e:	50a3      	str	r3, [r4, r2]
 8009d40:	e7e3      	b.n	8009d0a <_malloc_r+0x5a>
 8009d42:	6053      	str	r3, [r2, #4]
 8009d44:	e7ef      	b.n	8009d26 <_malloc_r+0x76>
 8009d46:	0022      	movs	r2, r4
 8009d48:	6864      	ldr	r4, [r4, #4]
 8009d4a:	e7c2      	b.n	8009cd2 <_malloc_r+0x22>
 8009d4c:	2303      	movs	r3, #3
 8009d4e:	1cc4      	adds	r4, r0, #3
 8009d50:	439c      	bics	r4, r3
 8009d52:	42a0      	cmp	r0, r4
 8009d54:	d0e1      	beq.n	8009d1a <_malloc_r+0x6a>
 8009d56:	1a21      	subs	r1, r4, r0
 8009d58:	0030      	movs	r0, r6
 8009d5a:	f000 f969 	bl	800a030 <_sbrk_r>
 8009d5e:	1c43      	adds	r3, r0, #1
 8009d60:	d1db      	bne.n	8009d1a <_malloc_r+0x6a>
 8009d62:	e7c7      	b.n	8009cf4 <_malloc_r+0x44>
 8009d64:	20000234 	.word	0x20000234
 8009d68:	20000238 	.word	0x20000238

08009d6c <__ssputs_r>:
 8009d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d6e:	688e      	ldr	r6, [r1, #8]
 8009d70:	b085      	sub	sp, #20
 8009d72:	0007      	movs	r7, r0
 8009d74:	000c      	movs	r4, r1
 8009d76:	9203      	str	r2, [sp, #12]
 8009d78:	9301      	str	r3, [sp, #4]
 8009d7a:	429e      	cmp	r6, r3
 8009d7c:	d83c      	bhi.n	8009df8 <__ssputs_r+0x8c>
 8009d7e:	2390      	movs	r3, #144	; 0x90
 8009d80:	898a      	ldrh	r2, [r1, #12]
 8009d82:	00db      	lsls	r3, r3, #3
 8009d84:	421a      	tst	r2, r3
 8009d86:	d034      	beq.n	8009df2 <__ssputs_r+0x86>
 8009d88:	2503      	movs	r5, #3
 8009d8a:	6909      	ldr	r1, [r1, #16]
 8009d8c:	6823      	ldr	r3, [r4, #0]
 8009d8e:	1a5b      	subs	r3, r3, r1
 8009d90:	9302      	str	r3, [sp, #8]
 8009d92:	6963      	ldr	r3, [r4, #20]
 8009d94:	9802      	ldr	r0, [sp, #8]
 8009d96:	435d      	muls	r5, r3
 8009d98:	0feb      	lsrs	r3, r5, #31
 8009d9a:	195d      	adds	r5, r3, r5
 8009d9c:	9b01      	ldr	r3, [sp, #4]
 8009d9e:	106d      	asrs	r5, r5, #1
 8009da0:	3301      	adds	r3, #1
 8009da2:	181b      	adds	r3, r3, r0
 8009da4:	42ab      	cmp	r3, r5
 8009da6:	d900      	bls.n	8009daa <__ssputs_r+0x3e>
 8009da8:	001d      	movs	r5, r3
 8009daa:	0553      	lsls	r3, r2, #21
 8009dac:	d532      	bpl.n	8009e14 <__ssputs_r+0xa8>
 8009dae:	0029      	movs	r1, r5
 8009db0:	0038      	movs	r0, r7
 8009db2:	f7ff ff7d 	bl	8009cb0 <_malloc_r>
 8009db6:	1e06      	subs	r6, r0, #0
 8009db8:	d109      	bne.n	8009dce <__ssputs_r+0x62>
 8009dba:	230c      	movs	r3, #12
 8009dbc:	603b      	str	r3, [r7, #0]
 8009dbe:	2340      	movs	r3, #64	; 0x40
 8009dc0:	2001      	movs	r0, #1
 8009dc2:	89a2      	ldrh	r2, [r4, #12]
 8009dc4:	4240      	negs	r0, r0
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	81a3      	strh	r3, [r4, #12]
 8009dca:	b005      	add	sp, #20
 8009dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dce:	9a02      	ldr	r2, [sp, #8]
 8009dd0:	6921      	ldr	r1, [r4, #16]
 8009dd2:	f7ff fb6e 	bl	80094b2 <memcpy>
 8009dd6:	89a3      	ldrh	r3, [r4, #12]
 8009dd8:	4a14      	ldr	r2, [pc, #80]	; (8009e2c <__ssputs_r+0xc0>)
 8009dda:	401a      	ands	r2, r3
 8009ddc:	2380      	movs	r3, #128	; 0x80
 8009dde:	4313      	orrs	r3, r2
 8009de0:	81a3      	strh	r3, [r4, #12]
 8009de2:	9b02      	ldr	r3, [sp, #8]
 8009de4:	6126      	str	r6, [r4, #16]
 8009de6:	18f6      	adds	r6, r6, r3
 8009de8:	6026      	str	r6, [r4, #0]
 8009dea:	6165      	str	r5, [r4, #20]
 8009dec:	9e01      	ldr	r6, [sp, #4]
 8009dee:	1aed      	subs	r5, r5, r3
 8009df0:	60a5      	str	r5, [r4, #8]
 8009df2:	9b01      	ldr	r3, [sp, #4]
 8009df4:	429e      	cmp	r6, r3
 8009df6:	d900      	bls.n	8009dfa <__ssputs_r+0x8e>
 8009df8:	9e01      	ldr	r6, [sp, #4]
 8009dfa:	0032      	movs	r2, r6
 8009dfc:	9903      	ldr	r1, [sp, #12]
 8009dfe:	6820      	ldr	r0, [r4, #0]
 8009e00:	f000 f968 	bl	800a0d4 <memmove>
 8009e04:	68a3      	ldr	r3, [r4, #8]
 8009e06:	2000      	movs	r0, #0
 8009e08:	1b9b      	subs	r3, r3, r6
 8009e0a:	60a3      	str	r3, [r4, #8]
 8009e0c:	6823      	ldr	r3, [r4, #0]
 8009e0e:	199e      	adds	r6, r3, r6
 8009e10:	6026      	str	r6, [r4, #0]
 8009e12:	e7da      	b.n	8009dca <__ssputs_r+0x5e>
 8009e14:	002a      	movs	r2, r5
 8009e16:	0038      	movs	r0, r7
 8009e18:	f000 f980 	bl	800a11c <_realloc_r>
 8009e1c:	1e06      	subs	r6, r0, #0
 8009e1e:	d1e0      	bne.n	8009de2 <__ssputs_r+0x76>
 8009e20:	0038      	movs	r0, r7
 8009e22:	6921      	ldr	r1, [r4, #16]
 8009e24:	f7ff fefa 	bl	8009c1c <_free_r>
 8009e28:	e7c7      	b.n	8009dba <__ssputs_r+0x4e>
 8009e2a:	46c0      	nop			; (mov r8, r8)
 8009e2c:	fffffb7f 	.word	0xfffffb7f

08009e30 <_svfiprintf_r>:
 8009e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e32:	b0a1      	sub	sp, #132	; 0x84
 8009e34:	9003      	str	r0, [sp, #12]
 8009e36:	001d      	movs	r5, r3
 8009e38:	898b      	ldrh	r3, [r1, #12]
 8009e3a:	000f      	movs	r7, r1
 8009e3c:	0016      	movs	r6, r2
 8009e3e:	061b      	lsls	r3, r3, #24
 8009e40:	d511      	bpl.n	8009e66 <_svfiprintf_r+0x36>
 8009e42:	690b      	ldr	r3, [r1, #16]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d10e      	bne.n	8009e66 <_svfiprintf_r+0x36>
 8009e48:	2140      	movs	r1, #64	; 0x40
 8009e4a:	f7ff ff31 	bl	8009cb0 <_malloc_r>
 8009e4e:	6038      	str	r0, [r7, #0]
 8009e50:	6138      	str	r0, [r7, #16]
 8009e52:	2800      	cmp	r0, #0
 8009e54:	d105      	bne.n	8009e62 <_svfiprintf_r+0x32>
 8009e56:	230c      	movs	r3, #12
 8009e58:	9a03      	ldr	r2, [sp, #12]
 8009e5a:	3801      	subs	r0, #1
 8009e5c:	6013      	str	r3, [r2, #0]
 8009e5e:	b021      	add	sp, #132	; 0x84
 8009e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e62:	2340      	movs	r3, #64	; 0x40
 8009e64:	617b      	str	r3, [r7, #20]
 8009e66:	2300      	movs	r3, #0
 8009e68:	ac08      	add	r4, sp, #32
 8009e6a:	6163      	str	r3, [r4, #20]
 8009e6c:	3320      	adds	r3, #32
 8009e6e:	7663      	strb	r3, [r4, #25]
 8009e70:	3310      	adds	r3, #16
 8009e72:	76a3      	strb	r3, [r4, #26]
 8009e74:	9507      	str	r5, [sp, #28]
 8009e76:	0035      	movs	r5, r6
 8009e78:	782b      	ldrb	r3, [r5, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d001      	beq.n	8009e82 <_svfiprintf_r+0x52>
 8009e7e:	2b25      	cmp	r3, #37	; 0x25
 8009e80:	d147      	bne.n	8009f12 <_svfiprintf_r+0xe2>
 8009e82:	1bab      	subs	r3, r5, r6
 8009e84:	9305      	str	r3, [sp, #20]
 8009e86:	42b5      	cmp	r5, r6
 8009e88:	d00c      	beq.n	8009ea4 <_svfiprintf_r+0x74>
 8009e8a:	0032      	movs	r2, r6
 8009e8c:	0039      	movs	r1, r7
 8009e8e:	9803      	ldr	r0, [sp, #12]
 8009e90:	f7ff ff6c 	bl	8009d6c <__ssputs_r>
 8009e94:	1c43      	adds	r3, r0, #1
 8009e96:	d100      	bne.n	8009e9a <_svfiprintf_r+0x6a>
 8009e98:	e0ae      	b.n	8009ff8 <_svfiprintf_r+0x1c8>
 8009e9a:	6962      	ldr	r2, [r4, #20]
 8009e9c:	9b05      	ldr	r3, [sp, #20]
 8009e9e:	4694      	mov	ip, r2
 8009ea0:	4463      	add	r3, ip
 8009ea2:	6163      	str	r3, [r4, #20]
 8009ea4:	782b      	ldrb	r3, [r5, #0]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d100      	bne.n	8009eac <_svfiprintf_r+0x7c>
 8009eaa:	e0a5      	b.n	8009ff8 <_svfiprintf_r+0x1c8>
 8009eac:	2201      	movs	r2, #1
 8009eae:	2300      	movs	r3, #0
 8009eb0:	4252      	negs	r2, r2
 8009eb2:	6062      	str	r2, [r4, #4]
 8009eb4:	a904      	add	r1, sp, #16
 8009eb6:	3254      	adds	r2, #84	; 0x54
 8009eb8:	1852      	adds	r2, r2, r1
 8009eba:	1c6e      	adds	r6, r5, #1
 8009ebc:	6023      	str	r3, [r4, #0]
 8009ebe:	60e3      	str	r3, [r4, #12]
 8009ec0:	60a3      	str	r3, [r4, #8]
 8009ec2:	7013      	strb	r3, [r2, #0]
 8009ec4:	65a3      	str	r3, [r4, #88]	; 0x58
 8009ec6:	2205      	movs	r2, #5
 8009ec8:	7831      	ldrb	r1, [r6, #0]
 8009eca:	4854      	ldr	r0, [pc, #336]	; (800a01c <_svfiprintf_r+0x1ec>)
 8009ecc:	f7ff fae6 	bl	800949c <memchr>
 8009ed0:	1c75      	adds	r5, r6, #1
 8009ed2:	2800      	cmp	r0, #0
 8009ed4:	d11f      	bne.n	8009f16 <_svfiprintf_r+0xe6>
 8009ed6:	6822      	ldr	r2, [r4, #0]
 8009ed8:	06d3      	lsls	r3, r2, #27
 8009eda:	d504      	bpl.n	8009ee6 <_svfiprintf_r+0xb6>
 8009edc:	2353      	movs	r3, #83	; 0x53
 8009ede:	a904      	add	r1, sp, #16
 8009ee0:	185b      	adds	r3, r3, r1
 8009ee2:	2120      	movs	r1, #32
 8009ee4:	7019      	strb	r1, [r3, #0]
 8009ee6:	0713      	lsls	r3, r2, #28
 8009ee8:	d504      	bpl.n	8009ef4 <_svfiprintf_r+0xc4>
 8009eea:	2353      	movs	r3, #83	; 0x53
 8009eec:	a904      	add	r1, sp, #16
 8009eee:	185b      	adds	r3, r3, r1
 8009ef0:	212b      	movs	r1, #43	; 0x2b
 8009ef2:	7019      	strb	r1, [r3, #0]
 8009ef4:	7833      	ldrb	r3, [r6, #0]
 8009ef6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ef8:	d016      	beq.n	8009f28 <_svfiprintf_r+0xf8>
 8009efa:	0035      	movs	r5, r6
 8009efc:	2100      	movs	r1, #0
 8009efe:	200a      	movs	r0, #10
 8009f00:	68e3      	ldr	r3, [r4, #12]
 8009f02:	782a      	ldrb	r2, [r5, #0]
 8009f04:	1c6e      	adds	r6, r5, #1
 8009f06:	3a30      	subs	r2, #48	; 0x30
 8009f08:	2a09      	cmp	r2, #9
 8009f0a:	d94e      	bls.n	8009faa <_svfiprintf_r+0x17a>
 8009f0c:	2900      	cmp	r1, #0
 8009f0e:	d111      	bne.n	8009f34 <_svfiprintf_r+0x104>
 8009f10:	e017      	b.n	8009f42 <_svfiprintf_r+0x112>
 8009f12:	3501      	adds	r5, #1
 8009f14:	e7b0      	b.n	8009e78 <_svfiprintf_r+0x48>
 8009f16:	4b41      	ldr	r3, [pc, #260]	; (800a01c <_svfiprintf_r+0x1ec>)
 8009f18:	6822      	ldr	r2, [r4, #0]
 8009f1a:	1ac0      	subs	r0, r0, r3
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	4083      	lsls	r3, r0
 8009f20:	4313      	orrs	r3, r2
 8009f22:	002e      	movs	r6, r5
 8009f24:	6023      	str	r3, [r4, #0]
 8009f26:	e7ce      	b.n	8009ec6 <_svfiprintf_r+0x96>
 8009f28:	9b07      	ldr	r3, [sp, #28]
 8009f2a:	1d19      	adds	r1, r3, #4
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	9107      	str	r1, [sp, #28]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	db01      	blt.n	8009f38 <_svfiprintf_r+0x108>
 8009f34:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f36:	e004      	b.n	8009f42 <_svfiprintf_r+0x112>
 8009f38:	425b      	negs	r3, r3
 8009f3a:	60e3      	str	r3, [r4, #12]
 8009f3c:	2302      	movs	r3, #2
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	6023      	str	r3, [r4, #0]
 8009f42:	782b      	ldrb	r3, [r5, #0]
 8009f44:	2b2e      	cmp	r3, #46	; 0x2e
 8009f46:	d10a      	bne.n	8009f5e <_svfiprintf_r+0x12e>
 8009f48:	786b      	ldrb	r3, [r5, #1]
 8009f4a:	2b2a      	cmp	r3, #42	; 0x2a
 8009f4c:	d135      	bne.n	8009fba <_svfiprintf_r+0x18a>
 8009f4e:	9b07      	ldr	r3, [sp, #28]
 8009f50:	3502      	adds	r5, #2
 8009f52:	1d1a      	adds	r2, r3, #4
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	9207      	str	r2, [sp, #28]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	db2b      	blt.n	8009fb4 <_svfiprintf_r+0x184>
 8009f5c:	9309      	str	r3, [sp, #36]	; 0x24
 8009f5e:	4e30      	ldr	r6, [pc, #192]	; (800a020 <_svfiprintf_r+0x1f0>)
 8009f60:	2203      	movs	r2, #3
 8009f62:	0030      	movs	r0, r6
 8009f64:	7829      	ldrb	r1, [r5, #0]
 8009f66:	f7ff fa99 	bl	800949c <memchr>
 8009f6a:	2800      	cmp	r0, #0
 8009f6c:	d006      	beq.n	8009f7c <_svfiprintf_r+0x14c>
 8009f6e:	2340      	movs	r3, #64	; 0x40
 8009f70:	1b80      	subs	r0, r0, r6
 8009f72:	4083      	lsls	r3, r0
 8009f74:	6822      	ldr	r2, [r4, #0]
 8009f76:	3501      	adds	r5, #1
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	6023      	str	r3, [r4, #0]
 8009f7c:	7829      	ldrb	r1, [r5, #0]
 8009f7e:	2206      	movs	r2, #6
 8009f80:	4828      	ldr	r0, [pc, #160]	; (800a024 <_svfiprintf_r+0x1f4>)
 8009f82:	1c6e      	adds	r6, r5, #1
 8009f84:	7621      	strb	r1, [r4, #24]
 8009f86:	f7ff fa89 	bl	800949c <memchr>
 8009f8a:	2800      	cmp	r0, #0
 8009f8c:	d03c      	beq.n	800a008 <_svfiprintf_r+0x1d8>
 8009f8e:	4b26      	ldr	r3, [pc, #152]	; (800a028 <_svfiprintf_r+0x1f8>)
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d125      	bne.n	8009fe0 <_svfiprintf_r+0x1b0>
 8009f94:	2207      	movs	r2, #7
 8009f96:	9b07      	ldr	r3, [sp, #28]
 8009f98:	3307      	adds	r3, #7
 8009f9a:	4393      	bics	r3, r2
 8009f9c:	3308      	adds	r3, #8
 8009f9e:	9307      	str	r3, [sp, #28]
 8009fa0:	6963      	ldr	r3, [r4, #20]
 8009fa2:	9a04      	ldr	r2, [sp, #16]
 8009fa4:	189b      	adds	r3, r3, r2
 8009fa6:	6163      	str	r3, [r4, #20]
 8009fa8:	e765      	b.n	8009e76 <_svfiprintf_r+0x46>
 8009faa:	4343      	muls	r3, r0
 8009fac:	0035      	movs	r5, r6
 8009fae:	2101      	movs	r1, #1
 8009fb0:	189b      	adds	r3, r3, r2
 8009fb2:	e7a6      	b.n	8009f02 <_svfiprintf_r+0xd2>
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	425b      	negs	r3, r3
 8009fb8:	e7d0      	b.n	8009f5c <_svfiprintf_r+0x12c>
 8009fba:	2300      	movs	r3, #0
 8009fbc:	200a      	movs	r0, #10
 8009fbe:	001a      	movs	r2, r3
 8009fc0:	3501      	adds	r5, #1
 8009fc2:	6063      	str	r3, [r4, #4]
 8009fc4:	7829      	ldrb	r1, [r5, #0]
 8009fc6:	1c6e      	adds	r6, r5, #1
 8009fc8:	3930      	subs	r1, #48	; 0x30
 8009fca:	2909      	cmp	r1, #9
 8009fcc:	d903      	bls.n	8009fd6 <_svfiprintf_r+0x1a6>
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d0c5      	beq.n	8009f5e <_svfiprintf_r+0x12e>
 8009fd2:	9209      	str	r2, [sp, #36]	; 0x24
 8009fd4:	e7c3      	b.n	8009f5e <_svfiprintf_r+0x12e>
 8009fd6:	4342      	muls	r2, r0
 8009fd8:	0035      	movs	r5, r6
 8009fda:	2301      	movs	r3, #1
 8009fdc:	1852      	adds	r2, r2, r1
 8009fde:	e7f1      	b.n	8009fc4 <_svfiprintf_r+0x194>
 8009fe0:	ab07      	add	r3, sp, #28
 8009fe2:	9300      	str	r3, [sp, #0]
 8009fe4:	003a      	movs	r2, r7
 8009fe6:	0021      	movs	r1, r4
 8009fe8:	4b10      	ldr	r3, [pc, #64]	; (800a02c <_svfiprintf_r+0x1fc>)
 8009fea:	9803      	ldr	r0, [sp, #12]
 8009fec:	f7fd ffae 	bl	8007f4c <_printf_float>
 8009ff0:	9004      	str	r0, [sp, #16]
 8009ff2:	9b04      	ldr	r3, [sp, #16]
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	d1d3      	bne.n	8009fa0 <_svfiprintf_r+0x170>
 8009ff8:	89bb      	ldrh	r3, [r7, #12]
 8009ffa:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009ffc:	065b      	lsls	r3, r3, #25
 8009ffe:	d400      	bmi.n	800a002 <_svfiprintf_r+0x1d2>
 800a000:	e72d      	b.n	8009e5e <_svfiprintf_r+0x2e>
 800a002:	2001      	movs	r0, #1
 800a004:	4240      	negs	r0, r0
 800a006:	e72a      	b.n	8009e5e <_svfiprintf_r+0x2e>
 800a008:	ab07      	add	r3, sp, #28
 800a00a:	9300      	str	r3, [sp, #0]
 800a00c:	003a      	movs	r2, r7
 800a00e:	0021      	movs	r1, r4
 800a010:	4b06      	ldr	r3, [pc, #24]	; (800a02c <_svfiprintf_r+0x1fc>)
 800a012:	9803      	ldr	r0, [sp, #12]
 800a014:	f7fe fa58 	bl	80084c8 <_printf_i>
 800a018:	e7ea      	b.n	8009ff0 <_svfiprintf_r+0x1c0>
 800a01a:	46c0      	nop			; (mov r8, r8)
 800a01c:	0800b16c 	.word	0x0800b16c
 800a020:	0800b172 	.word	0x0800b172
 800a024:	0800b176 	.word	0x0800b176
 800a028:	08007f4d 	.word	0x08007f4d
 800a02c:	08009d6d 	.word	0x08009d6d

0800a030 <_sbrk_r>:
 800a030:	2300      	movs	r3, #0
 800a032:	b570      	push	{r4, r5, r6, lr}
 800a034:	4d06      	ldr	r5, [pc, #24]	; (800a050 <_sbrk_r+0x20>)
 800a036:	0004      	movs	r4, r0
 800a038:	0008      	movs	r0, r1
 800a03a:	602b      	str	r3, [r5, #0]
 800a03c:	f7f9 ffc2 	bl	8003fc4 <_sbrk>
 800a040:	1c43      	adds	r3, r0, #1
 800a042:	d103      	bne.n	800a04c <_sbrk_r+0x1c>
 800a044:	682b      	ldr	r3, [r5, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d000      	beq.n	800a04c <_sbrk_r+0x1c>
 800a04a:	6023      	str	r3, [r4, #0]
 800a04c:	bd70      	pop	{r4, r5, r6, pc}
 800a04e:	46c0      	nop			; (mov r8, r8)
 800a050:	20000a4c 	.word	0x20000a4c

0800a054 <__assert_func>:
 800a054:	b530      	push	{r4, r5, lr}
 800a056:	0014      	movs	r4, r2
 800a058:	001a      	movs	r2, r3
 800a05a:	4b09      	ldr	r3, [pc, #36]	; (800a080 <__assert_func+0x2c>)
 800a05c:	0005      	movs	r5, r0
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	b085      	sub	sp, #20
 800a062:	68d8      	ldr	r0, [r3, #12]
 800a064:	4b07      	ldr	r3, [pc, #28]	; (800a084 <__assert_func+0x30>)
 800a066:	2c00      	cmp	r4, #0
 800a068:	d101      	bne.n	800a06e <__assert_func+0x1a>
 800a06a:	4b07      	ldr	r3, [pc, #28]	; (800a088 <__assert_func+0x34>)
 800a06c:	001c      	movs	r4, r3
 800a06e:	9301      	str	r3, [sp, #4]
 800a070:	9100      	str	r1, [sp, #0]
 800a072:	002b      	movs	r3, r5
 800a074:	4905      	ldr	r1, [pc, #20]	; (800a08c <__assert_func+0x38>)
 800a076:	9402      	str	r4, [sp, #8]
 800a078:	f000 f80a 	bl	800a090 <fiprintf>
 800a07c:	f000 fab2 	bl	800a5e4 <abort>
 800a080:	20000044 	.word	0x20000044
 800a084:	0800b17d 	.word	0x0800b17d
 800a088:	0800b1b8 	.word	0x0800b1b8
 800a08c:	0800b18a 	.word	0x0800b18a

0800a090 <fiprintf>:
 800a090:	b40e      	push	{r1, r2, r3}
 800a092:	b503      	push	{r0, r1, lr}
 800a094:	0001      	movs	r1, r0
 800a096:	ab03      	add	r3, sp, #12
 800a098:	4804      	ldr	r0, [pc, #16]	; (800a0ac <fiprintf+0x1c>)
 800a09a:	cb04      	ldmia	r3!, {r2}
 800a09c:	6800      	ldr	r0, [r0, #0]
 800a09e:	9301      	str	r3, [sp, #4]
 800a0a0:	f000 f88a 	bl	800a1b8 <_vfiprintf_r>
 800a0a4:	b002      	add	sp, #8
 800a0a6:	bc08      	pop	{r3}
 800a0a8:	b003      	add	sp, #12
 800a0aa:	4718      	bx	r3
 800a0ac:	20000044 	.word	0x20000044

0800a0b0 <__ascii_mbtowc>:
 800a0b0:	b082      	sub	sp, #8
 800a0b2:	2900      	cmp	r1, #0
 800a0b4:	d100      	bne.n	800a0b8 <__ascii_mbtowc+0x8>
 800a0b6:	a901      	add	r1, sp, #4
 800a0b8:	1e10      	subs	r0, r2, #0
 800a0ba:	d006      	beq.n	800a0ca <__ascii_mbtowc+0x1a>
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d006      	beq.n	800a0ce <__ascii_mbtowc+0x1e>
 800a0c0:	7813      	ldrb	r3, [r2, #0]
 800a0c2:	600b      	str	r3, [r1, #0]
 800a0c4:	7810      	ldrb	r0, [r2, #0]
 800a0c6:	1e43      	subs	r3, r0, #1
 800a0c8:	4198      	sbcs	r0, r3
 800a0ca:	b002      	add	sp, #8
 800a0cc:	4770      	bx	lr
 800a0ce:	2002      	movs	r0, #2
 800a0d0:	4240      	negs	r0, r0
 800a0d2:	e7fa      	b.n	800a0ca <__ascii_mbtowc+0x1a>

0800a0d4 <memmove>:
 800a0d4:	b510      	push	{r4, lr}
 800a0d6:	4288      	cmp	r0, r1
 800a0d8:	d902      	bls.n	800a0e0 <memmove+0xc>
 800a0da:	188b      	adds	r3, r1, r2
 800a0dc:	4298      	cmp	r0, r3
 800a0de:	d303      	bcc.n	800a0e8 <memmove+0x14>
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	e007      	b.n	800a0f4 <memmove+0x20>
 800a0e4:	5c8b      	ldrb	r3, [r1, r2]
 800a0e6:	5483      	strb	r3, [r0, r2]
 800a0e8:	3a01      	subs	r2, #1
 800a0ea:	d2fb      	bcs.n	800a0e4 <memmove+0x10>
 800a0ec:	bd10      	pop	{r4, pc}
 800a0ee:	5ccc      	ldrb	r4, [r1, r3]
 800a0f0:	54c4      	strb	r4, [r0, r3]
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d1fa      	bne.n	800a0ee <memmove+0x1a>
 800a0f8:	e7f8      	b.n	800a0ec <memmove+0x18>
	...

0800a0fc <__malloc_lock>:
 800a0fc:	b510      	push	{r4, lr}
 800a0fe:	4802      	ldr	r0, [pc, #8]	; (800a108 <__malloc_lock+0xc>)
 800a100:	f000 fc47 	bl	800a992 <__retarget_lock_acquire_recursive>
 800a104:	bd10      	pop	{r4, pc}
 800a106:	46c0      	nop			; (mov r8, r8)
 800a108:	20000a54 	.word	0x20000a54

0800a10c <__malloc_unlock>:
 800a10c:	b510      	push	{r4, lr}
 800a10e:	4802      	ldr	r0, [pc, #8]	; (800a118 <__malloc_unlock+0xc>)
 800a110:	f000 fc40 	bl	800a994 <__retarget_lock_release_recursive>
 800a114:	bd10      	pop	{r4, pc}
 800a116:	46c0      	nop			; (mov r8, r8)
 800a118:	20000a54 	.word	0x20000a54

0800a11c <_realloc_r>:
 800a11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a11e:	0007      	movs	r7, r0
 800a120:	000d      	movs	r5, r1
 800a122:	0016      	movs	r6, r2
 800a124:	2900      	cmp	r1, #0
 800a126:	d105      	bne.n	800a134 <_realloc_r+0x18>
 800a128:	0011      	movs	r1, r2
 800a12a:	f7ff fdc1 	bl	8009cb0 <_malloc_r>
 800a12e:	0004      	movs	r4, r0
 800a130:	0020      	movs	r0, r4
 800a132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a134:	2a00      	cmp	r2, #0
 800a136:	d103      	bne.n	800a140 <_realloc_r+0x24>
 800a138:	f7ff fd70 	bl	8009c1c <_free_r>
 800a13c:	0034      	movs	r4, r6
 800a13e:	e7f7      	b.n	800a130 <_realloc_r+0x14>
 800a140:	f000 fc96 	bl	800aa70 <_malloc_usable_size_r>
 800a144:	002c      	movs	r4, r5
 800a146:	42b0      	cmp	r0, r6
 800a148:	d2f2      	bcs.n	800a130 <_realloc_r+0x14>
 800a14a:	0031      	movs	r1, r6
 800a14c:	0038      	movs	r0, r7
 800a14e:	f7ff fdaf 	bl	8009cb0 <_malloc_r>
 800a152:	1e04      	subs	r4, r0, #0
 800a154:	d0ec      	beq.n	800a130 <_realloc_r+0x14>
 800a156:	0029      	movs	r1, r5
 800a158:	0032      	movs	r2, r6
 800a15a:	f7ff f9aa 	bl	80094b2 <memcpy>
 800a15e:	0029      	movs	r1, r5
 800a160:	0038      	movs	r0, r7
 800a162:	f7ff fd5b 	bl	8009c1c <_free_r>
 800a166:	e7e3      	b.n	800a130 <_realloc_r+0x14>

0800a168 <__sfputc_r>:
 800a168:	6893      	ldr	r3, [r2, #8]
 800a16a:	b510      	push	{r4, lr}
 800a16c:	3b01      	subs	r3, #1
 800a16e:	6093      	str	r3, [r2, #8]
 800a170:	2b00      	cmp	r3, #0
 800a172:	da04      	bge.n	800a17e <__sfputc_r+0x16>
 800a174:	6994      	ldr	r4, [r2, #24]
 800a176:	42a3      	cmp	r3, r4
 800a178:	db07      	blt.n	800a18a <__sfputc_r+0x22>
 800a17a:	290a      	cmp	r1, #10
 800a17c:	d005      	beq.n	800a18a <__sfputc_r+0x22>
 800a17e:	6813      	ldr	r3, [r2, #0]
 800a180:	1c58      	adds	r0, r3, #1
 800a182:	6010      	str	r0, [r2, #0]
 800a184:	7019      	strb	r1, [r3, #0]
 800a186:	0008      	movs	r0, r1
 800a188:	bd10      	pop	{r4, pc}
 800a18a:	f000 f94f 	bl	800a42c <__swbuf_r>
 800a18e:	0001      	movs	r1, r0
 800a190:	e7f9      	b.n	800a186 <__sfputc_r+0x1e>

0800a192 <__sfputs_r>:
 800a192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a194:	0006      	movs	r6, r0
 800a196:	000f      	movs	r7, r1
 800a198:	0014      	movs	r4, r2
 800a19a:	18d5      	adds	r5, r2, r3
 800a19c:	42ac      	cmp	r4, r5
 800a19e:	d101      	bne.n	800a1a4 <__sfputs_r+0x12>
 800a1a0:	2000      	movs	r0, #0
 800a1a2:	e007      	b.n	800a1b4 <__sfputs_r+0x22>
 800a1a4:	7821      	ldrb	r1, [r4, #0]
 800a1a6:	003a      	movs	r2, r7
 800a1a8:	0030      	movs	r0, r6
 800a1aa:	f7ff ffdd 	bl	800a168 <__sfputc_r>
 800a1ae:	3401      	adds	r4, #1
 800a1b0:	1c43      	adds	r3, r0, #1
 800a1b2:	d1f3      	bne.n	800a19c <__sfputs_r+0xa>
 800a1b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a1b8 <_vfiprintf_r>:
 800a1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1ba:	b0a1      	sub	sp, #132	; 0x84
 800a1bc:	0006      	movs	r6, r0
 800a1be:	000c      	movs	r4, r1
 800a1c0:	001f      	movs	r7, r3
 800a1c2:	9203      	str	r2, [sp, #12]
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	d004      	beq.n	800a1d2 <_vfiprintf_r+0x1a>
 800a1c8:	6983      	ldr	r3, [r0, #24]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d101      	bne.n	800a1d2 <_vfiprintf_r+0x1a>
 800a1ce:	f000 fb3f 	bl	800a850 <__sinit>
 800a1d2:	4b8e      	ldr	r3, [pc, #568]	; (800a40c <_vfiprintf_r+0x254>)
 800a1d4:	429c      	cmp	r4, r3
 800a1d6:	d11c      	bne.n	800a212 <_vfiprintf_r+0x5a>
 800a1d8:	6874      	ldr	r4, [r6, #4]
 800a1da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1dc:	07db      	lsls	r3, r3, #31
 800a1de:	d405      	bmi.n	800a1ec <_vfiprintf_r+0x34>
 800a1e0:	89a3      	ldrh	r3, [r4, #12]
 800a1e2:	059b      	lsls	r3, r3, #22
 800a1e4:	d402      	bmi.n	800a1ec <_vfiprintf_r+0x34>
 800a1e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1e8:	f000 fbd3 	bl	800a992 <__retarget_lock_acquire_recursive>
 800a1ec:	89a3      	ldrh	r3, [r4, #12]
 800a1ee:	071b      	lsls	r3, r3, #28
 800a1f0:	d502      	bpl.n	800a1f8 <_vfiprintf_r+0x40>
 800a1f2:	6923      	ldr	r3, [r4, #16]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d11d      	bne.n	800a234 <_vfiprintf_r+0x7c>
 800a1f8:	0021      	movs	r1, r4
 800a1fa:	0030      	movs	r0, r6
 800a1fc:	f000 f97a 	bl	800a4f4 <__swsetup_r>
 800a200:	2800      	cmp	r0, #0
 800a202:	d017      	beq.n	800a234 <_vfiprintf_r+0x7c>
 800a204:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a206:	07db      	lsls	r3, r3, #31
 800a208:	d50d      	bpl.n	800a226 <_vfiprintf_r+0x6e>
 800a20a:	2001      	movs	r0, #1
 800a20c:	4240      	negs	r0, r0
 800a20e:	b021      	add	sp, #132	; 0x84
 800a210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a212:	4b7f      	ldr	r3, [pc, #508]	; (800a410 <_vfiprintf_r+0x258>)
 800a214:	429c      	cmp	r4, r3
 800a216:	d101      	bne.n	800a21c <_vfiprintf_r+0x64>
 800a218:	68b4      	ldr	r4, [r6, #8]
 800a21a:	e7de      	b.n	800a1da <_vfiprintf_r+0x22>
 800a21c:	4b7d      	ldr	r3, [pc, #500]	; (800a414 <_vfiprintf_r+0x25c>)
 800a21e:	429c      	cmp	r4, r3
 800a220:	d1db      	bne.n	800a1da <_vfiprintf_r+0x22>
 800a222:	68f4      	ldr	r4, [r6, #12]
 800a224:	e7d9      	b.n	800a1da <_vfiprintf_r+0x22>
 800a226:	89a3      	ldrh	r3, [r4, #12]
 800a228:	059b      	lsls	r3, r3, #22
 800a22a:	d4ee      	bmi.n	800a20a <_vfiprintf_r+0x52>
 800a22c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a22e:	f000 fbb1 	bl	800a994 <__retarget_lock_release_recursive>
 800a232:	e7ea      	b.n	800a20a <_vfiprintf_r+0x52>
 800a234:	2300      	movs	r3, #0
 800a236:	ad08      	add	r5, sp, #32
 800a238:	616b      	str	r3, [r5, #20]
 800a23a:	3320      	adds	r3, #32
 800a23c:	766b      	strb	r3, [r5, #25]
 800a23e:	3310      	adds	r3, #16
 800a240:	76ab      	strb	r3, [r5, #26]
 800a242:	9707      	str	r7, [sp, #28]
 800a244:	9f03      	ldr	r7, [sp, #12]
 800a246:	783b      	ldrb	r3, [r7, #0]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d001      	beq.n	800a250 <_vfiprintf_r+0x98>
 800a24c:	2b25      	cmp	r3, #37	; 0x25
 800a24e:	d14e      	bne.n	800a2ee <_vfiprintf_r+0x136>
 800a250:	9b03      	ldr	r3, [sp, #12]
 800a252:	1afb      	subs	r3, r7, r3
 800a254:	9305      	str	r3, [sp, #20]
 800a256:	9b03      	ldr	r3, [sp, #12]
 800a258:	429f      	cmp	r7, r3
 800a25a:	d00d      	beq.n	800a278 <_vfiprintf_r+0xc0>
 800a25c:	9b05      	ldr	r3, [sp, #20]
 800a25e:	0021      	movs	r1, r4
 800a260:	0030      	movs	r0, r6
 800a262:	9a03      	ldr	r2, [sp, #12]
 800a264:	f7ff ff95 	bl	800a192 <__sfputs_r>
 800a268:	1c43      	adds	r3, r0, #1
 800a26a:	d100      	bne.n	800a26e <_vfiprintf_r+0xb6>
 800a26c:	e0b5      	b.n	800a3da <_vfiprintf_r+0x222>
 800a26e:	696a      	ldr	r2, [r5, #20]
 800a270:	9b05      	ldr	r3, [sp, #20]
 800a272:	4694      	mov	ip, r2
 800a274:	4463      	add	r3, ip
 800a276:	616b      	str	r3, [r5, #20]
 800a278:	783b      	ldrb	r3, [r7, #0]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d100      	bne.n	800a280 <_vfiprintf_r+0xc8>
 800a27e:	e0ac      	b.n	800a3da <_vfiprintf_r+0x222>
 800a280:	2201      	movs	r2, #1
 800a282:	1c7b      	adds	r3, r7, #1
 800a284:	9303      	str	r3, [sp, #12]
 800a286:	2300      	movs	r3, #0
 800a288:	4252      	negs	r2, r2
 800a28a:	606a      	str	r2, [r5, #4]
 800a28c:	a904      	add	r1, sp, #16
 800a28e:	3254      	adds	r2, #84	; 0x54
 800a290:	1852      	adds	r2, r2, r1
 800a292:	602b      	str	r3, [r5, #0]
 800a294:	60eb      	str	r3, [r5, #12]
 800a296:	60ab      	str	r3, [r5, #8]
 800a298:	7013      	strb	r3, [r2, #0]
 800a29a:	65ab      	str	r3, [r5, #88]	; 0x58
 800a29c:	9b03      	ldr	r3, [sp, #12]
 800a29e:	2205      	movs	r2, #5
 800a2a0:	7819      	ldrb	r1, [r3, #0]
 800a2a2:	485d      	ldr	r0, [pc, #372]	; (800a418 <_vfiprintf_r+0x260>)
 800a2a4:	f7ff f8fa 	bl	800949c <memchr>
 800a2a8:	9b03      	ldr	r3, [sp, #12]
 800a2aa:	1c5f      	adds	r7, r3, #1
 800a2ac:	2800      	cmp	r0, #0
 800a2ae:	d120      	bne.n	800a2f2 <_vfiprintf_r+0x13a>
 800a2b0:	682a      	ldr	r2, [r5, #0]
 800a2b2:	06d3      	lsls	r3, r2, #27
 800a2b4:	d504      	bpl.n	800a2c0 <_vfiprintf_r+0x108>
 800a2b6:	2353      	movs	r3, #83	; 0x53
 800a2b8:	a904      	add	r1, sp, #16
 800a2ba:	185b      	adds	r3, r3, r1
 800a2bc:	2120      	movs	r1, #32
 800a2be:	7019      	strb	r1, [r3, #0]
 800a2c0:	0713      	lsls	r3, r2, #28
 800a2c2:	d504      	bpl.n	800a2ce <_vfiprintf_r+0x116>
 800a2c4:	2353      	movs	r3, #83	; 0x53
 800a2c6:	a904      	add	r1, sp, #16
 800a2c8:	185b      	adds	r3, r3, r1
 800a2ca:	212b      	movs	r1, #43	; 0x2b
 800a2cc:	7019      	strb	r1, [r3, #0]
 800a2ce:	9b03      	ldr	r3, [sp, #12]
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	2b2a      	cmp	r3, #42	; 0x2a
 800a2d4:	d016      	beq.n	800a304 <_vfiprintf_r+0x14c>
 800a2d6:	2100      	movs	r1, #0
 800a2d8:	68eb      	ldr	r3, [r5, #12]
 800a2da:	9f03      	ldr	r7, [sp, #12]
 800a2dc:	783a      	ldrb	r2, [r7, #0]
 800a2de:	1c78      	adds	r0, r7, #1
 800a2e0:	3a30      	subs	r2, #48	; 0x30
 800a2e2:	4684      	mov	ip, r0
 800a2e4:	2a09      	cmp	r2, #9
 800a2e6:	d94f      	bls.n	800a388 <_vfiprintf_r+0x1d0>
 800a2e8:	2900      	cmp	r1, #0
 800a2ea:	d111      	bne.n	800a310 <_vfiprintf_r+0x158>
 800a2ec:	e017      	b.n	800a31e <_vfiprintf_r+0x166>
 800a2ee:	3701      	adds	r7, #1
 800a2f0:	e7a9      	b.n	800a246 <_vfiprintf_r+0x8e>
 800a2f2:	4b49      	ldr	r3, [pc, #292]	; (800a418 <_vfiprintf_r+0x260>)
 800a2f4:	682a      	ldr	r2, [r5, #0]
 800a2f6:	1ac0      	subs	r0, r0, r3
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	4083      	lsls	r3, r0
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	602b      	str	r3, [r5, #0]
 800a300:	9703      	str	r7, [sp, #12]
 800a302:	e7cb      	b.n	800a29c <_vfiprintf_r+0xe4>
 800a304:	9b07      	ldr	r3, [sp, #28]
 800a306:	1d19      	adds	r1, r3, #4
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	9107      	str	r1, [sp, #28]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	db01      	blt.n	800a314 <_vfiprintf_r+0x15c>
 800a310:	930b      	str	r3, [sp, #44]	; 0x2c
 800a312:	e004      	b.n	800a31e <_vfiprintf_r+0x166>
 800a314:	425b      	negs	r3, r3
 800a316:	60eb      	str	r3, [r5, #12]
 800a318:	2302      	movs	r3, #2
 800a31a:	4313      	orrs	r3, r2
 800a31c:	602b      	str	r3, [r5, #0]
 800a31e:	783b      	ldrb	r3, [r7, #0]
 800a320:	2b2e      	cmp	r3, #46	; 0x2e
 800a322:	d10a      	bne.n	800a33a <_vfiprintf_r+0x182>
 800a324:	787b      	ldrb	r3, [r7, #1]
 800a326:	2b2a      	cmp	r3, #42	; 0x2a
 800a328:	d137      	bne.n	800a39a <_vfiprintf_r+0x1e2>
 800a32a:	9b07      	ldr	r3, [sp, #28]
 800a32c:	3702      	adds	r7, #2
 800a32e:	1d1a      	adds	r2, r3, #4
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	9207      	str	r2, [sp, #28]
 800a334:	2b00      	cmp	r3, #0
 800a336:	db2d      	blt.n	800a394 <_vfiprintf_r+0x1dc>
 800a338:	9309      	str	r3, [sp, #36]	; 0x24
 800a33a:	2203      	movs	r2, #3
 800a33c:	7839      	ldrb	r1, [r7, #0]
 800a33e:	4837      	ldr	r0, [pc, #220]	; (800a41c <_vfiprintf_r+0x264>)
 800a340:	f7ff f8ac 	bl	800949c <memchr>
 800a344:	2800      	cmp	r0, #0
 800a346:	d007      	beq.n	800a358 <_vfiprintf_r+0x1a0>
 800a348:	4b34      	ldr	r3, [pc, #208]	; (800a41c <_vfiprintf_r+0x264>)
 800a34a:	682a      	ldr	r2, [r5, #0]
 800a34c:	1ac0      	subs	r0, r0, r3
 800a34e:	2340      	movs	r3, #64	; 0x40
 800a350:	4083      	lsls	r3, r0
 800a352:	4313      	orrs	r3, r2
 800a354:	3701      	adds	r7, #1
 800a356:	602b      	str	r3, [r5, #0]
 800a358:	7839      	ldrb	r1, [r7, #0]
 800a35a:	1c7b      	adds	r3, r7, #1
 800a35c:	2206      	movs	r2, #6
 800a35e:	4830      	ldr	r0, [pc, #192]	; (800a420 <_vfiprintf_r+0x268>)
 800a360:	9303      	str	r3, [sp, #12]
 800a362:	7629      	strb	r1, [r5, #24]
 800a364:	f7ff f89a 	bl	800949c <memchr>
 800a368:	2800      	cmp	r0, #0
 800a36a:	d045      	beq.n	800a3f8 <_vfiprintf_r+0x240>
 800a36c:	4b2d      	ldr	r3, [pc, #180]	; (800a424 <_vfiprintf_r+0x26c>)
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d127      	bne.n	800a3c2 <_vfiprintf_r+0x20a>
 800a372:	2207      	movs	r2, #7
 800a374:	9b07      	ldr	r3, [sp, #28]
 800a376:	3307      	adds	r3, #7
 800a378:	4393      	bics	r3, r2
 800a37a:	3308      	adds	r3, #8
 800a37c:	9307      	str	r3, [sp, #28]
 800a37e:	696b      	ldr	r3, [r5, #20]
 800a380:	9a04      	ldr	r2, [sp, #16]
 800a382:	189b      	adds	r3, r3, r2
 800a384:	616b      	str	r3, [r5, #20]
 800a386:	e75d      	b.n	800a244 <_vfiprintf_r+0x8c>
 800a388:	210a      	movs	r1, #10
 800a38a:	434b      	muls	r3, r1
 800a38c:	4667      	mov	r7, ip
 800a38e:	189b      	adds	r3, r3, r2
 800a390:	3909      	subs	r1, #9
 800a392:	e7a3      	b.n	800a2dc <_vfiprintf_r+0x124>
 800a394:	2301      	movs	r3, #1
 800a396:	425b      	negs	r3, r3
 800a398:	e7ce      	b.n	800a338 <_vfiprintf_r+0x180>
 800a39a:	2300      	movs	r3, #0
 800a39c:	001a      	movs	r2, r3
 800a39e:	3701      	adds	r7, #1
 800a3a0:	606b      	str	r3, [r5, #4]
 800a3a2:	7839      	ldrb	r1, [r7, #0]
 800a3a4:	1c78      	adds	r0, r7, #1
 800a3a6:	3930      	subs	r1, #48	; 0x30
 800a3a8:	4684      	mov	ip, r0
 800a3aa:	2909      	cmp	r1, #9
 800a3ac:	d903      	bls.n	800a3b6 <_vfiprintf_r+0x1fe>
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d0c3      	beq.n	800a33a <_vfiprintf_r+0x182>
 800a3b2:	9209      	str	r2, [sp, #36]	; 0x24
 800a3b4:	e7c1      	b.n	800a33a <_vfiprintf_r+0x182>
 800a3b6:	230a      	movs	r3, #10
 800a3b8:	435a      	muls	r2, r3
 800a3ba:	4667      	mov	r7, ip
 800a3bc:	1852      	adds	r2, r2, r1
 800a3be:	3b09      	subs	r3, #9
 800a3c0:	e7ef      	b.n	800a3a2 <_vfiprintf_r+0x1ea>
 800a3c2:	ab07      	add	r3, sp, #28
 800a3c4:	9300      	str	r3, [sp, #0]
 800a3c6:	0022      	movs	r2, r4
 800a3c8:	0029      	movs	r1, r5
 800a3ca:	0030      	movs	r0, r6
 800a3cc:	4b16      	ldr	r3, [pc, #88]	; (800a428 <_vfiprintf_r+0x270>)
 800a3ce:	f7fd fdbd 	bl	8007f4c <_printf_float>
 800a3d2:	9004      	str	r0, [sp, #16]
 800a3d4:	9b04      	ldr	r3, [sp, #16]
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	d1d1      	bne.n	800a37e <_vfiprintf_r+0x1c6>
 800a3da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3dc:	07db      	lsls	r3, r3, #31
 800a3de:	d405      	bmi.n	800a3ec <_vfiprintf_r+0x234>
 800a3e0:	89a3      	ldrh	r3, [r4, #12]
 800a3e2:	059b      	lsls	r3, r3, #22
 800a3e4:	d402      	bmi.n	800a3ec <_vfiprintf_r+0x234>
 800a3e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3e8:	f000 fad4 	bl	800a994 <__retarget_lock_release_recursive>
 800a3ec:	89a3      	ldrh	r3, [r4, #12]
 800a3ee:	065b      	lsls	r3, r3, #25
 800a3f0:	d500      	bpl.n	800a3f4 <_vfiprintf_r+0x23c>
 800a3f2:	e70a      	b.n	800a20a <_vfiprintf_r+0x52>
 800a3f4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a3f6:	e70a      	b.n	800a20e <_vfiprintf_r+0x56>
 800a3f8:	ab07      	add	r3, sp, #28
 800a3fa:	9300      	str	r3, [sp, #0]
 800a3fc:	0022      	movs	r2, r4
 800a3fe:	0029      	movs	r1, r5
 800a400:	0030      	movs	r0, r6
 800a402:	4b09      	ldr	r3, [pc, #36]	; (800a428 <_vfiprintf_r+0x270>)
 800a404:	f7fe f860 	bl	80084c8 <_printf_i>
 800a408:	e7e3      	b.n	800a3d2 <_vfiprintf_r+0x21a>
 800a40a:	46c0      	nop			; (mov r8, r8)
 800a40c:	0800b2e4 	.word	0x0800b2e4
 800a410:	0800b304 	.word	0x0800b304
 800a414:	0800b2c4 	.word	0x0800b2c4
 800a418:	0800b16c 	.word	0x0800b16c
 800a41c:	0800b172 	.word	0x0800b172
 800a420:	0800b176 	.word	0x0800b176
 800a424:	08007f4d 	.word	0x08007f4d
 800a428:	0800a193 	.word	0x0800a193

0800a42c <__swbuf_r>:
 800a42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a42e:	0005      	movs	r5, r0
 800a430:	000e      	movs	r6, r1
 800a432:	0014      	movs	r4, r2
 800a434:	2800      	cmp	r0, #0
 800a436:	d004      	beq.n	800a442 <__swbuf_r+0x16>
 800a438:	6983      	ldr	r3, [r0, #24]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d101      	bne.n	800a442 <__swbuf_r+0x16>
 800a43e:	f000 fa07 	bl	800a850 <__sinit>
 800a442:	4b22      	ldr	r3, [pc, #136]	; (800a4cc <__swbuf_r+0xa0>)
 800a444:	429c      	cmp	r4, r3
 800a446:	d12e      	bne.n	800a4a6 <__swbuf_r+0x7a>
 800a448:	686c      	ldr	r4, [r5, #4]
 800a44a:	69a3      	ldr	r3, [r4, #24]
 800a44c:	60a3      	str	r3, [r4, #8]
 800a44e:	89a3      	ldrh	r3, [r4, #12]
 800a450:	071b      	lsls	r3, r3, #28
 800a452:	d532      	bpl.n	800a4ba <__swbuf_r+0x8e>
 800a454:	6923      	ldr	r3, [r4, #16]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d02f      	beq.n	800a4ba <__swbuf_r+0x8e>
 800a45a:	6823      	ldr	r3, [r4, #0]
 800a45c:	6922      	ldr	r2, [r4, #16]
 800a45e:	b2f7      	uxtb	r7, r6
 800a460:	1a98      	subs	r0, r3, r2
 800a462:	6963      	ldr	r3, [r4, #20]
 800a464:	b2f6      	uxtb	r6, r6
 800a466:	4283      	cmp	r3, r0
 800a468:	dc05      	bgt.n	800a476 <__swbuf_r+0x4a>
 800a46a:	0021      	movs	r1, r4
 800a46c:	0028      	movs	r0, r5
 800a46e:	f000 f94d 	bl	800a70c <_fflush_r>
 800a472:	2800      	cmp	r0, #0
 800a474:	d127      	bne.n	800a4c6 <__swbuf_r+0x9a>
 800a476:	68a3      	ldr	r3, [r4, #8]
 800a478:	3001      	adds	r0, #1
 800a47a:	3b01      	subs	r3, #1
 800a47c:	60a3      	str	r3, [r4, #8]
 800a47e:	6823      	ldr	r3, [r4, #0]
 800a480:	1c5a      	adds	r2, r3, #1
 800a482:	6022      	str	r2, [r4, #0]
 800a484:	701f      	strb	r7, [r3, #0]
 800a486:	6963      	ldr	r3, [r4, #20]
 800a488:	4283      	cmp	r3, r0
 800a48a:	d004      	beq.n	800a496 <__swbuf_r+0x6a>
 800a48c:	89a3      	ldrh	r3, [r4, #12]
 800a48e:	07db      	lsls	r3, r3, #31
 800a490:	d507      	bpl.n	800a4a2 <__swbuf_r+0x76>
 800a492:	2e0a      	cmp	r6, #10
 800a494:	d105      	bne.n	800a4a2 <__swbuf_r+0x76>
 800a496:	0021      	movs	r1, r4
 800a498:	0028      	movs	r0, r5
 800a49a:	f000 f937 	bl	800a70c <_fflush_r>
 800a49e:	2800      	cmp	r0, #0
 800a4a0:	d111      	bne.n	800a4c6 <__swbuf_r+0x9a>
 800a4a2:	0030      	movs	r0, r6
 800a4a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4a6:	4b0a      	ldr	r3, [pc, #40]	; (800a4d0 <__swbuf_r+0xa4>)
 800a4a8:	429c      	cmp	r4, r3
 800a4aa:	d101      	bne.n	800a4b0 <__swbuf_r+0x84>
 800a4ac:	68ac      	ldr	r4, [r5, #8]
 800a4ae:	e7cc      	b.n	800a44a <__swbuf_r+0x1e>
 800a4b0:	4b08      	ldr	r3, [pc, #32]	; (800a4d4 <__swbuf_r+0xa8>)
 800a4b2:	429c      	cmp	r4, r3
 800a4b4:	d1c9      	bne.n	800a44a <__swbuf_r+0x1e>
 800a4b6:	68ec      	ldr	r4, [r5, #12]
 800a4b8:	e7c7      	b.n	800a44a <__swbuf_r+0x1e>
 800a4ba:	0021      	movs	r1, r4
 800a4bc:	0028      	movs	r0, r5
 800a4be:	f000 f819 	bl	800a4f4 <__swsetup_r>
 800a4c2:	2800      	cmp	r0, #0
 800a4c4:	d0c9      	beq.n	800a45a <__swbuf_r+0x2e>
 800a4c6:	2601      	movs	r6, #1
 800a4c8:	4276      	negs	r6, r6
 800a4ca:	e7ea      	b.n	800a4a2 <__swbuf_r+0x76>
 800a4cc:	0800b2e4 	.word	0x0800b2e4
 800a4d0:	0800b304 	.word	0x0800b304
 800a4d4:	0800b2c4 	.word	0x0800b2c4

0800a4d8 <__ascii_wctomb>:
 800a4d8:	0003      	movs	r3, r0
 800a4da:	1e08      	subs	r0, r1, #0
 800a4dc:	d005      	beq.n	800a4ea <__ascii_wctomb+0x12>
 800a4de:	2aff      	cmp	r2, #255	; 0xff
 800a4e0:	d904      	bls.n	800a4ec <__ascii_wctomb+0x14>
 800a4e2:	228a      	movs	r2, #138	; 0x8a
 800a4e4:	2001      	movs	r0, #1
 800a4e6:	601a      	str	r2, [r3, #0]
 800a4e8:	4240      	negs	r0, r0
 800a4ea:	4770      	bx	lr
 800a4ec:	2001      	movs	r0, #1
 800a4ee:	700a      	strb	r2, [r1, #0]
 800a4f0:	e7fb      	b.n	800a4ea <__ascii_wctomb+0x12>
	...

0800a4f4 <__swsetup_r>:
 800a4f4:	4b37      	ldr	r3, [pc, #220]	; (800a5d4 <__swsetup_r+0xe0>)
 800a4f6:	b570      	push	{r4, r5, r6, lr}
 800a4f8:	681d      	ldr	r5, [r3, #0]
 800a4fa:	0006      	movs	r6, r0
 800a4fc:	000c      	movs	r4, r1
 800a4fe:	2d00      	cmp	r5, #0
 800a500:	d005      	beq.n	800a50e <__swsetup_r+0x1a>
 800a502:	69ab      	ldr	r3, [r5, #24]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d102      	bne.n	800a50e <__swsetup_r+0x1a>
 800a508:	0028      	movs	r0, r5
 800a50a:	f000 f9a1 	bl	800a850 <__sinit>
 800a50e:	4b32      	ldr	r3, [pc, #200]	; (800a5d8 <__swsetup_r+0xe4>)
 800a510:	429c      	cmp	r4, r3
 800a512:	d10f      	bne.n	800a534 <__swsetup_r+0x40>
 800a514:	686c      	ldr	r4, [r5, #4]
 800a516:	230c      	movs	r3, #12
 800a518:	5ee2      	ldrsh	r2, [r4, r3]
 800a51a:	b293      	uxth	r3, r2
 800a51c:	0711      	lsls	r1, r2, #28
 800a51e:	d42d      	bmi.n	800a57c <__swsetup_r+0x88>
 800a520:	06d9      	lsls	r1, r3, #27
 800a522:	d411      	bmi.n	800a548 <__swsetup_r+0x54>
 800a524:	2309      	movs	r3, #9
 800a526:	2001      	movs	r0, #1
 800a528:	6033      	str	r3, [r6, #0]
 800a52a:	3337      	adds	r3, #55	; 0x37
 800a52c:	4313      	orrs	r3, r2
 800a52e:	81a3      	strh	r3, [r4, #12]
 800a530:	4240      	negs	r0, r0
 800a532:	bd70      	pop	{r4, r5, r6, pc}
 800a534:	4b29      	ldr	r3, [pc, #164]	; (800a5dc <__swsetup_r+0xe8>)
 800a536:	429c      	cmp	r4, r3
 800a538:	d101      	bne.n	800a53e <__swsetup_r+0x4a>
 800a53a:	68ac      	ldr	r4, [r5, #8]
 800a53c:	e7eb      	b.n	800a516 <__swsetup_r+0x22>
 800a53e:	4b28      	ldr	r3, [pc, #160]	; (800a5e0 <__swsetup_r+0xec>)
 800a540:	429c      	cmp	r4, r3
 800a542:	d1e8      	bne.n	800a516 <__swsetup_r+0x22>
 800a544:	68ec      	ldr	r4, [r5, #12]
 800a546:	e7e6      	b.n	800a516 <__swsetup_r+0x22>
 800a548:	075b      	lsls	r3, r3, #29
 800a54a:	d513      	bpl.n	800a574 <__swsetup_r+0x80>
 800a54c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a54e:	2900      	cmp	r1, #0
 800a550:	d008      	beq.n	800a564 <__swsetup_r+0x70>
 800a552:	0023      	movs	r3, r4
 800a554:	3344      	adds	r3, #68	; 0x44
 800a556:	4299      	cmp	r1, r3
 800a558:	d002      	beq.n	800a560 <__swsetup_r+0x6c>
 800a55a:	0030      	movs	r0, r6
 800a55c:	f7ff fb5e 	bl	8009c1c <_free_r>
 800a560:	2300      	movs	r3, #0
 800a562:	6363      	str	r3, [r4, #52]	; 0x34
 800a564:	2224      	movs	r2, #36	; 0x24
 800a566:	89a3      	ldrh	r3, [r4, #12]
 800a568:	4393      	bics	r3, r2
 800a56a:	81a3      	strh	r3, [r4, #12]
 800a56c:	2300      	movs	r3, #0
 800a56e:	6063      	str	r3, [r4, #4]
 800a570:	6923      	ldr	r3, [r4, #16]
 800a572:	6023      	str	r3, [r4, #0]
 800a574:	2308      	movs	r3, #8
 800a576:	89a2      	ldrh	r2, [r4, #12]
 800a578:	4313      	orrs	r3, r2
 800a57a:	81a3      	strh	r3, [r4, #12]
 800a57c:	6923      	ldr	r3, [r4, #16]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d10b      	bne.n	800a59a <__swsetup_r+0xa6>
 800a582:	21a0      	movs	r1, #160	; 0xa0
 800a584:	2280      	movs	r2, #128	; 0x80
 800a586:	89a3      	ldrh	r3, [r4, #12]
 800a588:	0089      	lsls	r1, r1, #2
 800a58a:	0092      	lsls	r2, r2, #2
 800a58c:	400b      	ands	r3, r1
 800a58e:	4293      	cmp	r3, r2
 800a590:	d003      	beq.n	800a59a <__swsetup_r+0xa6>
 800a592:	0021      	movs	r1, r4
 800a594:	0030      	movs	r0, r6
 800a596:	f000 fa27 	bl	800a9e8 <__smakebuf_r>
 800a59a:	220c      	movs	r2, #12
 800a59c:	5ea3      	ldrsh	r3, [r4, r2]
 800a59e:	2001      	movs	r0, #1
 800a5a0:	001a      	movs	r2, r3
 800a5a2:	b299      	uxth	r1, r3
 800a5a4:	4002      	ands	r2, r0
 800a5a6:	4203      	tst	r3, r0
 800a5a8:	d00f      	beq.n	800a5ca <__swsetup_r+0xd6>
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	60a2      	str	r2, [r4, #8]
 800a5ae:	6962      	ldr	r2, [r4, #20]
 800a5b0:	4252      	negs	r2, r2
 800a5b2:	61a2      	str	r2, [r4, #24]
 800a5b4:	2000      	movs	r0, #0
 800a5b6:	6922      	ldr	r2, [r4, #16]
 800a5b8:	4282      	cmp	r2, r0
 800a5ba:	d1ba      	bne.n	800a532 <__swsetup_r+0x3e>
 800a5bc:	060a      	lsls	r2, r1, #24
 800a5be:	d5b8      	bpl.n	800a532 <__swsetup_r+0x3e>
 800a5c0:	2240      	movs	r2, #64	; 0x40
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	81a3      	strh	r3, [r4, #12]
 800a5c6:	3801      	subs	r0, #1
 800a5c8:	e7b3      	b.n	800a532 <__swsetup_r+0x3e>
 800a5ca:	0788      	lsls	r0, r1, #30
 800a5cc:	d400      	bmi.n	800a5d0 <__swsetup_r+0xdc>
 800a5ce:	6962      	ldr	r2, [r4, #20]
 800a5d0:	60a2      	str	r2, [r4, #8]
 800a5d2:	e7ef      	b.n	800a5b4 <__swsetup_r+0xc0>
 800a5d4:	20000044 	.word	0x20000044
 800a5d8:	0800b2e4 	.word	0x0800b2e4
 800a5dc:	0800b304 	.word	0x0800b304
 800a5e0:	0800b2c4 	.word	0x0800b2c4

0800a5e4 <abort>:
 800a5e4:	2006      	movs	r0, #6
 800a5e6:	b510      	push	{r4, lr}
 800a5e8:	f000 fa74 	bl	800aad4 <raise>
 800a5ec:	2001      	movs	r0, #1
 800a5ee:	f7f9 fc77 	bl	8003ee0 <_exit>
	...

0800a5f4 <__sflush_r>:
 800a5f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5f6:	898b      	ldrh	r3, [r1, #12]
 800a5f8:	0005      	movs	r5, r0
 800a5fa:	000c      	movs	r4, r1
 800a5fc:	071a      	lsls	r2, r3, #28
 800a5fe:	d45f      	bmi.n	800a6c0 <__sflush_r+0xcc>
 800a600:	684a      	ldr	r2, [r1, #4]
 800a602:	2a00      	cmp	r2, #0
 800a604:	dc04      	bgt.n	800a610 <__sflush_r+0x1c>
 800a606:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a608:	2a00      	cmp	r2, #0
 800a60a:	dc01      	bgt.n	800a610 <__sflush_r+0x1c>
 800a60c:	2000      	movs	r0, #0
 800a60e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a610:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a612:	2f00      	cmp	r7, #0
 800a614:	d0fa      	beq.n	800a60c <__sflush_r+0x18>
 800a616:	2200      	movs	r2, #0
 800a618:	2180      	movs	r1, #128	; 0x80
 800a61a:	682e      	ldr	r6, [r5, #0]
 800a61c:	602a      	str	r2, [r5, #0]
 800a61e:	001a      	movs	r2, r3
 800a620:	0149      	lsls	r1, r1, #5
 800a622:	400a      	ands	r2, r1
 800a624:	420b      	tst	r3, r1
 800a626:	d034      	beq.n	800a692 <__sflush_r+0x9e>
 800a628:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a62a:	89a3      	ldrh	r3, [r4, #12]
 800a62c:	075b      	lsls	r3, r3, #29
 800a62e:	d506      	bpl.n	800a63e <__sflush_r+0x4a>
 800a630:	6863      	ldr	r3, [r4, #4]
 800a632:	1ac0      	subs	r0, r0, r3
 800a634:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a636:	2b00      	cmp	r3, #0
 800a638:	d001      	beq.n	800a63e <__sflush_r+0x4a>
 800a63a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a63c:	1ac0      	subs	r0, r0, r3
 800a63e:	0002      	movs	r2, r0
 800a640:	6a21      	ldr	r1, [r4, #32]
 800a642:	2300      	movs	r3, #0
 800a644:	0028      	movs	r0, r5
 800a646:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a648:	47b8      	blx	r7
 800a64a:	89a1      	ldrh	r1, [r4, #12]
 800a64c:	1c43      	adds	r3, r0, #1
 800a64e:	d106      	bne.n	800a65e <__sflush_r+0x6a>
 800a650:	682b      	ldr	r3, [r5, #0]
 800a652:	2b1d      	cmp	r3, #29
 800a654:	d831      	bhi.n	800a6ba <__sflush_r+0xc6>
 800a656:	4a2c      	ldr	r2, [pc, #176]	; (800a708 <__sflush_r+0x114>)
 800a658:	40da      	lsrs	r2, r3
 800a65a:	07d3      	lsls	r3, r2, #31
 800a65c:	d52d      	bpl.n	800a6ba <__sflush_r+0xc6>
 800a65e:	2300      	movs	r3, #0
 800a660:	6063      	str	r3, [r4, #4]
 800a662:	6923      	ldr	r3, [r4, #16]
 800a664:	6023      	str	r3, [r4, #0]
 800a666:	04cb      	lsls	r3, r1, #19
 800a668:	d505      	bpl.n	800a676 <__sflush_r+0x82>
 800a66a:	1c43      	adds	r3, r0, #1
 800a66c:	d102      	bne.n	800a674 <__sflush_r+0x80>
 800a66e:	682b      	ldr	r3, [r5, #0]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d100      	bne.n	800a676 <__sflush_r+0x82>
 800a674:	6560      	str	r0, [r4, #84]	; 0x54
 800a676:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a678:	602e      	str	r6, [r5, #0]
 800a67a:	2900      	cmp	r1, #0
 800a67c:	d0c6      	beq.n	800a60c <__sflush_r+0x18>
 800a67e:	0023      	movs	r3, r4
 800a680:	3344      	adds	r3, #68	; 0x44
 800a682:	4299      	cmp	r1, r3
 800a684:	d002      	beq.n	800a68c <__sflush_r+0x98>
 800a686:	0028      	movs	r0, r5
 800a688:	f7ff fac8 	bl	8009c1c <_free_r>
 800a68c:	2000      	movs	r0, #0
 800a68e:	6360      	str	r0, [r4, #52]	; 0x34
 800a690:	e7bd      	b.n	800a60e <__sflush_r+0x1a>
 800a692:	2301      	movs	r3, #1
 800a694:	0028      	movs	r0, r5
 800a696:	6a21      	ldr	r1, [r4, #32]
 800a698:	47b8      	blx	r7
 800a69a:	1c43      	adds	r3, r0, #1
 800a69c:	d1c5      	bne.n	800a62a <__sflush_r+0x36>
 800a69e:	682b      	ldr	r3, [r5, #0]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d0c2      	beq.n	800a62a <__sflush_r+0x36>
 800a6a4:	2b1d      	cmp	r3, #29
 800a6a6:	d001      	beq.n	800a6ac <__sflush_r+0xb8>
 800a6a8:	2b16      	cmp	r3, #22
 800a6aa:	d101      	bne.n	800a6b0 <__sflush_r+0xbc>
 800a6ac:	602e      	str	r6, [r5, #0]
 800a6ae:	e7ad      	b.n	800a60c <__sflush_r+0x18>
 800a6b0:	2340      	movs	r3, #64	; 0x40
 800a6b2:	89a2      	ldrh	r2, [r4, #12]
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	81a3      	strh	r3, [r4, #12]
 800a6b8:	e7a9      	b.n	800a60e <__sflush_r+0x1a>
 800a6ba:	2340      	movs	r3, #64	; 0x40
 800a6bc:	430b      	orrs	r3, r1
 800a6be:	e7fa      	b.n	800a6b6 <__sflush_r+0xc2>
 800a6c0:	690f      	ldr	r7, [r1, #16]
 800a6c2:	2f00      	cmp	r7, #0
 800a6c4:	d0a2      	beq.n	800a60c <__sflush_r+0x18>
 800a6c6:	680a      	ldr	r2, [r1, #0]
 800a6c8:	600f      	str	r7, [r1, #0]
 800a6ca:	1bd2      	subs	r2, r2, r7
 800a6cc:	9201      	str	r2, [sp, #4]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	079b      	lsls	r3, r3, #30
 800a6d2:	d100      	bne.n	800a6d6 <__sflush_r+0xe2>
 800a6d4:	694a      	ldr	r2, [r1, #20]
 800a6d6:	60a2      	str	r2, [r4, #8]
 800a6d8:	9b01      	ldr	r3, [sp, #4]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	dc00      	bgt.n	800a6e0 <__sflush_r+0xec>
 800a6de:	e795      	b.n	800a60c <__sflush_r+0x18>
 800a6e0:	003a      	movs	r2, r7
 800a6e2:	0028      	movs	r0, r5
 800a6e4:	9b01      	ldr	r3, [sp, #4]
 800a6e6:	6a21      	ldr	r1, [r4, #32]
 800a6e8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a6ea:	47b0      	blx	r6
 800a6ec:	2800      	cmp	r0, #0
 800a6ee:	dc06      	bgt.n	800a6fe <__sflush_r+0x10a>
 800a6f0:	2340      	movs	r3, #64	; 0x40
 800a6f2:	2001      	movs	r0, #1
 800a6f4:	89a2      	ldrh	r2, [r4, #12]
 800a6f6:	4240      	negs	r0, r0
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	81a3      	strh	r3, [r4, #12]
 800a6fc:	e787      	b.n	800a60e <__sflush_r+0x1a>
 800a6fe:	9b01      	ldr	r3, [sp, #4]
 800a700:	183f      	adds	r7, r7, r0
 800a702:	1a1b      	subs	r3, r3, r0
 800a704:	9301      	str	r3, [sp, #4]
 800a706:	e7e7      	b.n	800a6d8 <__sflush_r+0xe4>
 800a708:	20400001 	.word	0x20400001

0800a70c <_fflush_r>:
 800a70c:	690b      	ldr	r3, [r1, #16]
 800a70e:	b570      	push	{r4, r5, r6, lr}
 800a710:	0005      	movs	r5, r0
 800a712:	000c      	movs	r4, r1
 800a714:	2b00      	cmp	r3, #0
 800a716:	d102      	bne.n	800a71e <_fflush_r+0x12>
 800a718:	2500      	movs	r5, #0
 800a71a:	0028      	movs	r0, r5
 800a71c:	bd70      	pop	{r4, r5, r6, pc}
 800a71e:	2800      	cmp	r0, #0
 800a720:	d004      	beq.n	800a72c <_fflush_r+0x20>
 800a722:	6983      	ldr	r3, [r0, #24]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d101      	bne.n	800a72c <_fflush_r+0x20>
 800a728:	f000 f892 	bl	800a850 <__sinit>
 800a72c:	4b14      	ldr	r3, [pc, #80]	; (800a780 <_fflush_r+0x74>)
 800a72e:	429c      	cmp	r4, r3
 800a730:	d11b      	bne.n	800a76a <_fflush_r+0x5e>
 800a732:	686c      	ldr	r4, [r5, #4]
 800a734:	220c      	movs	r2, #12
 800a736:	5ea3      	ldrsh	r3, [r4, r2]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d0ed      	beq.n	800a718 <_fflush_r+0xc>
 800a73c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a73e:	07d2      	lsls	r2, r2, #31
 800a740:	d404      	bmi.n	800a74c <_fflush_r+0x40>
 800a742:	059b      	lsls	r3, r3, #22
 800a744:	d402      	bmi.n	800a74c <_fflush_r+0x40>
 800a746:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a748:	f000 f923 	bl	800a992 <__retarget_lock_acquire_recursive>
 800a74c:	0028      	movs	r0, r5
 800a74e:	0021      	movs	r1, r4
 800a750:	f7ff ff50 	bl	800a5f4 <__sflush_r>
 800a754:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a756:	0005      	movs	r5, r0
 800a758:	07db      	lsls	r3, r3, #31
 800a75a:	d4de      	bmi.n	800a71a <_fflush_r+0xe>
 800a75c:	89a3      	ldrh	r3, [r4, #12]
 800a75e:	059b      	lsls	r3, r3, #22
 800a760:	d4db      	bmi.n	800a71a <_fflush_r+0xe>
 800a762:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a764:	f000 f916 	bl	800a994 <__retarget_lock_release_recursive>
 800a768:	e7d7      	b.n	800a71a <_fflush_r+0xe>
 800a76a:	4b06      	ldr	r3, [pc, #24]	; (800a784 <_fflush_r+0x78>)
 800a76c:	429c      	cmp	r4, r3
 800a76e:	d101      	bne.n	800a774 <_fflush_r+0x68>
 800a770:	68ac      	ldr	r4, [r5, #8]
 800a772:	e7df      	b.n	800a734 <_fflush_r+0x28>
 800a774:	4b04      	ldr	r3, [pc, #16]	; (800a788 <_fflush_r+0x7c>)
 800a776:	429c      	cmp	r4, r3
 800a778:	d1dc      	bne.n	800a734 <_fflush_r+0x28>
 800a77a:	68ec      	ldr	r4, [r5, #12]
 800a77c:	e7da      	b.n	800a734 <_fflush_r+0x28>
 800a77e:	46c0      	nop			; (mov r8, r8)
 800a780:	0800b2e4 	.word	0x0800b2e4
 800a784:	0800b304 	.word	0x0800b304
 800a788:	0800b2c4 	.word	0x0800b2c4

0800a78c <std>:
 800a78c:	2300      	movs	r3, #0
 800a78e:	b510      	push	{r4, lr}
 800a790:	0004      	movs	r4, r0
 800a792:	6003      	str	r3, [r0, #0]
 800a794:	6043      	str	r3, [r0, #4]
 800a796:	6083      	str	r3, [r0, #8]
 800a798:	8181      	strh	r1, [r0, #12]
 800a79a:	6643      	str	r3, [r0, #100]	; 0x64
 800a79c:	0019      	movs	r1, r3
 800a79e:	81c2      	strh	r2, [r0, #14]
 800a7a0:	6103      	str	r3, [r0, #16]
 800a7a2:	6143      	str	r3, [r0, #20]
 800a7a4:	6183      	str	r3, [r0, #24]
 800a7a6:	2208      	movs	r2, #8
 800a7a8:	305c      	adds	r0, #92	; 0x5c
 800a7aa:	f7fd fb1d 	bl	8007de8 <memset>
 800a7ae:	4b05      	ldr	r3, [pc, #20]	; (800a7c4 <std+0x38>)
 800a7b0:	6263      	str	r3, [r4, #36]	; 0x24
 800a7b2:	4b05      	ldr	r3, [pc, #20]	; (800a7c8 <std+0x3c>)
 800a7b4:	6224      	str	r4, [r4, #32]
 800a7b6:	62a3      	str	r3, [r4, #40]	; 0x28
 800a7b8:	4b04      	ldr	r3, [pc, #16]	; (800a7cc <std+0x40>)
 800a7ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a7bc:	4b04      	ldr	r3, [pc, #16]	; (800a7d0 <std+0x44>)
 800a7be:	6323      	str	r3, [r4, #48]	; 0x30
 800a7c0:	bd10      	pop	{r4, pc}
 800a7c2:	46c0      	nop			; (mov r8, r8)
 800a7c4:	0800ab15 	.word	0x0800ab15
 800a7c8:	0800ab3d 	.word	0x0800ab3d
 800a7cc:	0800ab75 	.word	0x0800ab75
 800a7d0:	0800aba1 	.word	0x0800aba1

0800a7d4 <_cleanup_r>:
 800a7d4:	b510      	push	{r4, lr}
 800a7d6:	4902      	ldr	r1, [pc, #8]	; (800a7e0 <_cleanup_r+0xc>)
 800a7d8:	f000 f8ba 	bl	800a950 <_fwalk_reent>
 800a7dc:	bd10      	pop	{r4, pc}
 800a7de:	46c0      	nop			; (mov r8, r8)
 800a7e0:	0800a70d 	.word	0x0800a70d

0800a7e4 <__sfmoreglue>:
 800a7e4:	b570      	push	{r4, r5, r6, lr}
 800a7e6:	2568      	movs	r5, #104	; 0x68
 800a7e8:	1e4a      	subs	r2, r1, #1
 800a7ea:	4355      	muls	r5, r2
 800a7ec:	000e      	movs	r6, r1
 800a7ee:	0029      	movs	r1, r5
 800a7f0:	3174      	adds	r1, #116	; 0x74
 800a7f2:	f7ff fa5d 	bl	8009cb0 <_malloc_r>
 800a7f6:	1e04      	subs	r4, r0, #0
 800a7f8:	d008      	beq.n	800a80c <__sfmoreglue+0x28>
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	002a      	movs	r2, r5
 800a7fe:	6001      	str	r1, [r0, #0]
 800a800:	6046      	str	r6, [r0, #4]
 800a802:	300c      	adds	r0, #12
 800a804:	60a0      	str	r0, [r4, #8]
 800a806:	3268      	adds	r2, #104	; 0x68
 800a808:	f7fd faee 	bl	8007de8 <memset>
 800a80c:	0020      	movs	r0, r4
 800a80e:	bd70      	pop	{r4, r5, r6, pc}

0800a810 <__sfp_lock_acquire>:
 800a810:	b510      	push	{r4, lr}
 800a812:	4802      	ldr	r0, [pc, #8]	; (800a81c <__sfp_lock_acquire+0xc>)
 800a814:	f000 f8bd 	bl	800a992 <__retarget_lock_acquire_recursive>
 800a818:	bd10      	pop	{r4, pc}
 800a81a:	46c0      	nop			; (mov r8, r8)
 800a81c:	20000a58 	.word	0x20000a58

0800a820 <__sfp_lock_release>:
 800a820:	b510      	push	{r4, lr}
 800a822:	4802      	ldr	r0, [pc, #8]	; (800a82c <__sfp_lock_release+0xc>)
 800a824:	f000 f8b6 	bl	800a994 <__retarget_lock_release_recursive>
 800a828:	bd10      	pop	{r4, pc}
 800a82a:	46c0      	nop			; (mov r8, r8)
 800a82c:	20000a58 	.word	0x20000a58

0800a830 <__sinit_lock_acquire>:
 800a830:	b510      	push	{r4, lr}
 800a832:	4802      	ldr	r0, [pc, #8]	; (800a83c <__sinit_lock_acquire+0xc>)
 800a834:	f000 f8ad 	bl	800a992 <__retarget_lock_acquire_recursive>
 800a838:	bd10      	pop	{r4, pc}
 800a83a:	46c0      	nop			; (mov r8, r8)
 800a83c:	20000a53 	.word	0x20000a53

0800a840 <__sinit_lock_release>:
 800a840:	b510      	push	{r4, lr}
 800a842:	4802      	ldr	r0, [pc, #8]	; (800a84c <__sinit_lock_release+0xc>)
 800a844:	f000 f8a6 	bl	800a994 <__retarget_lock_release_recursive>
 800a848:	bd10      	pop	{r4, pc}
 800a84a:	46c0      	nop			; (mov r8, r8)
 800a84c:	20000a53 	.word	0x20000a53

0800a850 <__sinit>:
 800a850:	b513      	push	{r0, r1, r4, lr}
 800a852:	0004      	movs	r4, r0
 800a854:	f7ff ffec 	bl	800a830 <__sinit_lock_acquire>
 800a858:	69a3      	ldr	r3, [r4, #24]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d002      	beq.n	800a864 <__sinit+0x14>
 800a85e:	f7ff ffef 	bl	800a840 <__sinit_lock_release>
 800a862:	bd13      	pop	{r0, r1, r4, pc}
 800a864:	64a3      	str	r3, [r4, #72]	; 0x48
 800a866:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a868:	6523      	str	r3, [r4, #80]	; 0x50
 800a86a:	4b13      	ldr	r3, [pc, #76]	; (800a8b8 <__sinit+0x68>)
 800a86c:	4a13      	ldr	r2, [pc, #76]	; (800a8bc <__sinit+0x6c>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	62a2      	str	r2, [r4, #40]	; 0x28
 800a872:	9301      	str	r3, [sp, #4]
 800a874:	42a3      	cmp	r3, r4
 800a876:	d101      	bne.n	800a87c <__sinit+0x2c>
 800a878:	2301      	movs	r3, #1
 800a87a:	61a3      	str	r3, [r4, #24]
 800a87c:	0020      	movs	r0, r4
 800a87e:	f000 f81f 	bl	800a8c0 <__sfp>
 800a882:	6060      	str	r0, [r4, #4]
 800a884:	0020      	movs	r0, r4
 800a886:	f000 f81b 	bl	800a8c0 <__sfp>
 800a88a:	60a0      	str	r0, [r4, #8]
 800a88c:	0020      	movs	r0, r4
 800a88e:	f000 f817 	bl	800a8c0 <__sfp>
 800a892:	2200      	movs	r2, #0
 800a894:	2104      	movs	r1, #4
 800a896:	60e0      	str	r0, [r4, #12]
 800a898:	6860      	ldr	r0, [r4, #4]
 800a89a:	f7ff ff77 	bl	800a78c <std>
 800a89e:	2201      	movs	r2, #1
 800a8a0:	2109      	movs	r1, #9
 800a8a2:	68a0      	ldr	r0, [r4, #8]
 800a8a4:	f7ff ff72 	bl	800a78c <std>
 800a8a8:	2202      	movs	r2, #2
 800a8aa:	2112      	movs	r1, #18
 800a8ac:	68e0      	ldr	r0, [r4, #12]
 800a8ae:	f7ff ff6d 	bl	800a78c <std>
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	61a3      	str	r3, [r4, #24]
 800a8b6:	e7d2      	b.n	800a85e <__sinit+0xe>
 800a8b8:	0800af44 	.word	0x0800af44
 800a8bc:	0800a7d5 	.word	0x0800a7d5

0800a8c0 <__sfp>:
 800a8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8c2:	0007      	movs	r7, r0
 800a8c4:	f7ff ffa4 	bl	800a810 <__sfp_lock_acquire>
 800a8c8:	4b1f      	ldr	r3, [pc, #124]	; (800a948 <__sfp+0x88>)
 800a8ca:	681e      	ldr	r6, [r3, #0]
 800a8cc:	69b3      	ldr	r3, [r6, #24]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d102      	bne.n	800a8d8 <__sfp+0x18>
 800a8d2:	0030      	movs	r0, r6
 800a8d4:	f7ff ffbc 	bl	800a850 <__sinit>
 800a8d8:	3648      	adds	r6, #72	; 0x48
 800a8da:	68b4      	ldr	r4, [r6, #8]
 800a8dc:	6873      	ldr	r3, [r6, #4]
 800a8de:	3b01      	subs	r3, #1
 800a8e0:	d504      	bpl.n	800a8ec <__sfp+0x2c>
 800a8e2:	6833      	ldr	r3, [r6, #0]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d022      	beq.n	800a92e <__sfp+0x6e>
 800a8e8:	6836      	ldr	r6, [r6, #0]
 800a8ea:	e7f6      	b.n	800a8da <__sfp+0x1a>
 800a8ec:	220c      	movs	r2, #12
 800a8ee:	5ea5      	ldrsh	r5, [r4, r2]
 800a8f0:	2d00      	cmp	r5, #0
 800a8f2:	d11a      	bne.n	800a92a <__sfp+0x6a>
 800a8f4:	0020      	movs	r0, r4
 800a8f6:	4b15      	ldr	r3, [pc, #84]	; (800a94c <__sfp+0x8c>)
 800a8f8:	3058      	adds	r0, #88	; 0x58
 800a8fa:	60e3      	str	r3, [r4, #12]
 800a8fc:	6665      	str	r5, [r4, #100]	; 0x64
 800a8fe:	f000 f847 	bl	800a990 <__retarget_lock_init_recursive>
 800a902:	f7ff ff8d 	bl	800a820 <__sfp_lock_release>
 800a906:	0020      	movs	r0, r4
 800a908:	2208      	movs	r2, #8
 800a90a:	0029      	movs	r1, r5
 800a90c:	6025      	str	r5, [r4, #0]
 800a90e:	60a5      	str	r5, [r4, #8]
 800a910:	6065      	str	r5, [r4, #4]
 800a912:	6125      	str	r5, [r4, #16]
 800a914:	6165      	str	r5, [r4, #20]
 800a916:	61a5      	str	r5, [r4, #24]
 800a918:	305c      	adds	r0, #92	; 0x5c
 800a91a:	f7fd fa65 	bl	8007de8 <memset>
 800a91e:	6365      	str	r5, [r4, #52]	; 0x34
 800a920:	63a5      	str	r5, [r4, #56]	; 0x38
 800a922:	64a5      	str	r5, [r4, #72]	; 0x48
 800a924:	64e5      	str	r5, [r4, #76]	; 0x4c
 800a926:	0020      	movs	r0, r4
 800a928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a92a:	3468      	adds	r4, #104	; 0x68
 800a92c:	e7d7      	b.n	800a8de <__sfp+0x1e>
 800a92e:	2104      	movs	r1, #4
 800a930:	0038      	movs	r0, r7
 800a932:	f7ff ff57 	bl	800a7e4 <__sfmoreglue>
 800a936:	1e04      	subs	r4, r0, #0
 800a938:	6030      	str	r0, [r6, #0]
 800a93a:	d1d5      	bne.n	800a8e8 <__sfp+0x28>
 800a93c:	f7ff ff70 	bl	800a820 <__sfp_lock_release>
 800a940:	230c      	movs	r3, #12
 800a942:	603b      	str	r3, [r7, #0]
 800a944:	e7ef      	b.n	800a926 <__sfp+0x66>
 800a946:	46c0      	nop			; (mov r8, r8)
 800a948:	0800af44 	.word	0x0800af44
 800a94c:	ffff0001 	.word	0xffff0001

0800a950 <_fwalk_reent>:
 800a950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a952:	0004      	movs	r4, r0
 800a954:	0006      	movs	r6, r0
 800a956:	2700      	movs	r7, #0
 800a958:	9101      	str	r1, [sp, #4]
 800a95a:	3448      	adds	r4, #72	; 0x48
 800a95c:	6863      	ldr	r3, [r4, #4]
 800a95e:	68a5      	ldr	r5, [r4, #8]
 800a960:	9300      	str	r3, [sp, #0]
 800a962:	9b00      	ldr	r3, [sp, #0]
 800a964:	3b01      	subs	r3, #1
 800a966:	9300      	str	r3, [sp, #0]
 800a968:	d504      	bpl.n	800a974 <_fwalk_reent+0x24>
 800a96a:	6824      	ldr	r4, [r4, #0]
 800a96c:	2c00      	cmp	r4, #0
 800a96e:	d1f5      	bne.n	800a95c <_fwalk_reent+0xc>
 800a970:	0038      	movs	r0, r7
 800a972:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a974:	89ab      	ldrh	r3, [r5, #12]
 800a976:	2b01      	cmp	r3, #1
 800a978:	d908      	bls.n	800a98c <_fwalk_reent+0x3c>
 800a97a:	220e      	movs	r2, #14
 800a97c:	5eab      	ldrsh	r3, [r5, r2]
 800a97e:	3301      	adds	r3, #1
 800a980:	d004      	beq.n	800a98c <_fwalk_reent+0x3c>
 800a982:	0029      	movs	r1, r5
 800a984:	0030      	movs	r0, r6
 800a986:	9b01      	ldr	r3, [sp, #4]
 800a988:	4798      	blx	r3
 800a98a:	4307      	orrs	r7, r0
 800a98c:	3568      	adds	r5, #104	; 0x68
 800a98e:	e7e8      	b.n	800a962 <_fwalk_reent+0x12>

0800a990 <__retarget_lock_init_recursive>:
 800a990:	4770      	bx	lr

0800a992 <__retarget_lock_acquire_recursive>:
 800a992:	4770      	bx	lr

0800a994 <__retarget_lock_release_recursive>:
 800a994:	4770      	bx	lr
	...

0800a998 <__swhatbuf_r>:
 800a998:	b570      	push	{r4, r5, r6, lr}
 800a99a:	000e      	movs	r6, r1
 800a99c:	001d      	movs	r5, r3
 800a99e:	230e      	movs	r3, #14
 800a9a0:	5ec9      	ldrsh	r1, [r1, r3]
 800a9a2:	0014      	movs	r4, r2
 800a9a4:	b096      	sub	sp, #88	; 0x58
 800a9a6:	2900      	cmp	r1, #0
 800a9a8:	da07      	bge.n	800a9ba <__swhatbuf_r+0x22>
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	602b      	str	r3, [r5, #0]
 800a9ae:	89b3      	ldrh	r3, [r6, #12]
 800a9b0:	061b      	lsls	r3, r3, #24
 800a9b2:	d411      	bmi.n	800a9d8 <__swhatbuf_r+0x40>
 800a9b4:	2380      	movs	r3, #128	; 0x80
 800a9b6:	00db      	lsls	r3, r3, #3
 800a9b8:	e00f      	b.n	800a9da <__swhatbuf_r+0x42>
 800a9ba:	466a      	mov	r2, sp
 800a9bc:	f000 f91c 	bl	800abf8 <_fstat_r>
 800a9c0:	2800      	cmp	r0, #0
 800a9c2:	dbf2      	blt.n	800a9aa <__swhatbuf_r+0x12>
 800a9c4:	23f0      	movs	r3, #240	; 0xf0
 800a9c6:	9901      	ldr	r1, [sp, #4]
 800a9c8:	021b      	lsls	r3, r3, #8
 800a9ca:	4019      	ands	r1, r3
 800a9cc:	4b05      	ldr	r3, [pc, #20]	; (800a9e4 <__swhatbuf_r+0x4c>)
 800a9ce:	18c9      	adds	r1, r1, r3
 800a9d0:	424b      	negs	r3, r1
 800a9d2:	4159      	adcs	r1, r3
 800a9d4:	6029      	str	r1, [r5, #0]
 800a9d6:	e7ed      	b.n	800a9b4 <__swhatbuf_r+0x1c>
 800a9d8:	2340      	movs	r3, #64	; 0x40
 800a9da:	2000      	movs	r0, #0
 800a9dc:	6023      	str	r3, [r4, #0]
 800a9de:	b016      	add	sp, #88	; 0x58
 800a9e0:	bd70      	pop	{r4, r5, r6, pc}
 800a9e2:	46c0      	nop			; (mov r8, r8)
 800a9e4:	ffffe000 	.word	0xffffe000

0800a9e8 <__smakebuf_r>:
 800a9e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9ea:	2602      	movs	r6, #2
 800a9ec:	898b      	ldrh	r3, [r1, #12]
 800a9ee:	0005      	movs	r5, r0
 800a9f0:	000c      	movs	r4, r1
 800a9f2:	4233      	tst	r3, r6
 800a9f4:	d006      	beq.n	800aa04 <__smakebuf_r+0x1c>
 800a9f6:	0023      	movs	r3, r4
 800a9f8:	3347      	adds	r3, #71	; 0x47
 800a9fa:	6023      	str	r3, [r4, #0]
 800a9fc:	6123      	str	r3, [r4, #16]
 800a9fe:	2301      	movs	r3, #1
 800aa00:	6163      	str	r3, [r4, #20]
 800aa02:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800aa04:	466a      	mov	r2, sp
 800aa06:	ab01      	add	r3, sp, #4
 800aa08:	f7ff ffc6 	bl	800a998 <__swhatbuf_r>
 800aa0c:	9900      	ldr	r1, [sp, #0]
 800aa0e:	0007      	movs	r7, r0
 800aa10:	0028      	movs	r0, r5
 800aa12:	f7ff f94d 	bl	8009cb0 <_malloc_r>
 800aa16:	2800      	cmp	r0, #0
 800aa18:	d108      	bne.n	800aa2c <__smakebuf_r+0x44>
 800aa1a:	220c      	movs	r2, #12
 800aa1c:	5ea3      	ldrsh	r3, [r4, r2]
 800aa1e:	059a      	lsls	r2, r3, #22
 800aa20:	d4ef      	bmi.n	800aa02 <__smakebuf_r+0x1a>
 800aa22:	2203      	movs	r2, #3
 800aa24:	4393      	bics	r3, r2
 800aa26:	431e      	orrs	r6, r3
 800aa28:	81a6      	strh	r6, [r4, #12]
 800aa2a:	e7e4      	b.n	800a9f6 <__smakebuf_r+0xe>
 800aa2c:	4b0f      	ldr	r3, [pc, #60]	; (800aa6c <__smakebuf_r+0x84>)
 800aa2e:	62ab      	str	r3, [r5, #40]	; 0x28
 800aa30:	2380      	movs	r3, #128	; 0x80
 800aa32:	89a2      	ldrh	r2, [r4, #12]
 800aa34:	6020      	str	r0, [r4, #0]
 800aa36:	4313      	orrs	r3, r2
 800aa38:	81a3      	strh	r3, [r4, #12]
 800aa3a:	9b00      	ldr	r3, [sp, #0]
 800aa3c:	6120      	str	r0, [r4, #16]
 800aa3e:	6163      	str	r3, [r4, #20]
 800aa40:	9b01      	ldr	r3, [sp, #4]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d00d      	beq.n	800aa62 <__smakebuf_r+0x7a>
 800aa46:	0028      	movs	r0, r5
 800aa48:	230e      	movs	r3, #14
 800aa4a:	5ee1      	ldrsh	r1, [r4, r3]
 800aa4c:	f000 f8e6 	bl	800ac1c <_isatty_r>
 800aa50:	2800      	cmp	r0, #0
 800aa52:	d006      	beq.n	800aa62 <__smakebuf_r+0x7a>
 800aa54:	2203      	movs	r2, #3
 800aa56:	89a3      	ldrh	r3, [r4, #12]
 800aa58:	4393      	bics	r3, r2
 800aa5a:	001a      	movs	r2, r3
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	81a3      	strh	r3, [r4, #12]
 800aa62:	89a0      	ldrh	r0, [r4, #12]
 800aa64:	4307      	orrs	r7, r0
 800aa66:	81a7      	strh	r7, [r4, #12]
 800aa68:	e7cb      	b.n	800aa02 <__smakebuf_r+0x1a>
 800aa6a:	46c0      	nop			; (mov r8, r8)
 800aa6c:	0800a7d5 	.word	0x0800a7d5

0800aa70 <_malloc_usable_size_r>:
 800aa70:	1f0b      	subs	r3, r1, #4
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	1f18      	subs	r0, r3, #4
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	da01      	bge.n	800aa7e <_malloc_usable_size_r+0xe>
 800aa7a:	580b      	ldr	r3, [r1, r0]
 800aa7c:	18c0      	adds	r0, r0, r3
 800aa7e:	4770      	bx	lr

0800aa80 <_raise_r>:
 800aa80:	b570      	push	{r4, r5, r6, lr}
 800aa82:	0004      	movs	r4, r0
 800aa84:	000d      	movs	r5, r1
 800aa86:	291f      	cmp	r1, #31
 800aa88:	d904      	bls.n	800aa94 <_raise_r+0x14>
 800aa8a:	2316      	movs	r3, #22
 800aa8c:	6003      	str	r3, [r0, #0]
 800aa8e:	2001      	movs	r0, #1
 800aa90:	4240      	negs	r0, r0
 800aa92:	bd70      	pop	{r4, r5, r6, pc}
 800aa94:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d004      	beq.n	800aaa4 <_raise_r+0x24>
 800aa9a:	008a      	lsls	r2, r1, #2
 800aa9c:	189b      	adds	r3, r3, r2
 800aa9e:	681a      	ldr	r2, [r3, #0]
 800aaa0:	2a00      	cmp	r2, #0
 800aaa2:	d108      	bne.n	800aab6 <_raise_r+0x36>
 800aaa4:	0020      	movs	r0, r4
 800aaa6:	f000 f831 	bl	800ab0c <_getpid_r>
 800aaaa:	002a      	movs	r2, r5
 800aaac:	0001      	movs	r1, r0
 800aaae:	0020      	movs	r0, r4
 800aab0:	f000 f81a 	bl	800aae8 <_kill_r>
 800aab4:	e7ed      	b.n	800aa92 <_raise_r+0x12>
 800aab6:	2000      	movs	r0, #0
 800aab8:	2a01      	cmp	r2, #1
 800aaba:	d0ea      	beq.n	800aa92 <_raise_r+0x12>
 800aabc:	1c51      	adds	r1, r2, #1
 800aabe:	d103      	bne.n	800aac8 <_raise_r+0x48>
 800aac0:	2316      	movs	r3, #22
 800aac2:	3001      	adds	r0, #1
 800aac4:	6023      	str	r3, [r4, #0]
 800aac6:	e7e4      	b.n	800aa92 <_raise_r+0x12>
 800aac8:	2400      	movs	r4, #0
 800aaca:	0028      	movs	r0, r5
 800aacc:	601c      	str	r4, [r3, #0]
 800aace:	4790      	blx	r2
 800aad0:	0020      	movs	r0, r4
 800aad2:	e7de      	b.n	800aa92 <_raise_r+0x12>

0800aad4 <raise>:
 800aad4:	b510      	push	{r4, lr}
 800aad6:	4b03      	ldr	r3, [pc, #12]	; (800aae4 <raise+0x10>)
 800aad8:	0001      	movs	r1, r0
 800aada:	6818      	ldr	r0, [r3, #0]
 800aadc:	f7ff ffd0 	bl	800aa80 <_raise_r>
 800aae0:	bd10      	pop	{r4, pc}
 800aae2:	46c0      	nop			; (mov r8, r8)
 800aae4:	20000044 	.word	0x20000044

0800aae8 <_kill_r>:
 800aae8:	2300      	movs	r3, #0
 800aaea:	b570      	push	{r4, r5, r6, lr}
 800aaec:	4d06      	ldr	r5, [pc, #24]	; (800ab08 <_kill_r+0x20>)
 800aaee:	0004      	movs	r4, r0
 800aaf0:	0008      	movs	r0, r1
 800aaf2:	0011      	movs	r1, r2
 800aaf4:	602b      	str	r3, [r5, #0]
 800aaf6:	f7f9 f9e3 	bl	8003ec0 <_kill>
 800aafa:	1c43      	adds	r3, r0, #1
 800aafc:	d103      	bne.n	800ab06 <_kill_r+0x1e>
 800aafe:	682b      	ldr	r3, [r5, #0]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d000      	beq.n	800ab06 <_kill_r+0x1e>
 800ab04:	6023      	str	r3, [r4, #0]
 800ab06:	bd70      	pop	{r4, r5, r6, pc}
 800ab08:	20000a4c 	.word	0x20000a4c

0800ab0c <_getpid_r>:
 800ab0c:	b510      	push	{r4, lr}
 800ab0e:	f7f9 f9d1 	bl	8003eb4 <_getpid>
 800ab12:	bd10      	pop	{r4, pc}

0800ab14 <__sread>:
 800ab14:	b570      	push	{r4, r5, r6, lr}
 800ab16:	000c      	movs	r4, r1
 800ab18:	250e      	movs	r5, #14
 800ab1a:	5f49      	ldrsh	r1, [r1, r5]
 800ab1c:	f000 f8a4 	bl	800ac68 <_read_r>
 800ab20:	2800      	cmp	r0, #0
 800ab22:	db03      	blt.n	800ab2c <__sread+0x18>
 800ab24:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ab26:	181b      	adds	r3, r3, r0
 800ab28:	6563      	str	r3, [r4, #84]	; 0x54
 800ab2a:	bd70      	pop	{r4, r5, r6, pc}
 800ab2c:	89a3      	ldrh	r3, [r4, #12]
 800ab2e:	4a02      	ldr	r2, [pc, #8]	; (800ab38 <__sread+0x24>)
 800ab30:	4013      	ands	r3, r2
 800ab32:	81a3      	strh	r3, [r4, #12]
 800ab34:	e7f9      	b.n	800ab2a <__sread+0x16>
 800ab36:	46c0      	nop			; (mov r8, r8)
 800ab38:	ffffefff 	.word	0xffffefff

0800ab3c <__swrite>:
 800ab3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab3e:	001f      	movs	r7, r3
 800ab40:	898b      	ldrh	r3, [r1, #12]
 800ab42:	0005      	movs	r5, r0
 800ab44:	000c      	movs	r4, r1
 800ab46:	0016      	movs	r6, r2
 800ab48:	05db      	lsls	r3, r3, #23
 800ab4a:	d505      	bpl.n	800ab58 <__swrite+0x1c>
 800ab4c:	230e      	movs	r3, #14
 800ab4e:	5ec9      	ldrsh	r1, [r1, r3]
 800ab50:	2200      	movs	r2, #0
 800ab52:	2302      	movs	r3, #2
 800ab54:	f000 f874 	bl	800ac40 <_lseek_r>
 800ab58:	89a3      	ldrh	r3, [r4, #12]
 800ab5a:	4a05      	ldr	r2, [pc, #20]	; (800ab70 <__swrite+0x34>)
 800ab5c:	0028      	movs	r0, r5
 800ab5e:	4013      	ands	r3, r2
 800ab60:	81a3      	strh	r3, [r4, #12]
 800ab62:	0032      	movs	r2, r6
 800ab64:	230e      	movs	r3, #14
 800ab66:	5ee1      	ldrsh	r1, [r4, r3]
 800ab68:	003b      	movs	r3, r7
 800ab6a:	f000 f81f 	bl	800abac <_write_r>
 800ab6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab70:	ffffefff 	.word	0xffffefff

0800ab74 <__sseek>:
 800ab74:	b570      	push	{r4, r5, r6, lr}
 800ab76:	000c      	movs	r4, r1
 800ab78:	250e      	movs	r5, #14
 800ab7a:	5f49      	ldrsh	r1, [r1, r5]
 800ab7c:	f000 f860 	bl	800ac40 <_lseek_r>
 800ab80:	89a3      	ldrh	r3, [r4, #12]
 800ab82:	1c42      	adds	r2, r0, #1
 800ab84:	d103      	bne.n	800ab8e <__sseek+0x1a>
 800ab86:	4a05      	ldr	r2, [pc, #20]	; (800ab9c <__sseek+0x28>)
 800ab88:	4013      	ands	r3, r2
 800ab8a:	81a3      	strh	r3, [r4, #12]
 800ab8c:	bd70      	pop	{r4, r5, r6, pc}
 800ab8e:	2280      	movs	r2, #128	; 0x80
 800ab90:	0152      	lsls	r2, r2, #5
 800ab92:	4313      	orrs	r3, r2
 800ab94:	81a3      	strh	r3, [r4, #12]
 800ab96:	6560      	str	r0, [r4, #84]	; 0x54
 800ab98:	e7f8      	b.n	800ab8c <__sseek+0x18>
 800ab9a:	46c0      	nop			; (mov r8, r8)
 800ab9c:	ffffefff 	.word	0xffffefff

0800aba0 <__sclose>:
 800aba0:	b510      	push	{r4, lr}
 800aba2:	230e      	movs	r3, #14
 800aba4:	5ec9      	ldrsh	r1, [r1, r3]
 800aba6:	f000 f815 	bl	800abd4 <_close_r>
 800abaa:	bd10      	pop	{r4, pc}

0800abac <_write_r>:
 800abac:	b570      	push	{r4, r5, r6, lr}
 800abae:	0004      	movs	r4, r0
 800abb0:	0008      	movs	r0, r1
 800abb2:	0011      	movs	r1, r2
 800abb4:	001a      	movs	r2, r3
 800abb6:	2300      	movs	r3, #0
 800abb8:	4d05      	ldr	r5, [pc, #20]	; (800abd0 <_write_r+0x24>)
 800abba:	602b      	str	r3, [r5, #0]
 800abbc:	f7f9 f9b9 	bl	8003f32 <_write>
 800abc0:	1c43      	adds	r3, r0, #1
 800abc2:	d103      	bne.n	800abcc <_write_r+0x20>
 800abc4:	682b      	ldr	r3, [r5, #0]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d000      	beq.n	800abcc <_write_r+0x20>
 800abca:	6023      	str	r3, [r4, #0]
 800abcc:	bd70      	pop	{r4, r5, r6, pc}
 800abce:	46c0      	nop			; (mov r8, r8)
 800abd0:	20000a4c 	.word	0x20000a4c

0800abd4 <_close_r>:
 800abd4:	2300      	movs	r3, #0
 800abd6:	b570      	push	{r4, r5, r6, lr}
 800abd8:	4d06      	ldr	r5, [pc, #24]	; (800abf4 <_close_r+0x20>)
 800abda:	0004      	movs	r4, r0
 800abdc:	0008      	movs	r0, r1
 800abde:	602b      	str	r3, [r5, #0]
 800abe0:	f7f9 f9c3 	bl	8003f6a <_close>
 800abe4:	1c43      	adds	r3, r0, #1
 800abe6:	d103      	bne.n	800abf0 <_close_r+0x1c>
 800abe8:	682b      	ldr	r3, [r5, #0]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d000      	beq.n	800abf0 <_close_r+0x1c>
 800abee:	6023      	str	r3, [r4, #0]
 800abf0:	bd70      	pop	{r4, r5, r6, pc}
 800abf2:	46c0      	nop			; (mov r8, r8)
 800abf4:	20000a4c 	.word	0x20000a4c

0800abf8 <_fstat_r>:
 800abf8:	2300      	movs	r3, #0
 800abfa:	b570      	push	{r4, r5, r6, lr}
 800abfc:	4d06      	ldr	r5, [pc, #24]	; (800ac18 <_fstat_r+0x20>)
 800abfe:	0004      	movs	r4, r0
 800ac00:	0008      	movs	r0, r1
 800ac02:	0011      	movs	r1, r2
 800ac04:	602b      	str	r3, [r5, #0]
 800ac06:	f7f9 f9ba 	bl	8003f7e <_fstat>
 800ac0a:	1c43      	adds	r3, r0, #1
 800ac0c:	d103      	bne.n	800ac16 <_fstat_r+0x1e>
 800ac0e:	682b      	ldr	r3, [r5, #0]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d000      	beq.n	800ac16 <_fstat_r+0x1e>
 800ac14:	6023      	str	r3, [r4, #0]
 800ac16:	bd70      	pop	{r4, r5, r6, pc}
 800ac18:	20000a4c 	.word	0x20000a4c

0800ac1c <_isatty_r>:
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	b570      	push	{r4, r5, r6, lr}
 800ac20:	4d06      	ldr	r5, [pc, #24]	; (800ac3c <_isatty_r+0x20>)
 800ac22:	0004      	movs	r4, r0
 800ac24:	0008      	movs	r0, r1
 800ac26:	602b      	str	r3, [r5, #0]
 800ac28:	f7f9 f9b7 	bl	8003f9a <_isatty>
 800ac2c:	1c43      	adds	r3, r0, #1
 800ac2e:	d103      	bne.n	800ac38 <_isatty_r+0x1c>
 800ac30:	682b      	ldr	r3, [r5, #0]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d000      	beq.n	800ac38 <_isatty_r+0x1c>
 800ac36:	6023      	str	r3, [r4, #0]
 800ac38:	bd70      	pop	{r4, r5, r6, pc}
 800ac3a:	46c0      	nop			; (mov r8, r8)
 800ac3c:	20000a4c 	.word	0x20000a4c

0800ac40 <_lseek_r>:
 800ac40:	b570      	push	{r4, r5, r6, lr}
 800ac42:	0004      	movs	r4, r0
 800ac44:	0008      	movs	r0, r1
 800ac46:	0011      	movs	r1, r2
 800ac48:	001a      	movs	r2, r3
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	4d05      	ldr	r5, [pc, #20]	; (800ac64 <_lseek_r+0x24>)
 800ac4e:	602b      	str	r3, [r5, #0]
 800ac50:	f7f9 f9ac 	bl	8003fac <_lseek>
 800ac54:	1c43      	adds	r3, r0, #1
 800ac56:	d103      	bne.n	800ac60 <_lseek_r+0x20>
 800ac58:	682b      	ldr	r3, [r5, #0]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d000      	beq.n	800ac60 <_lseek_r+0x20>
 800ac5e:	6023      	str	r3, [r4, #0]
 800ac60:	bd70      	pop	{r4, r5, r6, pc}
 800ac62:	46c0      	nop			; (mov r8, r8)
 800ac64:	20000a4c 	.word	0x20000a4c

0800ac68 <_read_r>:
 800ac68:	b570      	push	{r4, r5, r6, lr}
 800ac6a:	0004      	movs	r4, r0
 800ac6c:	0008      	movs	r0, r1
 800ac6e:	0011      	movs	r1, r2
 800ac70:	001a      	movs	r2, r3
 800ac72:	2300      	movs	r3, #0
 800ac74:	4d05      	ldr	r5, [pc, #20]	; (800ac8c <_read_r+0x24>)
 800ac76:	602b      	str	r3, [r5, #0]
 800ac78:	f7f9 f93e 	bl	8003ef8 <_read>
 800ac7c:	1c43      	adds	r3, r0, #1
 800ac7e:	d103      	bne.n	800ac88 <_read_r+0x20>
 800ac80:	682b      	ldr	r3, [r5, #0]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d000      	beq.n	800ac88 <_read_r+0x20>
 800ac86:	6023      	str	r3, [r4, #0]
 800ac88:	bd70      	pop	{r4, r5, r6, pc}
 800ac8a:	46c0      	nop			; (mov r8, r8)
 800ac8c:	20000a4c 	.word	0x20000a4c

0800ac90 <_init>:
 800ac90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac92:	46c0      	nop			; (mov r8, r8)
 800ac94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac96:	bc08      	pop	{r3}
 800ac98:	469e      	mov	lr, r3
 800ac9a:	4770      	bx	lr

0800ac9c <_fini>:
 800ac9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac9e:	46c0      	nop			; (mov r8, r8)
 800aca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aca2:	bc08      	pop	{r3}
 800aca4:	469e      	mov	lr, r3
 800aca6:	4770      	bx	lr
